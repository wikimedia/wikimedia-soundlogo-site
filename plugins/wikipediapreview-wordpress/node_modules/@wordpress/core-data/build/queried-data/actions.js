"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.receiveItems = receiveItems;
exports.removeItems = removeItems;
exports.receiveQueriedItems = receiveQueriedItems;

var _lodash = require("lodash");

/**
 * External dependencies
 */

/**
 * Returns an action object used in signalling that items have been received.
 *
 * @param {Array}   items Items received.
 * @param {?Object} edits Optional edits to reset.
 *
 * @return {Object} Action object.
 */
function receiveItems(items, edits) {
  return {
    type: 'RECEIVE_ITEMS',
    items: (0, _lodash.castArray)(items),
    persistedEdits: edits
  };
}
/**
 * Returns an action object used in signalling that entity records have been
 * deleted and they need to be removed from entities state.
 *
 * @param {string}       kind            Kind of the removed entities.
 * @param {string}       name            Name of the removed entities.
 * @param {Array|number} records         Record IDs of the removed entities.
 * @param {boolean}      invalidateCache Controls whether we want to invalidate the cache.
 * @return {Object} Action object.
 */


function removeItems(kind, name, records, invalidateCache = false) {
  return {
    type: 'REMOVE_ITEMS',
    itemIds: (0, _lodash.castArray)(records),
    kind,
    name,
    invalidateCache
  };
}
/**
 * Returns an action object used in signalling that queried data has been
 * received.
 *
 * @param {Array}   items Queried items received.
 * @param {?Object} query Optional query object.
 * @param {?Object} edits Optional edits to reset.
 *
 * @return {Object} Action object.
 */


function receiveQueriedItems(items, query = {}, edits) {
  return { ...receiveItems(items, edits),
    query
  };
}
//# sourceMappingURL=actions.js.map
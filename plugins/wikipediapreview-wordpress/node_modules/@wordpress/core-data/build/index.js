"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  store: true,
  EntityProvider: true
};
Object.defineProperty(exports, "EntityProvider", {
  enumerable: true,
  get: function () {
    return _entityProvider.default;
  }
});
exports.store = void 0;

var _data = require("@wordpress/data");

var _reducer = _interopRequireDefault(require("./reducer"));

var selectors = _interopRequireWildcard(require("./selectors"));

var actions = _interopRequireWildcard(require("./actions"));

var resolvers = _interopRequireWildcard(require("./resolvers"));

var _actions2 = _interopRequireDefault(require("./locks/actions"));

var _entities = require("./entities");

var _name = require("./name");

var _entityProvider = _interopRequireWildcard(require("./entity-provider"));

Object.keys(_entityProvider).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _entityProvider[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _entityProvider[key];
    }
  });
});

var _fetch = require("./fetch");

Object.keys(_fetch).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _fetch[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _fetch[key];
    }
  });
});

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
// The entity selectors/resolvers and actions are shortcuts to their generic equivalents
// (getEntityRecord, getEntityRecords, updateEntityRecord, updateEntityRecordss)
// Instead of getEntityRecord, the consumer could use more user-frieldly named selector: getPostType, getTaxonomy...
// The "kind" and the "name" of the entity are combined to generate these shortcuts.
const entitySelectors = _entities.defaultEntities.reduce((result, entity) => {
  const {
    kind,
    name
  } = entity;

  result[(0, _entities.getMethodName)(kind, name)] = (state, key, query) => selectors.getEntityRecord(state, kind, name, key, query);

  result[(0, _entities.getMethodName)(kind, name, 'get', true)] = (state, ...args) => selectors.getEntityRecords(state, kind, name, ...args);

  return result;
}, {});

const entityResolvers = _entities.defaultEntities.reduce((result, entity) => {
  const {
    kind,
    name
  } = entity;

  result[(0, _entities.getMethodName)(kind, name)] = (key, query) => resolvers.getEntityRecord(kind, name, key, query);

  const pluralMethodName = (0, _entities.getMethodName)(kind, name, 'get', true);

  result[pluralMethodName] = (...args) => resolvers.getEntityRecords(kind, name, ...args);

  result[pluralMethodName].shouldInvalidate = (action, ...args) => resolvers.getEntityRecords.shouldInvalidate(action, kind, name, ...args);

  return result;
}, {});

const entityActions = _entities.defaultEntities.reduce((result, entity) => {
  const {
    kind,
    name
  } = entity;

  result[(0, _entities.getMethodName)(kind, name, 'save')] = key => actions.saveEntityRecord(kind, name, key);

  result[(0, _entities.getMethodName)(kind, name, 'delete')] = (key, query) => actions.deleteEntityRecord(kind, name, key, query);

  return result;
}, {});

const storeConfig = () => ({
  reducer: _reducer.default,
  actions: { ...actions,
    ...entityActions,
    ...(0, _actions2.default)()
  },
  selectors: { ...selectors,
    ...entitySelectors
  },
  resolvers: { ...resolvers,
    ...entityResolvers
  },
  __experimentalUseThunks: true
});
/**
 * Store definition for the code data namespace.
 *
 * @see https://github.com/WordPress/gutenberg/blob/HEAD/packages/data/README.md#createReduxStore
 *
 * @type {Object}
 */


const store = (0, _data.createReduxStore)(_name.STORE_NAME, storeConfig());
exports.store = store;
(0, _data.register)(store);
//# sourceMappingURL=index.js.map
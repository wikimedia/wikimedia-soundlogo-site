{"version":3,"sources":["@wordpress/core-data/src/actions.js"],"names":["castArray","isEqual","find","v4","uuid","apiFetch","addQueryArgs","receiveItems","removeItems","receiveQueriedItems","getKindEntities","DEFAULT_ENTITY_KEY","createBatch","STORE_NAME","receiveUserQuery","queryID","users","type","receiveCurrentUser","currentUser","addEntities","entities","receiveEntityRecords","kind","name","records","query","invalidateCache","edits","map","record","status","title","action","receiveCurrentTheme","currentTheme","receiveThemeSupports","themeSupports","receiveEmbedPreview","url","preview","deleteEntityRecord","recordId","__unstableFetch","dispatch","entity","error","deletedRecord","__experimentalNoFetch","lock","__unstableAcquireStoreLock","exclusive","path","baseURL","method","_error","__unstableReleaseStoreLock","editEntityRecord","options","select","getEntity","Error","transientEdits","mergedEdits","getRawEntityRecord","editedRecord","getEditedEntityRecord","edit","Object","keys","reduce","acc","key","recordValue","editedRecordValue","value","undefined","meta","undo","undoIgnore","undoEdit","getUndoEdit","isUndo","redo","redoEdit","getRedoEdit","isRedo","__unstableCreateUndoLevel","saveEntityRecord","isAutosave","resolveSelect","entityIdKey","entries","evaluatedValue","updatedRecord","persistedRecord","getCurrentUser","currentUserId","id","autosavePost","getAutosave","data","includes","newRecord","receiveAutosaves","__unstablePrePersist","__experimentalBatch","requests","batch","api","add","saveEditedEntityRecord","resultPromises","request","results","Promise","all","run","hasEditsForEntityRecord","getEntityRecordNonTransientEdits","__experimentalSaveSpecifiedEntityEdits","itemsToSave","editsToSave","some","item","receiveUploadPermissions","hasUploadPermissions","isAllowed","receiveUserPermission","postId","autosaves"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { castArray, isEqual, find } from 'lodash';\nimport { v4 as uuid } from 'uuid';\n\n/**\n * WordPress dependencies\n */\nimport apiFetch from '@wordpress/api-fetch';\nimport { addQueryArgs } from '@wordpress/url';\n\n/**\n * Internal dependencies\n */\nimport { receiveItems, removeItems, receiveQueriedItems } from './queried-data';\nimport { getKindEntities, DEFAULT_ENTITY_KEY } from './entities';\nimport { createBatch } from './batch';\nimport { STORE_NAME } from './name';\n\n/**\n * Returns an action object used in signalling that authors have been received.\n *\n * @param {string}       queryID Query ID.\n * @param {Array|Object} users   Users received.\n *\n * @return {Object} Action object.\n */\nexport function receiveUserQuery( queryID, users ) {\n\treturn {\n\t\ttype: 'RECEIVE_USER_QUERY',\n\t\tusers: castArray( users ),\n\t\tqueryID,\n\t};\n}\n\n/**\n * Returns an action used in signalling that the current user has been received.\n *\n * @param {Object} currentUser Current user object.\n *\n * @return {Object} Action object.\n */\nexport function receiveCurrentUser( currentUser ) {\n\treturn {\n\t\ttype: 'RECEIVE_CURRENT_USER',\n\t\tcurrentUser,\n\t};\n}\n\n/**\n * Returns an action object used in adding new entities.\n *\n * @param {Array} entities Entities received.\n *\n * @return {Object} Action object.\n */\nexport function addEntities( entities ) {\n\treturn {\n\t\ttype: 'ADD_ENTITIES',\n\t\tentities,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that entity records have been received.\n *\n * @param {string}       kind            Kind of the received entity.\n * @param {string}       name            Name of the received entity.\n * @param {Array|Object} records         Records received.\n * @param {?Object}      query           Query Object.\n * @param {?boolean}     invalidateCache Should invalidate query caches.\n * @param {?Object}      edits           Edits to reset.\n * @return {Object} Action object.\n */\nexport function receiveEntityRecords(\n\tkind,\n\tname,\n\trecords,\n\tquery,\n\tinvalidateCache = false,\n\tedits\n) {\n\t// Auto drafts should not have titles, but some plugins rely on them so we can't filter this\n\t// on the server.\n\tif ( kind === 'postType' ) {\n\t\trecords = castArray( records ).map( ( record ) =>\n\t\t\trecord.status === 'auto-draft' ? { ...record, title: '' } : record\n\t\t);\n\t}\n\tlet action;\n\tif ( query ) {\n\t\taction = receiveQueriedItems( records, query, edits );\n\t} else {\n\t\taction = receiveItems( records, edits );\n\t}\n\n\treturn {\n\t\t...action,\n\t\tkind,\n\t\tname,\n\t\tinvalidateCache,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the current theme has been received.\n *\n * @param {Object} currentTheme The current theme.\n *\n * @return {Object} Action object.\n */\nexport function receiveCurrentTheme( currentTheme ) {\n\treturn {\n\t\ttype: 'RECEIVE_CURRENT_THEME',\n\t\tcurrentTheme,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the index has been received.\n *\n * @param {Object} themeSupports Theme support for the current theme.\n *\n * @return {Object} Action object.\n */\nexport function receiveThemeSupports( themeSupports ) {\n\treturn {\n\t\ttype: 'RECEIVE_THEME_SUPPORTS',\n\t\tthemeSupports,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the preview data for\n * a given URl has been received.\n *\n * @param {string} url     URL to preview the embed for.\n * @param {*}      preview Preview data.\n *\n * @return {Object} Action object.\n */\nexport function receiveEmbedPreview( url, preview ) {\n\treturn {\n\t\ttype: 'RECEIVE_EMBED_PREVIEW',\n\t\turl,\n\t\tpreview,\n\t};\n}\n\n/**\n * Action triggered to delete an entity record.\n *\n * @param {string}   kind                      Kind of the deleted entity.\n * @param {string}   name                      Name of the deleted entity.\n * @param {string}   recordId                  Record ID of the deleted entity.\n * @param {?Object}  query                     Special query parameters for the\n *                                             DELETE API call.\n * @param {Object}   [options]                 Delete options.\n * @param {Function} [options.__unstableFetch] Internal use only. Function to\n *                                             call instead of `apiFetch()`.\n *                                             Must return a promise.\n */\nexport const deleteEntityRecord = (\n\tkind,\n\tname,\n\trecordId,\n\tquery,\n\t{ __unstableFetch = apiFetch } = {}\n) => async ( { dispatch } ) => {\n\tconst entities = await dispatch( getKindEntities( kind ) );\n\tconst entity = find( entities, { kind, name } );\n\tlet error;\n\tlet deletedRecord = false;\n\tif ( ! entity || entity?.__experimentalNoFetch ) {\n\t\treturn;\n\t}\n\n\tconst lock = await dispatch.__unstableAcquireStoreLock(\n\t\tSTORE_NAME,\n\t\t[ 'entities', 'data', kind, name, recordId ],\n\t\t{ exclusive: true }\n\t);\n\n\ttry {\n\t\tdispatch( {\n\t\t\ttype: 'DELETE_ENTITY_RECORD_START',\n\t\t\tkind,\n\t\t\tname,\n\t\t\trecordId,\n\t\t} );\n\n\t\ttry {\n\t\t\tlet path = `${ entity.baseURL }/${ recordId }`;\n\n\t\t\tif ( query ) {\n\t\t\t\tpath = addQueryArgs( path, query );\n\t\t\t}\n\n\t\t\tdeletedRecord = await __unstableFetch( {\n\t\t\t\tpath,\n\t\t\t\tmethod: 'DELETE',\n\t\t\t} );\n\n\t\t\tawait dispatch( removeItems( kind, name, recordId, true ) );\n\t\t} catch ( _error ) {\n\t\t\terror = _error;\n\t\t}\n\n\t\tdispatch( {\n\t\t\ttype: 'DELETE_ENTITY_RECORD_FINISH',\n\t\t\tkind,\n\t\t\tname,\n\t\t\trecordId,\n\t\t\terror,\n\t\t} );\n\n\t\treturn deletedRecord;\n\t} finally {\n\t\tdispatch.__unstableReleaseStoreLock( lock );\n\t}\n};\n\n/**\n * Returns an action object that triggers an\n * edit to an entity record.\n *\n * @param {string}  kind               Kind of the edited entity record.\n * @param {string}  name               Name of the edited entity record.\n * @param {number}  recordId           Record ID of the edited entity record.\n * @param {Object}  edits              The edits.\n * @param {Object}  options            Options for the edit.\n * @param {boolean} options.undoIgnore Whether to ignore the edit in undo history or not.\n *\n * @return {Object} Action object.\n */\nexport const editEntityRecord = (\n\tkind,\n\tname,\n\trecordId,\n\tedits,\n\toptions = {}\n) => ( { select, dispatch } ) => {\n\tconst entity = select.getEntity( kind, name );\n\tif ( ! entity ) {\n\t\tthrow new Error(\n\t\t\t`The entity being edited (${ kind }, ${ name }) does not have a loaded config.`\n\t\t);\n\t}\n\tconst { transientEdits = {}, mergedEdits = {} } = entity;\n\tconst record = select.getRawEntityRecord( kind, name, recordId );\n\tconst editedRecord = select.getEditedEntityRecord( kind, name, recordId );\n\n\tconst edit = {\n\t\tkind,\n\t\tname,\n\t\trecordId,\n\t\t// Clear edits when they are equal to their persisted counterparts\n\t\t// so that the property is not considered dirty.\n\t\tedits: Object.keys( edits ).reduce( ( acc, key ) => {\n\t\t\tconst recordValue = record[ key ];\n\t\t\tconst editedRecordValue = editedRecord[ key ];\n\t\t\tconst value = mergedEdits[ key ]\n\t\t\t\t? { ...editedRecordValue, ...edits[ key ] }\n\t\t\t\t: edits[ key ];\n\t\t\tacc[ key ] = isEqual( recordValue, value ) ? undefined : value;\n\t\t\treturn acc;\n\t\t}, {} ),\n\t\ttransientEdits,\n\t};\n\tdispatch( {\n\t\ttype: 'EDIT_ENTITY_RECORD',\n\t\t...edit,\n\t\tmeta: {\n\t\t\tundo: ! options.undoIgnore && {\n\t\t\t\t...edit,\n\t\t\t\t// Send the current values for things like the first undo stack entry.\n\t\t\t\tedits: Object.keys( edits ).reduce( ( acc, key ) => {\n\t\t\t\t\tacc[ key ] = editedRecord[ key ];\n\t\t\t\t\treturn acc;\n\t\t\t\t}, {} ),\n\t\t\t},\n\t\t},\n\t} );\n};\n\n/**\n * Action triggered to undo the last edit to\n * an entity record, if any.\n *\n * @return {undefined}\n */\nexport const undo = () => ( { select, dispatch } ) => {\n\tconst undoEdit = select.getUndoEdit();\n\tif ( ! undoEdit ) {\n\t\treturn;\n\t}\n\tdispatch( {\n\t\ttype: 'EDIT_ENTITY_RECORD',\n\t\t...undoEdit,\n\t\tmeta: { isUndo: true },\n\t} );\n};\n\n/**\n * Action triggered to redo the last undoed\n * edit to an entity record, if any.\n *\n * @return {undefined}\n */\nexport const redo = () => ( { select, dispatch } ) => {\n\tconst redoEdit = select.getRedoEdit();\n\tif ( ! redoEdit ) {\n\t\treturn;\n\t}\n\tdispatch( {\n\t\ttype: 'EDIT_ENTITY_RECORD',\n\t\t...redoEdit,\n\t\tmeta: { isRedo: true },\n\t} );\n};\n\n/**\n * Forces the creation of a new undo level.\n *\n * @return {Object} Action object.\n */\nexport function __unstableCreateUndoLevel() {\n\treturn { type: 'CREATE_UNDO_LEVEL' };\n}\n\n/**\n * Action triggered to save an entity record.\n *\n * @param {string}   kind                       Kind of the received entity.\n * @param {string}   name                       Name of the received entity.\n * @param {Object}   record                     Record to be saved.\n * @param {Object}   options                    Saving options.\n * @param {boolean}  [options.isAutosave=false] Whether this is an autosave.\n * @param {Function} [options.__unstableFetch]  Internal use only. Function to\n *                                              call instead of `apiFetch()`.\n *                                              Must return a promise.\n */\nexport const saveEntityRecord = (\n\tkind,\n\tname,\n\trecord,\n\t{ isAutosave = false, __unstableFetch = apiFetch } = {}\n) => async ( { select, resolveSelect, dispatch } ) => {\n\tconst entities = await dispatch( getKindEntities( kind ) );\n\tconst entity = find( entities, { kind, name } );\n\tif ( ! entity || entity?.__experimentalNoFetch ) {\n\t\treturn;\n\t}\n\tconst entityIdKey = entity.key || DEFAULT_ENTITY_KEY;\n\tconst recordId = record[ entityIdKey ];\n\n\tconst lock = await dispatch.__unstableAcquireStoreLock(\n\t\tSTORE_NAME,\n\t\t[ 'entities', 'data', kind, name, recordId || uuid() ],\n\t\t{ exclusive: true }\n\t);\n\n\ttry {\n\t\t// Evaluate optimized edits.\n\t\t// (Function edits that should be evaluated on save to avoid expensive computations on every edit.)\n\t\tfor ( const [ key, value ] of Object.entries( record ) ) {\n\t\t\tif ( typeof value === 'function' ) {\n\t\t\t\tconst evaluatedValue = value(\n\t\t\t\t\tselect.getEditedEntityRecord( kind, name, recordId )\n\t\t\t\t);\n\t\t\t\tdispatch.editEntityRecord(\n\t\t\t\t\tkind,\n\t\t\t\t\tname,\n\t\t\t\t\trecordId,\n\t\t\t\t\t{\n\t\t\t\t\t\t[ key ]: evaluatedValue,\n\t\t\t\t\t},\n\t\t\t\t\t{ undoIgnore: true }\n\t\t\t\t);\n\t\t\t\trecord[ key ] = evaluatedValue;\n\t\t\t}\n\t\t}\n\n\t\tdispatch( {\n\t\t\ttype: 'SAVE_ENTITY_RECORD_START',\n\t\t\tkind,\n\t\t\tname,\n\t\t\trecordId,\n\t\t\tisAutosave,\n\t\t} );\n\t\tlet updatedRecord;\n\t\tlet error;\n\t\ttry {\n\t\t\tconst path = `${ entity.baseURL }${\n\t\t\t\trecordId ? '/' + recordId : ''\n\t\t\t}`;\n\t\t\tconst persistedRecord = select.getRawEntityRecord(\n\t\t\t\tkind,\n\t\t\t\tname,\n\t\t\t\trecordId\n\t\t\t);\n\n\t\t\tif ( isAutosave ) {\n\t\t\t\t// Most of this autosave logic is very specific to posts.\n\t\t\t\t// This is fine for now as it is the only supported autosave,\n\t\t\t\t// but ideally this should all be handled in the back end,\n\t\t\t\t// so the client just sends and receives objects.\n\t\t\t\tconst currentUser = select.getCurrentUser();\n\t\t\t\tconst currentUserId = currentUser ? currentUser.id : undefined;\n\t\t\t\tconst autosavePost = resolveSelect.getAutosave(\n\t\t\t\t\tpersistedRecord.type,\n\t\t\t\t\tpersistedRecord.id,\n\t\t\t\t\tcurrentUserId\n\t\t\t\t);\n\t\t\t\t// Autosaves need all expected fields to be present.\n\t\t\t\t// So we fallback to the previous autosave and then\n\t\t\t\t// to the actual persisted entity if the edits don't\n\t\t\t\t// have a value.\n\t\t\t\tlet data = { ...persistedRecord, ...autosavePost, ...record };\n\t\t\t\tdata = Object.keys( data ).reduce(\n\t\t\t\t\t( acc, key ) => {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t[ 'title', 'excerpt', 'content' ].includes( key )\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tacc[ key ] = data[ key ];\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn acc;\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tstatus:\n\t\t\t\t\t\t\tdata.status === 'auto-draft'\n\t\t\t\t\t\t\t\t? 'draft'\n\t\t\t\t\t\t\t\t: data.status,\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\tupdatedRecord = await __unstableFetch( {\n\t\t\t\t\tpath: `${ path }/autosaves`,\n\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\tdata,\n\t\t\t\t} );\n\n\t\t\t\t// An autosave may be processed by the server as a regular save\n\t\t\t\t// when its update is requested by the author and the post had\n\t\t\t\t// draft or auto-draft status.\n\t\t\t\tif ( persistedRecord.id === updatedRecord.id ) {\n\t\t\t\t\tlet newRecord = {\n\t\t\t\t\t\t...persistedRecord,\n\t\t\t\t\t\t...data,\n\t\t\t\t\t\t...updatedRecord,\n\t\t\t\t\t};\n\t\t\t\t\tnewRecord = Object.keys( newRecord ).reduce(\n\t\t\t\t\t\t( acc, key ) => {\n\t\t\t\t\t\t\t// These properties are persisted in autosaves.\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t[ 'title', 'excerpt', 'content' ].includes(\n\t\t\t\t\t\t\t\t\tkey\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tacc[ key ] = newRecord[ key ];\n\t\t\t\t\t\t\t} else if ( key === 'status' ) {\n\t\t\t\t\t\t\t\t// Status is only persisted in autosaves when going from\n\t\t\t\t\t\t\t\t// \"auto-draft\" to \"draft\".\n\t\t\t\t\t\t\t\tacc[ key ] =\n\t\t\t\t\t\t\t\t\tpersistedRecord.status === 'auto-draft' &&\n\t\t\t\t\t\t\t\t\tnewRecord.status === 'draft'\n\t\t\t\t\t\t\t\t\t\t? newRecord.status\n\t\t\t\t\t\t\t\t\t\t: persistedRecord.status;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// These properties are not persisted in autosaves.\n\t\t\t\t\t\t\t\tacc[ key ] = persistedRecord[ key ];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn acc;\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{}\n\t\t\t\t\t);\n\t\t\t\t\tdispatch.receiveEntityRecords(\n\t\t\t\t\t\tkind,\n\t\t\t\t\t\tname,\n\t\t\t\t\t\tnewRecord,\n\t\t\t\t\t\tundefined,\n\t\t\t\t\t\ttrue\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tdispatch.receiveAutosaves(\n\t\t\t\t\t\tpersistedRecord.id,\n\t\t\t\t\t\tupdatedRecord\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlet edits = record;\n\t\t\t\tif ( entity.__unstablePrePersist ) {\n\t\t\t\t\tedits = {\n\t\t\t\t\t\t...edits,\n\t\t\t\t\t\t...entity.__unstablePrePersist(\n\t\t\t\t\t\t\tpersistedRecord,\n\t\t\t\t\t\t\tedits\n\t\t\t\t\t\t),\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tupdatedRecord = await __unstableFetch( {\n\t\t\t\t\tpath,\n\t\t\t\t\tmethod: recordId ? 'PUT' : 'POST',\n\t\t\t\t\tdata: edits,\n\t\t\t\t} );\n\t\t\t\tdispatch.receiveEntityRecords(\n\t\t\t\t\tkind,\n\t\t\t\t\tname,\n\t\t\t\t\tupdatedRecord,\n\t\t\t\t\tundefined,\n\t\t\t\t\ttrue,\n\t\t\t\t\tedits\n\t\t\t\t);\n\t\t\t}\n\t\t} catch ( _error ) {\n\t\t\terror = _error;\n\t\t}\n\t\tdispatch( {\n\t\t\ttype: 'SAVE_ENTITY_RECORD_FINISH',\n\t\t\tkind,\n\t\t\tname,\n\t\t\trecordId,\n\t\t\terror,\n\t\t\tisAutosave,\n\t\t} );\n\n\t\treturn updatedRecord;\n\t} finally {\n\t\tdispatch.__unstableReleaseStoreLock( lock );\n\t}\n};\n\n/**\n * Runs multiple core-data actions at the same time using one API request.\n *\n * Example:\n *\n * ```\n * const [ savedRecord, updatedRecord, deletedRecord ] =\n *   await dispatch( 'core' ).__experimentalBatch( [\n *     ( { saveEntityRecord } ) => saveEntityRecord( 'root', 'widget', widget ),\n *     ( { saveEditedEntityRecord } ) => saveEntityRecord( 'root', 'widget', 123 ),\n *     ( { deleteEntityRecord } ) => deleteEntityRecord( 'root', 'widget', 123, null ),\n *   ] );\n * ```\n *\n * @param {Array} requests Array of functions which are invoked simultaneously.\n *                         Each function is passed an object containing\n *                         `saveEntityRecord`, `saveEditedEntityRecord`, and\n *                         `deleteEntityRecord`.\n *\n * @return {Promise} A promise that resolves to an array containing the return\n *                   values of each function given in `requests`.\n */\nexport const __experimentalBatch = ( requests ) => async ( { dispatch } ) => {\n\tconst batch = createBatch();\n\tconst api = {\n\t\tsaveEntityRecord( kind, name, record, options ) {\n\t\t\treturn batch.add( ( add ) =>\n\t\t\t\tdispatch.saveEntityRecord( kind, name, record, {\n\t\t\t\t\t...options,\n\t\t\t\t\t__unstableFetch: add,\n\t\t\t\t} )\n\t\t\t);\n\t\t},\n\t\tsaveEditedEntityRecord( kind, name, recordId, options ) {\n\t\t\treturn batch.add( ( add ) =>\n\t\t\t\tdispatch.saveEditedEntityRecord( kind, name, recordId, {\n\t\t\t\t\t...options,\n\t\t\t\t\t__unstableFetch: add,\n\t\t\t\t} )\n\t\t\t);\n\t\t},\n\t\tdeleteEntityRecord( kind, name, recordId, query, options ) {\n\t\t\treturn batch.add( ( add ) =>\n\t\t\t\tdispatch.deleteEntityRecord( kind, name, recordId, query, {\n\t\t\t\t\t...options,\n\t\t\t\t\t__unstableFetch: add,\n\t\t\t\t} )\n\t\t\t);\n\t\t},\n\t};\n\tconst resultPromises = requests.map( ( request ) => request( api ) );\n\tconst [ , ...results ] = await Promise.all( [\n\t\tbatch.run(),\n\t\t...resultPromises,\n\t] );\n\treturn results;\n};\n\n/**\n * Action triggered to save an entity record's edits.\n *\n * @param {string} kind     Kind of the entity.\n * @param {string} name     Name of the entity.\n * @param {Object} recordId ID of the record.\n * @param {Object} options  Saving options.\n */\nexport const saveEditedEntityRecord = (\n\tkind,\n\tname,\n\trecordId,\n\toptions\n) => async ( { select, dispatch } ) => {\n\tif ( ! select.hasEditsForEntityRecord( kind, name, recordId ) ) {\n\t\treturn;\n\t}\n\tconst edits = select.getEntityRecordNonTransientEdits(\n\t\tkind,\n\t\tname,\n\t\trecordId\n\t);\n\tconst record = { id: recordId, ...edits };\n\treturn await dispatch.saveEntityRecord( kind, name, record, options );\n};\n\n/**\n * Action triggered to save only specified properties for the entity.\n *\n * @param {string} kind        Kind of the entity.\n * @param {string} name        Name of the entity.\n * @param {Object} recordId    ID of the record.\n * @param {Array}  itemsToSave List of entity properties to save.\n * @param {Object} options     Saving options.\n */\nexport const __experimentalSaveSpecifiedEntityEdits = (\n\tkind,\n\tname,\n\trecordId,\n\titemsToSave,\n\toptions\n) => async ( { select, dispatch } ) => {\n\tif ( ! select.hasEditsForEntityRecord( kind, name, recordId ) ) {\n\t\treturn;\n\t}\n\tconst edits = select.getEntityRecordNonTransientEdits(\n\t\tkind,\n\t\tname,\n\t\trecordId\n\t);\n\tconst editsToSave = {};\n\tfor ( const edit in edits ) {\n\t\tif ( itemsToSave.some( ( item ) => item === edit ) ) {\n\t\t\teditsToSave[ edit ] = edits[ edit ];\n\t\t}\n\t}\n\treturn await dispatch.saveEntityRecord( kind, name, editsToSave, options );\n};\n\n/**\n * Returns an action object used in signalling that Upload permissions have been received.\n *\n * @param {boolean} hasUploadPermissions Does the user have permission to upload files?\n *\n * @return {Object} Action object.\n */\nexport function receiveUploadPermissions( hasUploadPermissions ) {\n\treturn {\n\t\ttype: 'RECEIVE_USER_PERMISSION',\n\t\tkey: 'create/media',\n\t\tisAllowed: hasUploadPermissions,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the current user has\n * permission to perform an action on a REST resource.\n *\n * @param {string}  key       A key that represents the action and REST resource.\n * @param {boolean} isAllowed Whether or not the user can perform the action.\n *\n * @return {Object} Action object.\n */\nexport function receiveUserPermission( key, isAllowed ) {\n\treturn {\n\t\ttype: 'RECEIVE_USER_PERMISSION',\n\t\tkey,\n\t\tisAllowed,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the autosaves for a\n * post have been received.\n *\n * @param {number}       postId    The id of the post that is parent to the autosave.\n * @param {Array|Object} autosaves An array of autosaves or singular autosave object.\n *\n * @return {Object} Action object.\n */\nexport function receiveAutosaves( postId, autosaves ) {\n\treturn {\n\t\ttype: 'RECEIVE_AUTOSAVES',\n\t\tpostId,\n\t\tautosaves: castArray( autosaves ),\n\t};\n}\n"]}
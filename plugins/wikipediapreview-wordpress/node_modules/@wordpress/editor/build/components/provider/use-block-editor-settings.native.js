"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _data = require("@wordpress/data");

var _coreData = require("@wordpress/core-data");

var _useBlockEditorSettings = _interopRequireDefault(require("./use-block-editor-settings.js"));

var _store = require("../../store");

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
function useNativeBlockEditorSettings(settings, hasTemplate) {
  var _settings$capabilitie;

  const capabilities = (_settings$capabilitie = settings.capabilities) !== null && _settings$capabilitie !== void 0 ? _settings$capabilitie : {};
  const editorSettings = (0, _useBlockEditorSettings.default)(settings, hasTemplate);
  const supportReusableBlock = capabilities.reusableBlock === true;
  const {
    reusableBlocks
  } = (0, _data.useSelect)(select => ({
    reusableBlocks: supportReusableBlock ? select(_coreData.store).getEntityRecords('postType', 'wp_block', // Unbounded queries are not supported on native so as a workaround, we set per_page with the maximum value that native version can handle.
    // Related issue: https://github.com/wordpress-mobile/gutenberg-mobile/issues/2661
    {
      per_page: 100
    }) : []
  }), [supportReusableBlock]);
  const {
    isTitleSelected
  } = (0, _data.useSelect)(select => ({
    isTitleSelected: select(_store.store).isPostTitleSelected()
  }));
  return (0, _element.useMemo)(() => ({ ...editorSettings,
    __experimentalReusableBlocks: reusableBlocks,
    __experimentalShouldInsertAtTheTop: isTitleSelected
  }), [editorSettings, reusableBlocks, isTitleSelected]);
}

var _default = useNativeBlockEditorSettings;
exports.default = _default;
//# sourceMappingURL=use-block-editor-settings.native.js.map
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _i18n = require("@wordpress/i18n");

var _components = require("@wordpress/components");

var _data = require("@wordpress/data");

var _keycodes = require("@wordpress/keycodes");

var _icons = require("@wordpress/icons");

var _store = require("../../store");

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
function EditorHistoryRedo(props, ref) {
  const hasRedo = (0, _data.useSelect)(select => select(_store.store).hasEditorRedo(), []);
  const {
    redo
  } = (0, _data.useDispatch)(_store.store);
  return (0, _element.createElement)(_components.Button, (0, _extends2.default)({}, props, {
    ref: ref,
    icon: !(0, _i18n.isRTL)() ? _icons.redo : _icons.undo
    /* translators: button label text should, if possible, be under 16 characters. */
    ,
    label: (0, _i18n.__)('Redo'),
    shortcut: _keycodes.displayShortcut.primaryShift('z') // If there are no redo levels we don't want to actually disable this
    // button, because it will remove focus for keyboard users.
    // See: https://github.com/WordPress/gutenberg/issues/3486
    ,
    "aria-disabled": !hasRedo,
    onClick: hasRedo ? redo : undefined,
    className: "editor-history__redo"
  }));
}

var _default = (0, _element.forwardRef)(EditorHistoryRedo);

exports.default = _default;
//# sourceMappingURL=redo.js.map
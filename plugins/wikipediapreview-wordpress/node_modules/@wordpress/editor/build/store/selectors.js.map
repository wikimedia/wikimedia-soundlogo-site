{"version":3,"sources":["@wordpress/editor/src/store/selectors.js"],"names":["EMPTY_OBJECT","EMPTY_ARRAY","hasEditorUndo","select","coreStore","hasUndo","hasEditorRedo","hasRedo","isEditedPostNew","state","getCurrentPost","status","hasChangedContent","edits","getPostEdits","isEditedPostDirty","postType","getCurrentPostType","postId","getCurrentPostId","hasEditsForEntityRecord","hasNonPostEntityChanges","dirtyEntityRecords","__experimentalGetDirtyEntityRecords","type","id","entityRecord","kind","name","key","isCleanNewPost","post","getRawEntityRecord","getCurrentPostRevisionsCount","getCurrentPostLastRevisionId","getEntityRecordEdits","getReferenceByDistinctEdits","since","alternative","getCurrentPostAttribute","attributeName","hasOwnProperty","getNestedEditedPostProperty","getEditedPostAttribute","getEditedPostContent","EDIT_MERGE_PROPERTIES","has","getAutosaveAttribute","AUTOSAVE_PROPERTIES","currentUserId","getCurrentUser","autosave","getAutosave","getEditedPostVisibility","password","isCurrentPostPending","isCurrentPostPublished","currentPost","indexOf","Date","Number","date","ONE_MINUTE_IN_MS","isCurrentPostScheduled","isEditedPostPublishable","isEditedPostSaveable","isSavingPost","isEditedPostEmpty","Platform","OS","blocks","getEditorBlocks","length","blockName","isEditedPostAutosaveable","isPostAutosavingLocked","hasFetchedAutosave","hasFetchedAutosaves","some","field","isEditedPostBeingScheduled","checkedDate","isEditedPostDateFloating","modified","isSavingEntityRecord","isSavingNonPostEntityChanges","entitiesBeingSaved","__experimentalGetEntitiesBeingSaved","didPostSaveRequestSucceed","getLastEntitySaveError","didPostSaveRequestFail","isAutosavingPost","saving","isPreviewingPost","getEditedPostPreviewLink","pending","previewLink","preview","featuredImageId","_thumbnail_id","getSuggestedPostFormat","provider","attributes","providerNameSlug","includes","record","getEditedEntityRecord","content","isPublishingPost","isPermalinkEditable","permalinkTemplate","PERMALINK_POSTNAME_REGEX","test","getPermalink","permalinkParts","getPermalinkParts","prefix","postName","suffix","getEditedPostSlug","split","isPostLocked","postLock","isLocked","isPostSavingLocked","Object","keys","postSavingLock","postAutosavingLock","isPostLockTakeover","isTakeover","getPostLockUser","user","getActivePostLock","activePostLock","canUserUseUnfilteredHTML","isPublishSidebarEnabled","preferences","PREFERENCES_DEFAULTS","getEditorSelectionStart","plugin","selectionStart","getEditorSelectionEnd","selectionEnd","getEditorSelection","__unstableIsEditorReady","isReady","getEditorSettings","editorSettings","getStateBeforeOptimisticTransaction","hint","inSomeHistory","getBlockEditorSelector","args","blockEditorStore","getBlockName","isBlockValid","getBlockAttributes","getBlock","getBlocks","getClientIdsOfDescendants","getClientIdsWithDescendants","getGlobalBlockCount","getBlocksByClientId","getBlockCount","getBlockSelectionStart","getBlockSelectionEnd","getSelectedBlockCount","hasSelectedBlock","getSelectedBlockClientId","getSelectedBlock","getBlockRootClientId","getBlockHierarchyRootClientId","getAdjacentBlockClientId","getPreviousBlockClientId","getNextBlockClientId","getSelectedBlocksInitialCaretPosition","getMultiSelectedBlockClientIds","getMultiSelectedBlocks","getFirstMultiSelectedBlockClientId","getLastMultiSelectedBlockClientId","isFirstMultiSelectedBlock","isBlockMultiSelected","isAncestorMultiSelected","getMultiSelectedBlocksStartClientId","getMultiSelectedBlocksEndClientId","getBlockOrder","getBlockIndex","isBlockSelected","hasSelectedInnerBlock","isBlockWithinSelection","hasMultiSelection","isMultiSelecting","isSelectionEnabled","getBlockMode","isTyping","isCaretWithinFormattedText","getBlockInsertionPoint","isBlockInsertionPointVisible","isValidTemplate","getTemplate","getTemplateLock","canInsertBlockType","getInserterItems","hasInserterItems","getBlockListSettings","__experimentalGetDefaultTemplateTypes","defaultTemplateTypes","__experimentalGetDefaultTemplatePartAreas","areas","defaultTemplatePartAreas","map","item","icon","__experimentalGetDefaultTemplateType","slug","__experimentalGetTemplateInfo","template","excerpt","title","area","defaultTitle","description","defaultDescription","templateTitle","rendered","templateDescription","raw","templateIcon","find","layout","getPostTypeLabel","currentPostType","getPostType","labels","singular_name"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;AACA;;AAKA;;AAKA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAKA;;AACA;;AAMA;;AACA;;AACA;;AAnCA;AACA;AACA;;AAIA;AACA;AACA;;AAeA;AACA;AACA;;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,YAAY,GAAG,EAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,WAAW,GAAG,EAApB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,MAAMC,aAAa,GAAG,kCAA0BC,MAAF,IAAc,MAAM;AACxE,SAAOA,MAAM,CAAEC,eAAF,CAAN,CAAoBC,OAApB,EAAP;AACA,CAF4B,CAAtB;AAIP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,MAAMC,aAAa,GAAG,kCAA0BH,MAAF,IAAc,MAAM;AACxE,SAAOA,MAAM,CAAEC,eAAF,CAAN,CAAoBG,OAApB,EAAP;AACA,CAF4B,CAAtB;AAIP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACO,SAASC,eAAT,CAA0BC,KAA1B,EAAkC;AACxC,SAAOC,cAAc,CAAED,KAAF,CAAd,CAAwBE,MAAxB,KAAmC,YAA1C;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASC,iBAAT,CAA4BH,KAA5B,EAAoC;AAC1C,QAAMI,KAAK,GAAGC,YAAY,CAAEL,KAAF,CAA1B;AAEA,SACC,YAAYI,KAAZ,IACA;AACA;AACA;AACA;AACA;AACA,eAAaA,KAPd;AASA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,MAAME,iBAAiB,GAAG,kCAC9BZ,MAAF,IAAgBM,KAAF,IAAa;AAC1B;AACA;AACA;AACA,QAAMO,QAAQ,GAAGC,kBAAkB,CAAER,KAAF,CAAnC;AACA,QAAMS,MAAM,GAAGC,gBAAgB,CAAEV,KAAF,CAA/B;;AACA,MACCN,MAAM,CAAEC,eAAF,CAAN,CAAoBgB,uBAApB,CACC,UADD,EAECJ,QAFD,EAGCE,MAHD,CADD,EAME;AACD,WAAO,IAAP;AACA;;AACD,SAAO,KAAP;AACA,CAjB+B,CAA1B;AAoBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,MAAMG,uBAAuB,GAAG,kCACpClB,MAAF,IAAgBM,KAAF,IAAa;AAC1B,QAAMa,kBAAkB,GAAGnB,MAAM,CAChCC,eADgC,CAAN,CAEzBmB,mCAFyB,EAA3B;;AAGA,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAef,cAAc,CAAED,KAAF,CAAnC;AACA,SAAO,kBACNa,kBADM,EAEJI,YAAF,IACCA,YAAY,CAACC,IAAb,KAAsB,UAAtB,IACAD,YAAY,CAACE,IAAb,KAAsBJ,IADtB,IAEAE,YAAY,CAACG,GAAb,KAAqBJ,EALhB,CAAP;AAOA,CAbqC,CAAhC;AAgBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACO,SAASK,cAAT,CAAyBrB,KAAzB,EAAiC;AACvC,SAAO,CAAEM,iBAAiB,CAAEN,KAAF,CAAnB,IAAgCD,eAAe,CAAEC,KAAF,CAAtD;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,MAAMC,cAAc,GAAG,kCAC3BP,MAAF,IAAgBM,KAAF,IAAa;AAC1B,QAAMS,MAAM,GAAGC,gBAAgB,CAAEV,KAAF,CAA/B;AACA,QAAMO,QAAQ,GAAGC,kBAAkB,CAAER,KAAF,CAAnC;AAEA,QAAMsB,IAAI,GAAG5B,MAAM,CAAEC,eAAF,CAAN,CAAoB4B,kBAApB,CACZ,UADY,EAEZhB,QAFY,EAGZE,MAHY,CAAb;;AAKA,MAAKa,IAAL,EAAY;AACX,WAAOA,IAAP;AACA,GAXyB,CAa1B;AACA;AACA;;;AACA,SAAO/B,YAAP;AACA,CAlB4B,CAAvB;AAqBP;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACO,SAASiB,kBAAT,CAA6BR,KAA7B,EAAqC;AAC3C,SAAOA,KAAK,CAACO,QAAb;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASG,gBAAT,CAA2BV,KAA3B,EAAmC;AACzC,SAAOA,KAAK,CAACS,MAAb;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASe,4BAAT,CAAuCxB,KAAvC,EAA+C;AACrD,SAAO,iBACNC,cAAc,CAAED,KAAF,CADR,EAEN,CAAE,QAAF,EAAY,iBAAZ,EAA+B,CAA/B,EAAkC,OAAlC,CAFM,EAGN,CAHM,CAAP;AAKA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASyB,4BAAT,CAAuCzB,KAAvC,EAA+C;AACrD,SAAO,iBACNC,cAAc,CAAED,KAAF,CADR,EAEN,CAAE,QAAF,EAAY,qBAAZ,EAAmC,CAAnC,EAAsC,IAAtC,CAFM,EAGN,IAHM,CAAP;AAKA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,MAAMK,YAAY,GAAG,kCAA0BX,MAAF,IAAgBM,KAAF,IAAa;AAC9E,QAAMO,QAAQ,GAAGC,kBAAkB,CAAER,KAAF,CAAnC;AACA,QAAMS,MAAM,GAAGC,gBAAgB,CAAEV,KAAF,CAA/B;AACA,SACCN,MAAM,CAAEC,eAAF,CAAN,CAAoB+B,oBAApB,CACC,UADD,EAECnB,QAFD,EAGCE,MAHD,KAIKlB,YALN;AAOA,CAV2B,CAArB;AAYP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,MAAMoC,2BAA2B,GAAG,kCACxCjC,MAAF,IAAc;AAAC;AAAgB;AAC9B,2BACC,+DADD,EAEC;AACCkC,IAAAA,KAAK,EAAE,KADR;AAECC,IAAAA,WAAW,EACV;AAHF,GAFD;AASA,SAAOnC,MAAM,CAAEC,eAAF,CAAN,CAAoBgC,2BAApB,EAAP;AACA,CAZyC,CAApC;AAeP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACO,SAASG,uBAAT,CAAkC9B,KAAlC,EAAyC+B,aAAzC,EAAyD;AAC/D,UAASA,aAAT;AACC,SAAK,MAAL;AACC,aAAOvB,kBAAkB,CAAER,KAAF,CAAzB;;AAED,SAAK,IAAL;AACC,aAAOU,gBAAgB,CAAEV,KAAF,CAAvB;;AAED;AACC,YAAMsB,IAAI,GAAGrB,cAAc,CAAED,KAAF,CAA3B;;AACA,UAAK,CAAEsB,IAAI,CAACU,cAAL,CAAqBD,aAArB,CAAP,EAA8C;AAC7C;AACA;;AAED,aAAO,8BAAiBT,IAAI,CAAES,aAAF,CAArB,CAAP;AAbF;AAeA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAME,2BAA2B,GAAG,CAAEjC,KAAF,EAAS+B,aAAT,KAA4B;AAC/D,QAAM3B,KAAK,GAAGC,YAAY,CAAEL,KAAF,CAA1B;;AACA,MAAK,CAAEI,KAAK,CAAC4B,cAAN,CAAsBD,aAAtB,CAAP,EAA+C;AAC9C,WAAOD,uBAAuB,CAAE9B,KAAF,EAAS+B,aAAT,CAA9B;AACA;;AAED,SAAO,EACN,GAAGD,uBAAuB,CAAE9B,KAAF,EAAS+B,aAAT,CADpB;AAEN,OAAG3B,KAAK,CAAE2B,aAAF;AAFF,GAAP;AAIA,CAVD;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASG,sBAAT,CAAiClC,KAAjC,EAAwC+B,aAAxC,EAAwD;AAC9D;AACA,UAASA,aAAT;AACC,SAAK,SAAL;AACC,aAAOI,oBAAoB,CAAEnC,KAAF,CAA3B;AAFF,GAF8D,CAO9D;;;AACA,QAAMI,KAAK,GAAGC,YAAY,CAAEL,KAAF,CAA1B;;AACA,MAAK,CAAEI,KAAK,CAAC4B,cAAN,CAAsBD,aAAtB,CAAP,EAA+C;AAC9C,WAAOD,uBAAuB,CAAE9B,KAAF,EAAS+B,aAAT,CAA9B;AACA,GAX6D,CAa9D;AACA;;;AACA,MAAKK,iCAAsBC,GAAtB,CAA2BN,aAA3B,CAAL,EAAkD;AACjD,WAAOE,2BAA2B,CAAEjC,KAAF,EAAS+B,aAAT,CAAlC;AACA;;AAED,SAAO3B,KAAK,CAAE2B,aAAF,CAAZ;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,MAAMO,oBAAoB,GAAG,kCACjC5C,MAAF,IAAc,CAAEM,KAAF,EAAS+B,aAAT,KAA4B;AACzC,MACC,CAAE,sBAAUQ,8BAAV,EAA+BR,aAA/B,CAAF,IACAA,aAAa,KAAK,cAFnB,EAGE;AACD;AACA;;AAED,QAAMxB,QAAQ,GAAGC,kBAAkB,CAAER,KAAF,CAAnC;AACA,QAAMS,MAAM,GAAGC,gBAAgB,CAAEV,KAAF,CAA/B;AACA,QAAMwC,aAAa,GAAG,iBAAK9C,MAAM,CAAEC,eAAF,CAAN,CAAoB8C,cAApB,EAAL,EAA2C,CAChE,IADgE,CAA3C,CAAtB;AAGA,QAAMC,QAAQ,GAAGhD,MAAM,CAAEC,eAAF,CAAN,CAAoBgD,WAApB,CAChBpC,QADgB,EAEhBE,MAFgB,EAGhB+B,aAHgB,CAAjB;;AAMA,MAAKE,QAAL,EAAgB;AACf,WAAO,8BAAiBA,QAAQ,CAAEX,aAAF,CAAzB,CAAP;AACA;AACD,CAvBkC,CAA7B;AA0BP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACO,SAASa,uBAAT,CAAkC5C,KAAlC,EAA0C;AAChD,QAAME,MAAM,GAAGgC,sBAAsB,CAAElC,KAAF,EAAS,QAAT,CAArC;;AACA,MAAKE,MAAM,KAAK,SAAhB,EAA4B;AAC3B,WAAO,SAAP;AACA;;AAED,QAAM2C,QAAQ,GAAGX,sBAAsB,CAAElC,KAAF,EAAS,UAAT,CAAvC;;AACA,MAAK6C,QAAL,EAAgB;AACf,WAAO,UAAP;AACA;;AAED,SAAO,QAAP;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASC,oBAAT,CAA+B9C,KAA/B,EAAuC;AAC7C,SAAOC,cAAc,CAAED,KAAF,CAAd,CAAwBE,MAAxB,KAAmC,SAA1C;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAAS6C,sBAAT,CAAiC/C,KAAjC,EAAwCgD,WAAxC,EAAsD;AAC5D,QAAM1B,IAAI,GAAG0B,WAAW,IAAI/C,cAAc,CAAED,KAAF,CAA1C;AAEA,SACC,CAAE,SAAF,EAAa,SAAb,EAAyBiD,OAAzB,CAAkC3B,IAAI,CAACpB,MAAvC,MAAoD,CAAC,CAArD,IACEoB,IAAI,CAACpB,MAAL,KAAgB,QAAhB,IACD,CAAE,yBACD,IAAIgD,IAAJ,CAAUC,MAAM,CAAE,mBAAS7B,IAAI,CAAC8B,IAAd,CAAF,CAAN,GAAiCC,2BAA3C,CADC,CAHJ;AAOA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASC,sBAAT,CAAiCtD,KAAjC,EAAyC;AAC/C,SACCC,cAAc,CAAED,KAAF,CAAd,CAAwBE,MAAxB,KAAmC,QAAnC,IACA,CAAE6C,sBAAsB,CAAE/C,KAAF,CAFzB;AAIA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASuD,uBAAT,CAAkCvD,KAAlC,EAA0C;AAChD,QAAMsB,IAAI,GAAGrB,cAAc,CAAED,KAAF,CAA3B,CADgD,CAGhD;AACA;AACA;AACA;;AAEA,SACCM,iBAAiB,CAAEN,KAAF,CAAjB,IACA,CAAE,SAAF,EAAa,SAAb,EAAwB,QAAxB,EAAmCiD,OAAnC,CAA4C3B,IAAI,CAACpB,MAAjD,MAA8D,CAAC,CAFhE;AAIA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASsD,oBAAT,CAA+BxD,KAA/B,EAAuC;AAC7C,MAAKyD,YAAY,CAAEzD,KAAF,CAAjB,EAA6B;AAC5B,WAAO,KAAP;AACA,GAH4C,CAK7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SACC,CAAC,CAAEkC,sBAAsB,CAAElC,KAAF,EAAS,OAAT,CAAzB,IACA,CAAC,CAAEkC,sBAAsB,CAAElC,KAAF,EAAS,SAAT,CADzB,IAEA,CAAE0D,iBAAiB,CAAE1D,KAAF,CAFnB,IAGA2D,kBAASC,EAAT,KAAgB,QAJjB;AAMA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASF,iBAAT,CAA4B1D,KAA5B,EAAoC;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,QAAM6D,MAAM,GAAGC,eAAe,CAAE9D,KAAF,CAA9B;;AAEA,MAAK6D,MAAM,CAACE,MAAZ,EAAqB;AACpB;AACA;AACA;AACA,QAAKF,MAAM,CAACE,MAAP,GAAgB,CAArB,EAAyB;AACxB,aAAO,KAAP;AACA,KANmB,CAQpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,UAAMC,SAAS,GAAGH,MAAM,CAAE,CAAF,CAAN,CAAY1C,IAA9B;;AACA,QACC6C,SAAS,KAAK,kCAAd,IACAA,SAAS,KAAK,4CAFf,EAGE;AACD,aAAO,KAAP;AACA;AACD;;AAED,SAAO,CAAE7B,oBAAoB,CAAEnC,KAAF,CAA7B;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,MAAMiE,wBAAwB,GAAG,kCACrCvE,MAAF,IAAgBM,KAAF,IAAa;AAC1B;AACA,MAAK,CAAEwD,oBAAoB,CAAExD,KAAF,CAA3B,EAAuC;AACtC,WAAO,KAAP;AACA,GAJyB,CAM1B;;;AACA,MAAKkE,sBAAsB,CAAElE,KAAF,CAA3B,EAAuC;AACtC,WAAO,KAAP;AACA;;AAED,QAAMO,QAAQ,GAAGC,kBAAkB,CAAER,KAAF,CAAnC;AACA,QAAMS,MAAM,GAAGC,gBAAgB,CAAEV,KAAF,CAA/B;AACA,QAAMmE,kBAAkB,GAAGzE,MAAM,CAAEC,eAAF,CAAN,CAAoByE,mBAApB,CAC1B7D,QAD0B,EAE1BE,MAF0B,CAA3B;AAIA,QAAM+B,aAAa,GAAG,iBAAK9C,MAAM,CAAEC,eAAF,CAAN,CAAoB8C,cAApB,EAAL,EAA2C,CAChE,IADgE,CAA3C,CAAtB,CAjB0B,CAqB1B;AACA;AACA;AACA;;AACA,QAAMC,QAAQ,GAAGhD,MAAM,CAAEC,eAAF,CAAN,CAAoBgD,WAApB,CAChBpC,QADgB,EAEhBE,MAFgB,EAGhB+B,aAHgB,CAAjB,CAzB0B,CA+B1B;AACA;;AACA,MAAK,CAAE2B,kBAAP,EAA4B;AAC3B,WAAO,KAAP;AACA,GAnCyB,CAqC1B;;;AACA,MAAK,CAAEzB,QAAP,EAAkB;AACjB,WAAO,IAAP;AACA,GAxCyB,CA0C1B;AACA;AACA;AACA;;;AACA,MAAKvC,iBAAiB,CAAEH,KAAF,CAAtB,EAAkC;AACjC,WAAO,IAAP;AACA,GAhDyB,CAkD1B;;;AACA,SAAO,CAAE,OAAF,EAAW,SAAX,EAAuBqE,IAAvB,CACJC,KAAF,IACC,8BAAiB5B,QAAQ,CAAE4B,KAAF,CAAzB,MACApC,sBAAsB,CAAElC,KAAF,EAASsE,KAAT,CAHjB,CAAP;AAKA,CAzDsC,CAAjC;AA4DP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACO,SAASC,0BAAT,CAAqCvE,KAArC,EAA6C;AACnD,QAAMoD,IAAI,GAAGlB,sBAAsB,CAAElC,KAAF,EAAS,MAAT,CAAnC,CADmD,CAEnD;;AACA,QAAMwE,WAAW,GAAG,IAAItB,IAAJ,CACnBC,MAAM,CAAE,mBAASC,IAAT,CAAF,CAAN,GAA4BC,2BADT,CAApB;AAIA,SAAO,yBAAemB,WAAf,CAAP;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASC,wBAAT,CAAmCzE,KAAnC,EAA2C;AACjD,QAAMoD,IAAI,GAAGlB,sBAAsB,CAAElC,KAAF,EAAS,MAAT,CAAnC;AACA,QAAM0E,QAAQ,GAAGxC,sBAAsB,CAAElC,KAAF,EAAS,UAAT,CAAvC,CAFiD,CAIjD;AACA;AACA;AACA;;AACA,QAAME,MAAM,GAAGD,cAAc,CAAED,KAAF,CAAd,CAAwBE,MAAvC;;AACA,MACCA,MAAM,KAAK,OAAX,IACAA,MAAM,KAAK,YADX,IAEAA,MAAM,KAAK,SAHZ,EAIE;AACD,WAAOkD,IAAI,KAAKsB,QAAT,IAAqBtB,IAAI,KAAK,IAArC;AACA;;AACD,SAAO,KAAP;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,MAAMK,YAAY,GAAG,kCAA0B/D,MAAF,IAAgBM,KAAF,IAAa;AAC9E,QAAMO,QAAQ,GAAGC,kBAAkB,CAAER,KAAF,CAAnC;AACA,QAAMS,MAAM,GAAGC,gBAAgB,CAAEV,KAAF,CAA/B;AACA,SAAON,MAAM,CAAEC,eAAF,CAAN,CAAoBgF,oBAApB,CACN,UADM,EAENpE,QAFM,EAGNE,MAHM,CAAP;AAKA,CAR2B,CAArB;AAUP;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,MAAMmE,4BAA4B,GAAG,kCACzClF,MAAF,IAAgBM,KAAF,IAAa;AAC1B,QAAM6E,kBAAkB,GAAGnF,MAAM,CAChCC,eADgC,CAAN,CAEzBmF,mCAFyB,EAA3B;;AAGA,QAAM;AAAE/D,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAef,cAAc,CAAED,KAAF,CAAnC;AACA,SAAO,kBACN6E,kBADM,EAEJ5D,YAAF,IACCA,YAAY,CAACC,IAAb,KAAsB,UAAtB,IACAD,YAAY,CAACE,IAAb,KAAsBJ,IADtB,IAEAE,YAAY,CAACG,GAAb,KAAqBJ,EALhB,CAAP;AAOA,CAb0C,CAArC;AAgBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,MAAM+D,yBAAyB,GAAG,kCACtCrF,MAAF,IAAgBM,KAAF,IAAa;AAC1B,QAAMO,QAAQ,GAAGC,kBAAkB,CAAER,KAAF,CAAnC;AACA,QAAMS,MAAM,GAAGC,gBAAgB,CAAEV,KAAF,CAA/B;AACA,SAAO,CAAEN,MAAM,CAAEC,eAAF,CAAN,CAAoBqF,sBAApB,CACR,UADQ,EAERzE,QAFQ,EAGRE,MAHQ,CAAT;AAKA,CATuC,CAAlC;AAYP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,MAAMwE,sBAAsB,GAAG,kCACnCvF,MAAF,IAAgBM,KAAF,IAAa;AAC1B,QAAMO,QAAQ,GAAGC,kBAAkB,CAAER,KAAF,CAAnC;AACA,QAAMS,MAAM,GAAGC,gBAAgB,CAAEV,KAAF,CAA/B;AACA,SAAO,CAAC,CAAEN,MAAM,CAAEC,eAAF,CAAN,CAAoBqF,sBAApB,CACT,UADS,EAETzE,QAFS,EAGTE,MAHS,CAAV;AAKA,CAToC,CAA/B;AAYP;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACO,SAASyE,gBAAT,CAA2BlF,KAA3B,EAAmC;AACzC,MAAK,CAAEyD,YAAY,CAAEzD,KAAF,CAAnB,EAA+B;AAC9B,WAAO,KAAP;AACA;;AACD,SAAO,CAAC,CAAE,iBAAKA,KAAK,CAACmF,MAAX,EAAmB,CAAE,SAAF,EAAa,YAAb,CAAnB,CAAV;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASC,gBAAT,CAA2BpF,KAA3B,EAAmC;AACzC,MAAK,CAAEyD,YAAY,CAAEzD,KAAF,CAAnB,EAA+B;AAC9B,WAAO,KAAP;AACA;;AACD,SAAO,CAAC,CAAE,iBAAKA,KAAK,CAACmF,MAAX,EAAmB,CAAE,SAAF,EAAa,WAAb,CAAnB,CAAV;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASE,wBAAT,CAAmCrF,KAAnC,EAA2C;AACjD,MAAKA,KAAK,CAACmF,MAAN,CAAaG,OAAb,IAAwB7B,YAAY,CAAEzD,KAAF,CAAzC,EAAqD;AACpD;AACA;;AAED,MAAIuF,WAAW,GAAGjD,oBAAoB,CAAEtC,KAAF,EAAS,cAAT,CAAtC;;AACA,MAAK,CAAEuF,WAAP,EAAqB;AACpBA,IAAAA,WAAW,GAAGrD,sBAAsB,CAAElC,KAAF,EAAS,MAAT,CAApC;;AACA,QAAKuF,WAAL,EAAmB;AAClBA,MAAAA,WAAW,GAAG,uBAAcA,WAAd,EAA2B;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAA3B,CAAd;AACA;AACD;;AACD,QAAMC,eAAe,GAAGvD,sBAAsB,CAAElC,KAAF,EAAS,gBAAT,CAA9C;;AAEA,MAAKuF,WAAW,IAAIE,eAApB,EAAsC;AACrC,WAAO,uBAAcF,WAAd,EAA2B;AAAEG,MAAAA,aAAa,EAAED;AAAjB,KAA3B,CAAP;AACA;;AAED,SAAOF,WAAP;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASI,sBAAT,CAAiC3F,KAAjC,EAAyC;AAC/C,QAAM6D,MAAM,GAAGC,eAAe,CAAE9D,KAAF,CAA9B;AAEA,MAAK6D,MAAM,CAACE,MAAP,GAAgB,CAArB,EAAyB,OAAO,IAAP;AAEzB,MAAI5C,IAAJ,CAL+C,CAM/C;AACA;;AACA,MAAK0C,MAAM,CAACE,MAAP,KAAkB,CAAvB,EAA2B;AAC1B5C,IAAAA,IAAI,GAAG0C,MAAM,CAAE,CAAF,CAAN,CAAY1C,IAAnB,CAD0B,CAE1B;;AACA,QAAKA,IAAI,KAAK,YAAd,EAA6B;AAAA;;AAC5B,YAAMyE,QAAQ,2BAAG/B,MAAM,CAAE,CAAF,CAAN,CAAYgC,UAAf,yDAAG,qBAAwBC,gBAAzC;;AACA,UAAK,CAAE,SAAF,EAAa,OAAb,EAAuBC,QAAvB,CAAiCH,QAAjC,CAAL,EAAmD;AAClDzE,QAAAA,IAAI,GAAG,YAAP;AACA,OAFD,MAEO,IAAK,CAAE,SAAF,EAAa,YAAb,EAA4B4E,QAA5B,CAAsCH,QAAtC,CAAL,EAAwD;AAC9DzE,QAAAA,IAAI,GAAG,YAAP;AACA;AACD;AACD,GAnB8C,CAqB/C;AACA;;;AACA,MAAK0C,MAAM,CAACE,MAAP,KAAkB,CAAlB,IAAuBF,MAAM,CAAE,CAAF,CAAN,CAAY1C,IAAZ,KAAqB,gBAAjD,EAAoE;AACnEA,IAAAA,IAAI,GAAG0C,MAAM,CAAE,CAAF,CAAN,CAAY1C,IAAnB;AACA,GAzB8C,CA2B/C;;;AACA,UAASA,IAAT;AACC,SAAK,YAAL;AACC,aAAO,OAAP;;AACD,SAAK,YAAL;AACA,SAAK,gBAAL;AACC,aAAO,OAAP;;AACD,SAAK,cAAL;AACC,aAAO,SAAP;;AACD,SAAK,YAAL;AACC,aAAO,OAAP;;AACD,SAAK,YAAL;AACC,aAAO,OAAP;;AACD;AACC,aAAO,IAAP;AAbF;AAeA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,MAAMgB,oBAAoB,GAAG,kCACjCzC,MAAF,IAAgBM,KAAF,IAAa;AAC1B,QAAMS,MAAM,GAAGC,gBAAgB,CAAEV,KAAF,CAA/B;AACA,QAAMO,QAAQ,GAAGC,kBAAkB,CAAER,KAAF,CAAnC;AACA,QAAMgG,MAAM,GAAGtG,MAAM,CAAEC,eAAF,CAAN,CAAoBsG,qBAApB,CACd,UADc,EAEd1F,QAFc,EAGdE,MAHc,CAAf;;AAKA,MAAKuF,MAAL,EAAc;AACb,QAAK,OAAOA,MAAM,CAACE,OAAd,KAA0B,UAA/B,EAA4C;AAC3C,aAAOF,MAAM,CAACE,OAAP,CAAgBF,MAAhB,CAAP;AACA,KAFD,MAEO,IAAKA,MAAM,CAACnC,MAAZ,EAAqB;AAC3B,aAAO,yCAA6BmC,MAAM,CAACnC,MAApC,CAAP;AACA,KAFM,MAEA,IAAKmC,MAAM,CAACE,OAAZ,EAAsB;AAC5B,aAAOF,MAAM,CAACE,OAAd;AACA;AACD;;AACD,SAAO,EAAP;AACA,CAnBkC,CAA7B;AAsBP;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACO,SAASC,gBAAT,CAA2BnG,KAA3B,EAAmC;AACzC,SACCyD,YAAY,CAAEzD,KAAF,CAAZ,IACA,CAAE+C,sBAAsB,CAAE/C,KAAF,CADxB,IAEAkC,sBAAsB,CAAElC,KAAF,EAAS,QAAT,CAAtB,KAA8C,SAH/C;AAKA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASoG,mBAAT,CAA8BpG,KAA9B,EAAsC;AAC5C,QAAMqG,iBAAiB,GAAGnE,sBAAsB,CAC/ClC,KAD+C,EAE/C,oBAF+C,CAAhD;AAKA,SAAOsG,oCAAyBC,IAAzB,CAA+BF,iBAA/B,CAAP;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASG,YAAT,CAAuBxG,KAAvB,EAA+B;AACrC,QAAMyG,cAAc,GAAGC,iBAAiB,CAAE1G,KAAF,CAAxC;;AACA,MAAK,CAAEyG,cAAP,EAAwB;AACvB,WAAO,IAAP;AACA;;AAED,QAAM;AAAEE,IAAAA,MAAF;AAAUC,IAAAA,QAAV;AAAoBC,IAAAA;AAApB,MAA+BJ,cAArC;;AAEA,MAAKL,mBAAmB,CAAEpG,KAAF,CAAxB,EAAoC;AACnC,WAAO2G,MAAM,GAAGC,QAAT,GAAoBC,MAA3B;AACA;;AAED,SAAOF,MAAP;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASG,iBAAT,CAA4B9G,KAA5B,EAAoC;AAC1C,SACCkC,sBAAsB,CAAElC,KAAF,EAAS,MAAT,CAAtB,IACA,wBAAckC,sBAAsB,CAAElC,KAAF,EAAS,OAAT,CAApC,CADA,IAEAU,gBAAgB,CAAEV,KAAF,CAHjB;AAKA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAAS0G,iBAAT,CAA4B1G,KAA5B,EAAoC;AAC1C,QAAMqG,iBAAiB,GAAGnE,sBAAsB,CAC/ClC,KAD+C,EAE/C,oBAF+C,CAAhD;;AAIA,MAAK,CAAEqG,iBAAP,EAA2B;AAC1B,WAAO,IAAP;AACA;;AAED,QAAMO,QAAQ,GACb1E,sBAAsB,CAAElC,KAAF,EAAS,MAAT,CAAtB,IACAkC,sBAAsB,CAAElC,KAAF,EAAS,gBAAT,CAFvB;AAIA,QAAM,CAAE2G,MAAF,EAAUE,MAAV,IAAqBR,iBAAiB,CAACU,KAAlB,CAC1BT,mCAD0B,CAA3B;AAIA,SAAO;AACNK,IAAAA,MADM;AAENC,IAAAA,QAFM;AAGNC,IAAAA;AAHM,GAAP;AAKA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASG,YAAT,CAAuBhH,KAAvB,EAA+B;AACrC,SAAOA,KAAK,CAACiH,QAAN,CAAeC,QAAtB;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASC,kBAAT,CAA6BnH,KAA7B,EAAqC;AAC3C,SAAOoH,MAAM,CAACC,IAAP,CAAarH,KAAK,CAACsH,cAAnB,EAAoCvD,MAApC,GAA6C,CAApD;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASG,sBAAT,CAAiClE,KAAjC,EAAyC;AAC/C,SAAOoH,MAAM,CAACC,IAAP,CAAarH,KAAK,CAACuH,kBAAnB,EAAwCxD,MAAxC,GAAiD,CAAxD;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASyD,kBAAT,CAA6BxH,KAA7B,EAAqC;AAC3C,SAAOA,KAAK,CAACiH,QAAN,CAAeQ,UAAtB;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASC,eAAT,CAA0B1H,KAA1B,EAAkC;AACxC,SAAOA,KAAK,CAACiH,QAAN,CAAeU,IAAtB;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASC,iBAAT,CAA4B5H,KAA5B,EAAoC;AAC1C,SAAOA,KAAK,CAACiH,QAAN,CAAeY,cAAtB;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASC,wBAAT,CAAmC9H,KAAnC,EAA2C;AACjD,SAAO,iBAAKC,cAAc,CAAED,KAAF,CAAnB,EAA8B,CACpC,QADoC,EAEpC,2BAFoC,CAA9B,CAAP;AAIA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAAS+H,uBAAT,CAAkC/H,KAAlC,EAA0C;AAChD,MAAKA,KAAK,CAACgI,WAAN,CAAkBhG,cAAlB,CAAkC,yBAAlC,CAAL,EAAqE;AACpE,WAAOhC,KAAK,CAACgI,WAAN,CAAkBD,uBAAzB;AACA;;AACD,SAAOE,+BAAqBF,uBAA5B;AACA;AAED;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASjE,eAAT,CAA0B9D,KAA1B,EAAkC;AACxC,SAAOkC,sBAAsB,CAAElC,KAAF,EAAS,QAAT,CAAtB,IAA6CR,WAApD;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAAS0I,uBAAT,CAAkClI,KAAlC,EAA0C;AAAA;;AAChD,2BAAY,+CAAZ,EAA6D;AAC5D4B,IAAAA,KAAK,EAAE,MADqD;AAE5DuG,IAAAA,MAAM,EAAE,WAFoD;AAG5DtG,IAAAA,WAAW,EAAE;AAH+C,GAA7D;AAKA,kCAAOK,sBAAsB,CAAElC,KAAF,EAAS,WAAT,CAA7B,0DAAO,sBAA8CoI,cAArD;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASC,qBAAT,CAAgCrI,KAAhC,EAAwC;AAAA;;AAC9C,2BAAY,+CAAZ,EAA6D;AAC5D4B,IAAAA,KAAK,EAAE,MADqD;AAE5DuG,IAAAA,MAAM,EAAE,WAFoD;AAG5DtG,IAAAA,WAAW,EAAE;AAH+C,GAA7D;AAKA,mCAAOK,sBAAsB,CAAElC,KAAF,EAAS,WAAT,CAA7B,2DAAO,uBAA8CsI,YAArD;AACA;AAED;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASC,kBAAT,CAA6BvI,KAA7B,EAAqC;AAC3C,SAAOkC,sBAAsB,CAAElC,KAAF,EAAS,WAAT,CAA7B;AACA;AAED;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASwI,uBAAT,CAAkCxI,KAAlC,EAA0C;AAChD,SAAOA,KAAK,CAACyI,OAAb;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASC,iBAAT,CAA4B1I,KAA5B,EAAoC;AAC1C,SAAOA,KAAK,CAAC2I,cAAb;AACA;AAED;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASC,mCAAT,GAA+C;AACrD,2BAAY,2DAAZ,EAAyE;AACxEhH,IAAAA,KAAK,EAAE,KADiE;AAExEiH,IAAAA,IAAI,EAAE;AAFkE,GAAzE;AAKA,SAAO,IAAP;AACA;AACD;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASC,aAAT,GAAyB;AAC/B,2BAAY,qCAAZ,EAAmD;AAClDlH,IAAAA,KAAK,EAAE,KAD2C;AAElDiH,IAAAA,IAAI,EAAE;AAF4C,GAAnD;AAIA,SAAO,KAAP;AACA;;AAED,SAASE,sBAAT,CAAiC5H,IAAjC,EAAwC;AACvC,SAAO,kCAA0BzB,MAAF,IAAc,CAAEM,KAAF,EAAS,GAAGgJ,IAAZ,KAAsB;AAClE,6BAAY,sCAAsC7H,IAAtC,GAA6C,GAAzD,EAA8D;AAC7DS,MAAAA,KAAK,EAAE,KADsD;AAE7DC,MAAAA,WAAW,EAAE,4CAA4CV,IAA5C,GAAmD;AAFH,KAA9D;AAKA,WAAOzB,MAAM,CAAEuJ,kBAAF,CAAN,CAA4B9H,IAA5B,EAAoC,GAAG6H,IAAvC,CAAP;AACA,GAPM,CAAP;AAQA;AAED;AACA;AACA;;;AACO,MAAME,YAAY,GAAGH,sBAAsB,CAAE,cAAF,CAA3C;AAEP;AACA;AACA;;;AACO,MAAMI,YAAY,GAAGJ,sBAAsB,CAAE,cAAF,CAA3C;AAEP;AACA;AACA;;;AACO,MAAMK,kBAAkB,GAAGL,sBAAsB,CACvD,oBADuD,CAAjD;AAIP;AACA;AACA;;;AACO,MAAMM,QAAQ,GAAGN,sBAAsB,CAAE,UAAF,CAAvC;AAEP;AACA;AACA;;;AACO,MAAMO,SAAS,GAAGP,sBAAsB,CAAE,WAAF,CAAxC;AAEP;AACA;AACA;;;AACO,MAAMQ,yBAAyB,GAAGR,sBAAsB,CAC9D,2BAD8D,CAAxD;AAIP;AACA;AACA;;;AACO,MAAMS,2BAA2B,GAAGT,sBAAsB,CAChE,6BADgE,CAA1D;AAIP;AACA;AACA;;;AACO,MAAMU,mBAAmB,GAAGV,sBAAsB,CACxD,qBADwD,CAAlD;AAIP;AACA;AACA;;;AACO,MAAMW,mBAAmB,GAAGX,sBAAsB,CACxD,qBADwD,CAAlD;AAIP;AACA;AACA;;;AACO,MAAMY,aAAa,GAAGZ,sBAAsB,CAAE,eAAF,CAA5C;AAEP;AACA;AACA;;;AACO,MAAMa,sBAAsB,GAAGb,sBAAsB,CAC3D,wBAD2D,CAArD;AAIP;AACA;AACA;;;AACO,MAAMc,oBAAoB,GAAGd,sBAAsB,CACzD,sBADyD,CAAnD;AAIP;AACA;AACA;;;AACO,MAAMe,qBAAqB,GAAGf,sBAAsB,CAC1D,uBAD0D,CAApD;AAIP;AACA;AACA;;;AACO,MAAMgB,gBAAgB,GAAGhB,sBAAsB,CAAE,kBAAF,CAA/C;AAEP;AACA;AACA;;;AACO,MAAMiB,wBAAwB,GAAGjB,sBAAsB,CAC7D,0BAD6D,CAAvD;AAIP;AACA;AACA;;;AACO,MAAMkB,gBAAgB,GAAGlB,sBAAsB,CAAE,kBAAF,CAA/C;AAEP;AACA;AACA;;;AACO,MAAMmB,oBAAoB,GAAGnB,sBAAsB,CACzD,sBADyD,CAAnD;AAIP;AACA;AACA;;;AACO,MAAMoB,6BAA6B,GAAGpB,sBAAsB,CAClE,+BADkE,CAA5D;AAIP;AACA;AACA;;;AACO,MAAMqB,wBAAwB,GAAGrB,sBAAsB,CAC7D,0BAD6D,CAAvD;AAIP;AACA;AACA;;;AACO,MAAMsB,wBAAwB,GAAGtB,sBAAsB,CAC7D,0BAD6D,CAAvD;AAIP;AACA;AACA;;;AACO,MAAMuB,oBAAoB,GAAGvB,sBAAsB,CACzD,sBADyD,CAAnD;AAIP;AACA;AACA;;;AACO,MAAMwB,qCAAqC,GAAGxB,sBAAsB,CAC1E,uCAD0E,CAApE;AAIP;AACA;AACA;;;AACO,MAAMyB,8BAA8B,GAAGzB,sBAAsB,CACnE,gCADmE,CAA7D;AAIP;AACA;AACA;;;AACO,MAAM0B,sBAAsB,GAAG1B,sBAAsB,CAC3D,wBAD2D,CAArD;AAIP;AACA;AACA;;;AACO,MAAM2B,kCAAkC,GAAG3B,sBAAsB,CACvE,oCADuE,CAAjE;AAIP;AACA;AACA;;;AACO,MAAM4B,iCAAiC,GAAG5B,sBAAsB,CACtE,mCADsE,CAAhE;AAIP;AACA;AACA;;;AACO,MAAM6B,yBAAyB,GAAG7B,sBAAsB,CAC9D,2BAD8D,CAAxD;AAIP;AACA;AACA;;;AACO,MAAM8B,oBAAoB,GAAG9B,sBAAsB,CACzD,sBADyD,CAAnD;AAIP;AACA;AACA;;;AACO,MAAM+B,uBAAuB,GAAG/B,sBAAsB,CAC5D,yBAD4D,CAAtD;AAIP;AACA;AACA;;;AACO,MAAMgC,mCAAmC,GAAGhC,sBAAsB,CACxE,qCADwE,CAAlE;AAIP;AACA;AACA;;;AACO,MAAMiC,iCAAiC,GAAGjC,sBAAsB,CACtE,mCADsE,CAAhE;AAIP;AACA;AACA;;;AACO,MAAMkC,aAAa,GAAGlC,sBAAsB,CAAE,eAAF,CAA5C;AAEP;AACA;AACA;;;AACO,MAAMmC,aAAa,GAAGnC,sBAAsB,CAAE,eAAF,CAA5C;AAEP;AACA;AACA;;;AACO,MAAMoC,eAAe,GAAGpC,sBAAsB,CAAE,iBAAF,CAA9C;AAEP;AACA;AACA;;;AACO,MAAMqC,qBAAqB,GAAGrC,sBAAsB,CAC1D,uBAD0D,CAApD;AAIP;AACA;AACA;;;AACO,MAAMsC,sBAAsB,GAAGtC,sBAAsB,CAC3D,wBAD2D,CAArD;AAIP;AACA;AACA;;;AACO,MAAMuC,iBAAiB,GAAGvC,sBAAsB,CAAE,mBAAF,CAAhD;AAEP;AACA;AACA;;;AACO,MAAMwC,gBAAgB,GAAGxC,sBAAsB,CAAE,kBAAF,CAA/C;AAEP;AACA;AACA;;;AACO,MAAMyC,kBAAkB,GAAGzC,sBAAsB,CACvD,oBADuD,CAAjD;AAIP;AACA;AACA;;;AACO,MAAM0C,YAAY,GAAG1C,sBAAsB,CAAE,cAAF,CAA3C;AAEP;AACA;AACA;;;AACO,MAAM2C,QAAQ,GAAG3C,sBAAsB,CAAE,UAAF,CAAvC;AAEP;AACA;AACA;;;AACO,MAAM4C,0BAA0B,GAAG5C,sBAAsB,CAC/D,4BAD+D,CAAzD;AAIP;AACA;AACA;;;AACO,MAAM6C,sBAAsB,GAAG7C,sBAAsB,CAC3D,wBAD2D,CAArD;AAIP;AACA;AACA;;;AACO,MAAM8C,4BAA4B,GAAG9C,sBAAsB,CACjE,8BADiE,CAA3D;AAIP;AACA;AACA;;;AACO,MAAM+C,eAAe,GAAG/C,sBAAsB,CAAE,iBAAF,CAA9C;AAEP;AACA;AACA;;;AACO,MAAMgD,WAAW,GAAGhD,sBAAsB,CAAE,aAAF,CAA1C;AAEP;AACA;AACA;;;AACO,MAAMiD,eAAe,GAAGjD,sBAAsB,CAAE,iBAAF,CAA9C;AAEP;AACA;AACA;;;AACO,MAAMkD,kBAAkB,GAAGlD,sBAAsB,CACvD,oBADuD,CAAjD;AAIP;AACA;AACA;;;AACO,MAAMmD,gBAAgB,GAAGnD,sBAAsB,CAAE,kBAAF,CAA/C;AAEP;AACA;AACA;;;AACO,MAAMoD,gBAAgB,GAAGpD,sBAAsB,CAAE,kBAAF,CAA/C;AAEP;AACA;AACA;;;AACO,MAAMqD,oBAAoB,GAAGrD,sBAAsB,CACzD,sBADyD,CAAnD;AAIP;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACO,SAASsD,qCAAT,CAAgDrM,KAAhD,EAAwD;AAAA;;AAC9D,+BAAO0I,iBAAiB,CAAE1I,KAAF,CAAxB,uDAAO,mBAA4BsM,oBAAnC;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,MAAMC,yCAAyC,GAAG,qBACtDvM,KAAF,IAAa;AAAA;;AACZ,QAAMwM,KAAK,GACV,wBAAA9D,iBAAiB,CAAE1I,KAAF,CAAjB,4EAA4ByM,wBAA5B,KAAwD,EADzD;AAEA,SAAOD,KAAP,aAAOA,KAAP,uBAAOA,KAAK,CAAEE,GAAP,CAAcC,IAAF,IAAY;AAC9B,WAAO,EAAE,GAAGA,IAAL;AAAWC,MAAAA,IAAI,EAAE,8CAAqBD,IAAI,CAACC,IAA1B;AAAjB,KAAP;AACA,GAFM,CAAP;AAGA,CAPuD,EAQtD5M,KAAF;AAAA;;AAAA,SAAa,wBAAE0I,iBAAiB,CAAE1I,KAAF,CAAnB,wDAAE,oBAA4ByM,wBAA9B,CAAb;AAAA,CARwD,CAAlD;AAWP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACO,MAAMI,oCAAoC,GAAG,qBACnD,CAAE7M,KAAF,EAAS8M,IAAT,KACC,kBAAMT,qCAAqC,CAAErM,KAAF,CAA3C,EAAsD;AAAE8M,EAAAA;AAAF,CAAtD,KAAoE,EAFlB,EAGnD,CAAE9M,KAAF,EAAS8M,IAAT,KAAmB,CAAET,qCAAqC,CAAErM,KAAF,CAAvC,EAAkD8M,IAAlD,CAHgC,CAA7C;AAMP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACO,SAASC,6BAAT,CAAwC/M,KAAxC,EAA+CgN,QAA/C,EAA0D;AAAA;;AAChE,MAAK,CAAEA,QAAP,EAAkB;AACjB,WAAO,EAAP;AACA;;AAED,QAAM;AAAEC,IAAAA,OAAF;AAAWH,IAAAA,IAAX;AAAiBI,IAAAA,KAAjB;AAAwBC,IAAAA;AAAxB,MAAiCH,QAAvC;;AACA,QAAM;AACLE,IAAAA,KAAK,EAAEE,YADF;AAELC,IAAAA,WAAW,EAAEC;AAFR,MAGFT,oCAAoC,CAAE7M,KAAF,EAAS8M,IAAT,CAHxC;;AAKA,QAAMS,aAAa,GAAG,sBAAUL,KAAV,IAAoBA,KAApB,GAA4BA,KAA5B,aAA4BA,KAA5B,uBAA4BA,KAAK,CAAEM,QAAzD;AACA,QAAMC,mBAAmB,GAAG,sBAAUR,OAAV,IAAsBA,OAAtB,GAAgCA,OAAhC,aAAgCA,OAAhC,uBAAgCA,OAAO,CAAES,GAArE;AACA,QAAMC,YAAY,GACjB,yBAAApB,yCAAyC,CAAEvM,KAAF,CAAzC,CAAmD4N,IAAnD,CACGjB,IAAF,IAAYQ,IAAI,KAAKR,IAAI,CAACQ,IAD3B,+EAEGP,IAFH,KAEWiB,aAHZ;AAKA,SAAO;AACNX,IAAAA,KAAK,EACJK,aAAa,IAAIA,aAAa,KAAKT,IAAnC,GACGS,aADH,GAEGH,YAAY,IAAIN,IAJd;AAKNO,IAAAA,WAAW,EAAEI,mBAAmB,IAAIH,kBAL9B;AAMNV,IAAAA,IAAI,EAAEe;AANA,GAAP;AAQA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,MAAMG,gBAAgB,GAAG,kCAC7BpO,MAAF,IAAgBM,KAAF,IAAa;AAAA;;AAC1B,QAAM+N,eAAe,GAAGvN,kBAAkB,CAAER,KAAF,CAA1C;AACA,QAAMO,QAAQ,GAAGb,MAAM,CAAEC,eAAF,CAAN,CAAoBqO,WAApB,CAAiCD,eAAjC,CAAjB,CAF0B,CAG1B;AACA;;AACA,SAAOxN,QAAP,aAAOA,QAAP,2CAAOA,QAAQ,CAAE0N,MAAjB,qDAAO,iBAAkBC,aAAzB;AACA,CAP8B,CAAzB","sourcesContent":["/**\n * External dependencies\n */\nimport { find, get, has, isString, includes, some } from 'lodash';\nimport createSelector from 'rememo';\n\n/**\n * WordPress dependencies\n */\nimport {\n\tgetFreeformContentHandlerName,\n\tgetDefaultBlockName,\n\t__unstableSerializeAndClean,\n} from '@wordpress/blocks';\nimport { isInTheFuture, getDate } from '@wordpress/date';\nimport { addQueryArgs } from '@wordpress/url';\nimport { createRegistrySelector } from '@wordpress/data';\nimport deprecated from '@wordpress/deprecated';\nimport { Platform } from '@wordpress/element';\nimport { layout } from '@wordpress/icons';\nimport { store as blockEditorStore } from '@wordpress/block-editor';\nimport { store as coreStore } from '@wordpress/core-data';\n\n/**\n * Internal dependencies\n */\nimport { PREFERENCES_DEFAULTS } from './defaults';\nimport {\n\tEDIT_MERGE_PROPERTIES,\n\tPERMALINK_POSTNAME_REGEX,\n\tONE_MINUTE_IN_MS,\n\tAUTOSAVE_PROPERTIES,\n} from './constants';\nimport { getPostRawValue } from './reducer';\nimport { cleanForSlug } from '../utils/url';\nimport { getTemplatePartIcon } from '../utils/get-template-part-icon';\n\n/**\n * Shared reference to an empty object for cases where it is important to avoid\n * returning a new object reference on every invocation, as in a connected or\n * other pure component which performs `shouldComponentUpdate` check on props.\n * This should be used as a last resort, since the normalized data should be\n * maintained by the reducer result in state.\n */\nconst EMPTY_OBJECT = {};\n\n/**\n * Shared reference to an empty array for cases where it is important to avoid\n * returning a new array reference on every invocation, as in a connected or\n * other pure component which performs `shouldComponentUpdate` check on props.\n * This should be used as a last resort, since the normalized data should be\n * maintained by the reducer result in state.\n */\nconst EMPTY_ARRAY = [];\n\n/**\n * Returns true if any past editor history snapshots exist, or false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether undo history exists.\n */\nexport const hasEditorUndo = createRegistrySelector( ( select ) => () => {\n\treturn select( coreStore ).hasUndo();\n} );\n\n/**\n * Returns true if any future editor history snapshots exist, or false\n * otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether redo history exists.\n */\nexport const hasEditorRedo = createRegistrySelector( ( select ) => () => {\n\treturn select( coreStore ).hasRedo();\n} );\n\n/**\n * Returns true if the currently edited post is yet to be saved, or false if\n * the post has been saved.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the post is new.\n */\nexport function isEditedPostNew( state ) {\n\treturn getCurrentPost( state ).status === 'auto-draft';\n}\n\n/**\n * Returns true if content includes unsaved changes, or false otherwise.\n *\n * @param {Object} state Editor state.\n *\n * @return {boolean} Whether content includes unsaved changes.\n */\nexport function hasChangedContent( state ) {\n\tconst edits = getPostEdits( state );\n\n\treturn (\n\t\t'blocks' in edits ||\n\t\t// `edits` is intended to contain only values which are different from\n\t\t// the saved post, so the mere presence of a property is an indicator\n\t\t// that the value is different than what is known to be saved. While\n\t\t// content in Visual mode is represented by the blocks state, in Text\n\t\t// mode it is tracked by `edits.content`.\n\t\t'content' in edits\n\t);\n}\n\n/**\n * Returns true if there are unsaved values for the current edit session, or\n * false if the editing state matches the saved or new post.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether unsaved values exist.\n */\nexport const isEditedPostDirty = createRegistrySelector(\n\t( select ) => ( state ) => {\n\t\t// Edits should contain only fields which differ from the saved post (reset\n\t\t// at initial load and save complete). Thus, a non-empty edits state can be\n\t\t// inferred to contain unsaved values.\n\t\tconst postType = getCurrentPostType( state );\n\t\tconst postId = getCurrentPostId( state );\n\t\tif (\n\t\t\tselect( coreStore ).hasEditsForEntityRecord(\n\t\t\t\t'postType',\n\t\t\t\tpostType,\n\t\t\t\tpostId\n\t\t\t)\n\t\t) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n);\n\n/**\n * Returns true if there are unsaved edits for entities other than\n * the editor's post, and false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether there are edits or not.\n */\nexport const hasNonPostEntityChanges = createRegistrySelector(\n\t( select ) => ( state ) => {\n\t\tconst dirtyEntityRecords = select(\n\t\t\tcoreStore\n\t\t).__experimentalGetDirtyEntityRecords();\n\t\tconst { type, id } = getCurrentPost( state );\n\t\treturn some(\n\t\t\tdirtyEntityRecords,\n\t\t\t( entityRecord ) =>\n\t\t\t\tentityRecord.kind !== 'postType' ||\n\t\t\t\tentityRecord.name !== type ||\n\t\t\t\tentityRecord.key !== id\n\t\t);\n\t}\n);\n\n/**\n * Returns true if there are no unsaved values for the current edit session and\n * if the currently edited post is new (has never been saved before).\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether new post and unsaved values exist.\n */\nexport function isCleanNewPost( state ) {\n\treturn ! isEditedPostDirty( state ) && isEditedPostNew( state );\n}\n\n/**\n * Returns the post currently being edited in its last known saved state, not\n * including unsaved edits. Returns an object containing relevant default post\n * values if the post has not yet been saved.\n *\n * @param {Object} state Global application state.\n *\n * @return {Object} Post object.\n */\nexport const getCurrentPost = createRegistrySelector(\n\t( select ) => ( state ) => {\n\t\tconst postId = getCurrentPostId( state );\n\t\tconst postType = getCurrentPostType( state );\n\n\t\tconst post = select( coreStore ).getRawEntityRecord(\n\t\t\t'postType',\n\t\t\tpostType,\n\t\t\tpostId\n\t\t);\n\t\tif ( post ) {\n\t\t\treturn post;\n\t\t}\n\n\t\t// This exists for compatibility with the previous selector behavior\n\t\t// which would guarantee an object return based on the editor reducer's\n\t\t// default empty object state.\n\t\treturn EMPTY_OBJECT;\n\t}\n);\n\n/**\n * Returns the post type of the post currently being edited.\n *\n * @param {Object} state Global application state.\n *\n * @return {string} Post type.\n */\nexport function getCurrentPostType( state ) {\n\treturn state.postType;\n}\n\n/**\n * Returns the ID of the post currently being edited, or null if the post has\n * not yet been saved.\n *\n * @param {Object} state Global application state.\n *\n * @return {?number} ID of current post.\n */\nexport function getCurrentPostId( state ) {\n\treturn state.postId;\n}\n\n/**\n * Returns the number of revisions of the post currently being edited.\n *\n * @param {Object} state Global application state.\n *\n * @return {number} Number of revisions.\n */\nexport function getCurrentPostRevisionsCount( state ) {\n\treturn get(\n\t\tgetCurrentPost( state ),\n\t\t[ '_links', 'version-history', 0, 'count' ],\n\t\t0\n\t);\n}\n\n/**\n * Returns the last revision ID of the post currently being edited,\n * or null if the post has no revisions.\n *\n * @param {Object} state Global application state.\n *\n * @return {?number} ID of the last revision.\n */\nexport function getCurrentPostLastRevisionId( state ) {\n\treturn get(\n\t\tgetCurrentPost( state ),\n\t\t[ '_links', 'predecessor-version', 0, 'id' ],\n\t\tnull\n\t);\n}\n\n/**\n * Returns any post values which have been changed in the editor but not yet\n * been saved.\n *\n * @param {Object} state Global application state.\n *\n * @return {Object} Object of key value pairs comprising unsaved edits.\n */\nexport const getPostEdits = createRegistrySelector( ( select ) => ( state ) => {\n\tconst postType = getCurrentPostType( state );\n\tconst postId = getCurrentPostId( state );\n\treturn (\n\t\tselect( coreStore ).getEntityRecordEdits(\n\t\t\t'postType',\n\t\t\tpostType,\n\t\t\tpostId\n\t\t) || EMPTY_OBJECT\n\t);\n} );\n\n/**\n * Returns a new reference when edited values have changed. This is useful in\n * inferring where an edit has been made between states by comparison of the\n * return values using strict equality.\n *\n * @deprecated since Gutenberg 6.5.0.\n *\n * @example\n *\n * ```\n * const hasEditOccurred = (\n *    getReferenceByDistinctEdits( beforeState ) !==\n *    getReferenceByDistinctEdits( afterState )\n * );\n * ```\n *\n * @param {Object} state Editor state.\n *\n * @return {*} A value whose reference will change only when an edit occurs.\n */\nexport const getReferenceByDistinctEdits = createRegistrySelector(\n\t( select ) => (/* state */) => {\n\t\tdeprecated(\n\t\t\t\"`wp.data.select( 'core/editor' ).getReferenceByDistinctEdits`\",\n\t\t\t{\n\t\t\t\tsince: '5.4',\n\t\t\t\talternative:\n\t\t\t\t\t\"`wp.data.select( 'core' ).getReferenceByDistinctEdits`\",\n\t\t\t}\n\t\t);\n\n\t\treturn select( coreStore ).getReferenceByDistinctEdits();\n\t}\n);\n\n/**\n * Returns an attribute value of the saved post.\n *\n * @param {Object} state         Global application state.\n * @param {string} attributeName Post attribute name.\n *\n * @return {*} Post attribute value.\n */\nexport function getCurrentPostAttribute( state, attributeName ) {\n\tswitch ( attributeName ) {\n\t\tcase 'type':\n\t\t\treturn getCurrentPostType( state );\n\n\t\tcase 'id':\n\t\t\treturn getCurrentPostId( state );\n\n\t\tdefault:\n\t\t\tconst post = getCurrentPost( state );\n\t\t\tif ( ! post.hasOwnProperty( attributeName ) ) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\treturn getPostRawValue( post[ attributeName ] );\n\t}\n}\n\n/**\n * Returns a single attribute of the post being edited, preferring the unsaved\n * edit if one exists, but merging with the attribute value for the last known\n * saved state of the post (this is needed for some nested attributes like meta).\n *\n * @param {Object} state         Global application state.\n * @param {string} attributeName Post attribute name.\n *\n * @return {*} Post attribute value.\n */\nconst getNestedEditedPostProperty = ( state, attributeName ) => {\n\tconst edits = getPostEdits( state );\n\tif ( ! edits.hasOwnProperty( attributeName ) ) {\n\t\treturn getCurrentPostAttribute( state, attributeName );\n\t}\n\n\treturn {\n\t\t...getCurrentPostAttribute( state, attributeName ),\n\t\t...edits[ attributeName ],\n\t};\n};\n\n/**\n * Returns a single attribute of the post being edited, preferring the unsaved\n * edit if one exists, but falling back to the attribute for the last known\n * saved state of the post.\n *\n * @param {Object} state         Global application state.\n * @param {string} attributeName Post attribute name.\n *\n * @return {*} Post attribute value.\n */\nexport function getEditedPostAttribute( state, attributeName ) {\n\t// Special cases\n\tswitch ( attributeName ) {\n\t\tcase 'content':\n\t\t\treturn getEditedPostContent( state );\n\t}\n\n\t// Fall back to saved post value if not edited.\n\tconst edits = getPostEdits( state );\n\tif ( ! edits.hasOwnProperty( attributeName ) ) {\n\t\treturn getCurrentPostAttribute( state, attributeName );\n\t}\n\n\t// Merge properties are objects which contain only the patch edit in state,\n\t// and thus must be merged with the current post attribute.\n\tif ( EDIT_MERGE_PROPERTIES.has( attributeName ) ) {\n\t\treturn getNestedEditedPostProperty( state, attributeName );\n\t}\n\n\treturn edits[ attributeName ];\n}\n\n/**\n * Returns an attribute value of the current autosave revision for a post, or\n * null if there is no autosave for the post.\n *\n * @deprecated since 5.6. Callers should use the `getAutosave( postType, postId, userId )` selector\n * \t\t\t   from the '@wordpress/core-data' package and access properties on the returned\n * \t\t\t   autosave object using getPostRawValue.\n *\n * @param {Object} state         Global application state.\n * @param {string} attributeName Autosave attribute name.\n *\n * @return {*} Autosave attribute value.\n */\nexport const getAutosaveAttribute = createRegistrySelector(\n\t( select ) => ( state, attributeName ) => {\n\t\tif (\n\t\t\t! includes( AUTOSAVE_PROPERTIES, attributeName ) &&\n\t\t\tattributeName !== 'preview_link'\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst postType = getCurrentPostType( state );\n\t\tconst postId = getCurrentPostId( state );\n\t\tconst currentUserId = get( select( coreStore ).getCurrentUser(), [\n\t\t\t'id',\n\t\t] );\n\t\tconst autosave = select( coreStore ).getAutosave(\n\t\t\tpostType,\n\t\t\tpostId,\n\t\t\tcurrentUserId\n\t\t);\n\n\t\tif ( autosave ) {\n\t\t\treturn getPostRawValue( autosave[ attributeName ] );\n\t\t}\n\t}\n);\n\n/**\n * Returns the current visibility of the post being edited, preferring the\n * unsaved value if different than the saved post. The return value is one of\n * \"private\", \"password\", or \"public\".\n *\n * @param {Object} state Global application state.\n *\n * @return {string} Post visibility.\n */\nexport function getEditedPostVisibility( state ) {\n\tconst status = getEditedPostAttribute( state, 'status' );\n\tif ( status === 'private' ) {\n\t\treturn 'private';\n\t}\n\n\tconst password = getEditedPostAttribute( state, 'password' );\n\tif ( password ) {\n\t\treturn 'password';\n\t}\n\n\treturn 'public';\n}\n\n/**\n * Returns true if post is pending review.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether current post is pending review.\n */\nexport function isCurrentPostPending( state ) {\n\treturn getCurrentPost( state ).status === 'pending';\n}\n\n/**\n * Return true if the current post has already been published.\n *\n * @param {Object}  state       Global application state.\n * @param {Object?} currentPost Explicit current post for bypassing registry selector.\n *\n * @return {boolean} Whether the post has been published.\n */\nexport function isCurrentPostPublished( state, currentPost ) {\n\tconst post = currentPost || getCurrentPost( state );\n\n\treturn (\n\t\t[ 'publish', 'private' ].indexOf( post.status ) !== -1 ||\n\t\t( post.status === 'future' &&\n\t\t\t! isInTheFuture(\n\t\t\t\tnew Date( Number( getDate( post.date ) ) - ONE_MINUTE_IN_MS )\n\t\t\t) )\n\t);\n}\n\n/**\n * Returns true if post is already scheduled.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether current post is scheduled to be posted.\n */\nexport function isCurrentPostScheduled( state ) {\n\treturn (\n\t\tgetCurrentPost( state ).status === 'future' &&\n\t\t! isCurrentPostPublished( state )\n\t);\n}\n\n/**\n * Return true if the post being edited can be published.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the post can been published.\n */\nexport function isEditedPostPublishable( state ) {\n\tconst post = getCurrentPost( state );\n\n\t// TODO: Post being publishable should be superset of condition of post\n\t// being saveable. Currently this restriction is imposed at UI.\n\t//\n\t//  See: <PostPublishButton /> (`isButtonEnabled` assigned by `isSaveable`)\n\n\treturn (\n\t\tisEditedPostDirty( state ) ||\n\t\t[ 'publish', 'private', 'future' ].indexOf( post.status ) === -1\n\t);\n}\n\n/**\n * Returns true if the post can be saved, or false otherwise. A post must\n * contain a title, an excerpt, or non-empty content to be valid for save.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the post can be saved.\n */\nexport function isEditedPostSaveable( state ) {\n\tif ( isSavingPost( state ) ) {\n\t\treturn false;\n\t}\n\n\t// TODO: Post should not be saveable if not dirty. Cannot be added here at\n\t// this time since posts where meta boxes are present can be saved even if\n\t// the post is not dirty. Currently this restriction is imposed at UI, but\n\t// should be moved here.\n\t//\n\t//  See: `isEditedPostPublishable` (includes `isEditedPostDirty` condition)\n\t//  See: <PostSavedState /> (`forceIsDirty` prop)\n\t//  See: <PostPublishButton /> (`forceIsDirty` prop)\n\t//  See: https://github.com/WordPress/gutenberg/pull/4184\n\n\treturn (\n\t\t!! getEditedPostAttribute( state, 'title' ) ||\n\t\t!! getEditedPostAttribute( state, 'excerpt' ) ||\n\t\t! isEditedPostEmpty( state ) ||\n\t\tPlatform.OS === 'native'\n\t);\n}\n\n/**\n * Returns true if the edited post has content. A post has content if it has at\n * least one saveable block or otherwise has a non-empty content property\n * assigned.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether post has content.\n */\nexport function isEditedPostEmpty( state ) {\n\t// While the condition of truthy content string is sufficient to determine\n\t// emptiness, testing saveable blocks length is a trivial operation. Since\n\t// this function can be called frequently, optimize for the fast case as a\n\t// condition of the mere existence of blocks. Note that the value of edited\n\t// content takes precedent over block content, and must fall through to the\n\t// default logic.\n\tconst blocks = getEditorBlocks( state );\n\n\tif ( blocks.length ) {\n\t\t// Pierce the abstraction of the serializer in knowing that blocks are\n\t\t// joined with with newlines such that even if every individual block\n\t\t// produces an empty save result, the serialized content is non-empty.\n\t\tif ( blocks.length > 1 ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// There are two conditions under which the optimization cannot be\n\t\t// assumed, and a fallthrough to getEditedPostContent must occur:\n\t\t//\n\t\t// 1. getBlocksForSerialization has special treatment in omitting a\n\t\t//    single unmodified default block.\n\t\t// 2. Comment delimiters are omitted for a freeform or unregistered\n\t\t//    block in its serialization. The freeform block specifically may\n\t\t//    produce an empty string in its saved output.\n\t\t//\n\t\t// For all other content, the single block is assumed to make a post\n\t\t// non-empty, if only by virtue of its own comment delimiters.\n\t\tconst blockName = blocks[ 0 ].name;\n\t\tif (\n\t\t\tblockName !== getDefaultBlockName() &&\n\t\t\tblockName !== getFreeformContentHandlerName()\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn ! getEditedPostContent( state );\n}\n\n/**\n * Returns true if the post can be autosaved, or false otherwise.\n *\n * @param {Object} state    Global application state.\n * @param {Object} autosave A raw autosave object from the REST API.\n *\n * @return {boolean} Whether the post can be autosaved.\n */\nexport const isEditedPostAutosaveable = createRegistrySelector(\n\t( select ) => ( state ) => {\n\t\t// A post must contain a title, an excerpt, or non-empty content to be valid for autosaving.\n\t\tif ( ! isEditedPostSaveable( state ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// A post is not autosavable when there is a post autosave lock.\n\t\tif ( isPostAutosavingLocked( state ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst postType = getCurrentPostType( state );\n\t\tconst postId = getCurrentPostId( state );\n\t\tconst hasFetchedAutosave = select( coreStore ).hasFetchedAutosaves(\n\t\t\tpostType,\n\t\t\tpostId\n\t\t);\n\t\tconst currentUserId = get( select( coreStore ).getCurrentUser(), [\n\t\t\t'id',\n\t\t] );\n\n\t\t// Disable reason - this line causes the side-effect of fetching the autosave\n\t\t// via a resolver, moving below the return would result in the autosave never\n\t\t// being fetched.\n\t\t// eslint-disable-next-line @wordpress/no-unused-vars-before-return\n\t\tconst autosave = select( coreStore ).getAutosave(\n\t\t\tpostType,\n\t\t\tpostId,\n\t\t\tcurrentUserId\n\t\t);\n\n\t\t// If any existing autosaves have not yet been fetched, this function is\n\t\t// unable to determine if the post is autosaveable, so return false.\n\t\tif ( ! hasFetchedAutosave ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// If we don't already have an autosave, the post is autosaveable.\n\t\tif ( ! autosave ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// To avoid an expensive content serialization, use the content dirtiness\n\t\t// flag in place of content field comparison against the known autosave.\n\t\t// This is not strictly accurate, and relies on a tolerance toward autosave\n\t\t// request failures for unnecessary saves.\n\t\tif ( hasChangedContent( state ) ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// If the title or excerpt has changed, the post is autosaveable.\n\t\treturn [ 'title', 'excerpt' ].some(\n\t\t\t( field ) =>\n\t\t\t\tgetPostRawValue( autosave[ field ] ) !==\n\t\t\t\tgetEditedPostAttribute( state, field )\n\t\t);\n\t}\n);\n\n/**\n * Return true if the post being edited is being scheduled. Preferring the\n * unsaved status values.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the post has been published.\n */\nexport function isEditedPostBeingScheduled( state ) {\n\tconst date = getEditedPostAttribute( state, 'date' );\n\t// Offset the date by one minute (network latency)\n\tconst checkedDate = new Date(\n\t\tNumber( getDate( date ) ) - ONE_MINUTE_IN_MS\n\t);\n\n\treturn isInTheFuture( checkedDate );\n}\n\n/**\n * Returns whether the current post should be considered to have a \"floating\"\n * date (i.e. that it would publish \"Immediately\" rather than at a set time).\n *\n * Unlike in the PHP backend, the REST API returns a full date string for posts\n * where the 0000-00-00T00:00:00 placeholder is present in the database. To\n * infer that a post is set to publish \"Immediately\" we check whether the date\n * and modified date are the same.\n *\n * @param {Object} state Editor state.\n *\n * @return {boolean} Whether the edited post has a floating date value.\n */\nexport function isEditedPostDateFloating( state ) {\n\tconst date = getEditedPostAttribute( state, 'date' );\n\tconst modified = getEditedPostAttribute( state, 'modified' );\n\n\t// This should be the status of the persisted post\n\t// It shouldn't use the \"edited\" status otherwise it breaks the\n\t// inferred post data floating status\n\t// See https://github.com/WordPress/gutenberg/issues/28083\n\tconst status = getCurrentPost( state ).status;\n\tif (\n\t\tstatus === 'draft' ||\n\t\tstatus === 'auto-draft' ||\n\t\tstatus === 'pending'\n\t) {\n\t\treturn date === modified || date === null;\n\t}\n\treturn false;\n}\n\n/**\n * Returns true if the post is currently being saved, or false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether post is being saved.\n */\nexport const isSavingPost = createRegistrySelector( ( select ) => ( state ) => {\n\tconst postType = getCurrentPostType( state );\n\tconst postId = getCurrentPostId( state );\n\treturn select( coreStore ).isSavingEntityRecord(\n\t\t'postType',\n\t\tpostType,\n\t\tpostId\n\t);\n} );\n\n/**\n * Returns true if non-post entities are currently being saved, or false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether non-post entities are being saved.\n */\nexport const isSavingNonPostEntityChanges = createRegistrySelector(\n\t( select ) => ( state ) => {\n\t\tconst entitiesBeingSaved = select(\n\t\t\tcoreStore\n\t\t).__experimentalGetEntitiesBeingSaved();\n\t\tconst { type, id } = getCurrentPost( state );\n\t\treturn some(\n\t\t\tentitiesBeingSaved,\n\t\t\t( entityRecord ) =>\n\t\t\t\tentityRecord.kind !== 'postType' ||\n\t\t\t\tentityRecord.name !== type ||\n\t\t\t\tentityRecord.key !== id\n\t\t);\n\t}\n);\n\n/**\n * Returns true if a previous post save was attempted successfully, or false\n * otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the post was saved successfully.\n */\nexport const didPostSaveRequestSucceed = createRegistrySelector(\n\t( select ) => ( state ) => {\n\t\tconst postType = getCurrentPostType( state );\n\t\tconst postId = getCurrentPostId( state );\n\t\treturn ! select( coreStore ).getLastEntitySaveError(\n\t\t\t'postType',\n\t\t\tpostType,\n\t\t\tpostId\n\t\t);\n\t}\n);\n\n/**\n * Returns true if a previous post save was attempted but failed, or false\n * otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the post save failed.\n */\nexport const didPostSaveRequestFail = createRegistrySelector(\n\t( select ) => ( state ) => {\n\t\tconst postType = getCurrentPostType( state );\n\t\tconst postId = getCurrentPostId( state );\n\t\treturn !! select( coreStore ).getLastEntitySaveError(\n\t\t\t'postType',\n\t\t\tpostType,\n\t\t\tpostId\n\t\t);\n\t}\n);\n\n/**\n * Returns true if the post is autosaving, or false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the post is autosaving.\n */\nexport function isAutosavingPost( state ) {\n\tif ( ! isSavingPost( state ) ) {\n\t\treturn false;\n\t}\n\treturn !! get( state.saving, [ 'options', 'isAutosave' ] );\n}\n\n/**\n * Returns true if the post is being previewed, or false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the post is being previewed.\n */\nexport function isPreviewingPost( state ) {\n\tif ( ! isSavingPost( state ) ) {\n\t\treturn false;\n\t}\n\treturn !! get( state.saving, [ 'options', 'isPreview' ] );\n}\n\n/**\n * Returns the post preview link\n *\n * @param {Object} state Global application state.\n *\n * @return {string?} Preview Link.\n */\nexport function getEditedPostPreviewLink( state ) {\n\tif ( state.saving.pending || isSavingPost( state ) ) {\n\t\treturn;\n\t}\n\n\tlet previewLink = getAutosaveAttribute( state, 'preview_link' );\n\tif ( ! previewLink ) {\n\t\tpreviewLink = getEditedPostAttribute( state, 'link' );\n\t\tif ( previewLink ) {\n\t\t\tpreviewLink = addQueryArgs( previewLink, { preview: true } );\n\t\t}\n\t}\n\tconst featuredImageId = getEditedPostAttribute( state, 'featured_media' );\n\n\tif ( previewLink && featuredImageId ) {\n\t\treturn addQueryArgs( previewLink, { _thumbnail_id: featuredImageId } );\n\t}\n\n\treturn previewLink;\n}\n\n/**\n * Returns a suggested post format for the current post, inferred only if there\n * is a single block within the post and it is of a type known to match a\n * default post format. Returns null if the format cannot be determined.\n *\n * @param {Object} state Global application state.\n *\n * @return {?string} Suggested post format.\n */\nexport function getSuggestedPostFormat( state ) {\n\tconst blocks = getEditorBlocks( state );\n\n\tif ( blocks.length > 2 ) return null;\n\n\tlet name;\n\t// If there is only one block in the content of the post grab its name\n\t// so we can derive a suitable post format from it.\n\tif ( blocks.length === 1 ) {\n\t\tname = blocks[ 0 ].name;\n\t\t// check for core/embed `video` and `audio` eligible suggestions\n\t\tif ( name === 'core/embed' ) {\n\t\t\tconst provider = blocks[ 0 ].attributes?.providerNameSlug;\n\t\t\tif ( [ 'youtube', 'vimeo' ].includes( provider ) ) {\n\t\t\t\tname = 'core/video';\n\t\t\t} else if ( [ 'spotify', 'soundcloud' ].includes( provider ) ) {\n\t\t\t\tname = 'core/audio';\n\t\t\t}\n\t\t}\n\t}\n\n\t// If there are two blocks in the content and the last one is a text blocks\n\t// grab the name of the first one to also suggest a post format from it.\n\tif ( blocks.length === 2 && blocks[ 1 ].name === 'core/paragraph' ) {\n\t\tname = blocks[ 0 ].name;\n\t}\n\n\t// We only convert to default post formats in core.\n\tswitch ( name ) {\n\t\tcase 'core/image':\n\t\t\treturn 'image';\n\t\tcase 'core/quote':\n\t\tcase 'core/pullquote':\n\t\t\treturn 'quote';\n\t\tcase 'core/gallery':\n\t\t\treturn 'gallery';\n\t\tcase 'core/video':\n\t\t\treturn 'video';\n\t\tcase 'core/audio':\n\t\t\treturn 'audio';\n\t\tdefault:\n\t\t\treturn null;\n\t}\n}\n\n/**\n * Returns the content of the post being edited.\n *\n * @param {Object} state Global application state.\n *\n * @return {string} Post content.\n */\nexport const getEditedPostContent = createRegistrySelector(\n\t( select ) => ( state ) => {\n\t\tconst postId = getCurrentPostId( state );\n\t\tconst postType = getCurrentPostType( state );\n\t\tconst record = select( coreStore ).getEditedEntityRecord(\n\t\t\t'postType',\n\t\t\tpostType,\n\t\t\tpostId\n\t\t);\n\t\tif ( record ) {\n\t\t\tif ( typeof record.content === 'function' ) {\n\t\t\t\treturn record.content( record );\n\t\t\t} else if ( record.blocks ) {\n\t\t\t\treturn __unstableSerializeAndClean( record.blocks );\n\t\t\t} else if ( record.content ) {\n\t\t\t\treturn record.content;\n\t\t\t}\n\t\t}\n\t\treturn '';\n\t}\n);\n\n/**\n * Returns true if the post is being published, or false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether post is being published.\n */\nexport function isPublishingPost( state ) {\n\treturn (\n\t\tisSavingPost( state ) &&\n\t\t! isCurrentPostPublished( state ) &&\n\t\tgetEditedPostAttribute( state, 'status' ) === 'publish'\n\t);\n}\n\n/**\n * Returns whether the permalink is editable or not.\n *\n * @param {Object} state Editor state.\n *\n * @return {boolean} Whether or not the permalink is editable.\n */\nexport function isPermalinkEditable( state ) {\n\tconst permalinkTemplate = getEditedPostAttribute(\n\t\tstate,\n\t\t'permalink_template'\n\t);\n\n\treturn PERMALINK_POSTNAME_REGEX.test( permalinkTemplate );\n}\n\n/**\n * Returns the permalink for the post.\n *\n * @param {Object} state Editor state.\n *\n * @return {?string} The permalink, or null if the post is not viewable.\n */\nexport function getPermalink( state ) {\n\tconst permalinkParts = getPermalinkParts( state );\n\tif ( ! permalinkParts ) {\n\t\treturn null;\n\t}\n\n\tconst { prefix, postName, suffix } = permalinkParts;\n\n\tif ( isPermalinkEditable( state ) ) {\n\t\treturn prefix + postName + suffix;\n\t}\n\n\treturn prefix;\n}\n\n/**\n * Returns the slug for the post being edited, preferring a manually edited\n * value if one exists, then a sanitized version of the current post title, and\n * finally the post ID.\n *\n * @param {Object} state Editor state.\n *\n * @return {string} The current slug to be displayed in the editor\n */\nexport function getEditedPostSlug( state ) {\n\treturn (\n\t\tgetEditedPostAttribute( state, 'slug' ) ||\n\t\tcleanForSlug( getEditedPostAttribute( state, 'title' ) ) ||\n\t\tgetCurrentPostId( state )\n\t);\n}\n\n/**\n * Returns the permalink for a post, split into it's three parts: the prefix,\n * the postName, and the suffix.\n *\n * @param {Object} state Editor state.\n *\n * @return {Object} An object containing the prefix, postName, and suffix for\n *                  the permalink, or null if the post is not viewable.\n */\nexport function getPermalinkParts( state ) {\n\tconst permalinkTemplate = getEditedPostAttribute(\n\t\tstate,\n\t\t'permalink_template'\n\t);\n\tif ( ! permalinkTemplate ) {\n\t\treturn null;\n\t}\n\n\tconst postName =\n\t\tgetEditedPostAttribute( state, 'slug' ) ||\n\t\tgetEditedPostAttribute( state, 'generated_slug' );\n\n\tconst [ prefix, suffix ] = permalinkTemplate.split(\n\t\tPERMALINK_POSTNAME_REGEX\n\t);\n\n\treturn {\n\t\tprefix,\n\t\tpostName,\n\t\tsuffix,\n\t};\n}\n\n/**\n * Returns whether the post is locked.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Is locked.\n */\nexport function isPostLocked( state ) {\n\treturn state.postLock.isLocked;\n}\n\n/**\n * Returns whether post saving is locked.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Is locked.\n */\nexport function isPostSavingLocked( state ) {\n\treturn Object.keys( state.postSavingLock ).length > 0;\n}\n\n/**\n * Returns whether post autosaving is locked.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Is locked.\n */\nexport function isPostAutosavingLocked( state ) {\n\treturn Object.keys( state.postAutosavingLock ).length > 0;\n}\n\n/**\n * Returns whether the edition of the post has been taken over.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Is post lock takeover.\n */\nexport function isPostLockTakeover( state ) {\n\treturn state.postLock.isTakeover;\n}\n\n/**\n * Returns details about the post lock user.\n *\n * @param {Object} state Global application state.\n *\n * @return {Object} A user object.\n */\nexport function getPostLockUser( state ) {\n\treturn state.postLock.user;\n}\n\n/**\n * Returns the active post lock.\n *\n * @param {Object} state Global application state.\n *\n * @return {Object} The lock object.\n */\nexport function getActivePostLock( state ) {\n\treturn state.postLock.activePostLock;\n}\n\n/**\n * Returns whether or not the user has the unfiltered_html capability.\n *\n * @param {Object} state Editor state.\n *\n * @return {boolean} Whether the user can or can't post unfiltered HTML.\n */\nexport function canUserUseUnfilteredHTML( state ) {\n\treturn has( getCurrentPost( state ), [\n\t\t'_links',\n\t\t'wp:action-unfiltered-html',\n\t] );\n}\n\n/**\n * Returns whether the pre-publish panel should be shown\n * or skipped when the user clicks the \"publish\" button.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the pre-publish panel should be shown or not.\n */\nexport function isPublishSidebarEnabled( state ) {\n\tif ( state.preferences.hasOwnProperty( 'isPublishSidebarEnabled' ) ) {\n\t\treturn state.preferences.isPublishSidebarEnabled;\n\t}\n\treturn PREFERENCES_DEFAULTS.isPublishSidebarEnabled;\n}\n\n/**\n * Return the current block list.\n *\n * @param {Object} state\n * @return {Array} Block list.\n */\nexport function getEditorBlocks( state ) {\n\treturn getEditedPostAttribute( state, 'blocks' ) || EMPTY_ARRAY;\n}\n\n/**\n * A block selection object.\n *\n * @typedef {Object} WPBlockSelection\n *\n * @property {string} clientId     A block client ID.\n * @property {string} attributeKey A block attribute key.\n * @property {number} offset       An attribute value offset, based on the rich\n *                                 text value. See `wp.richText.create`.\n */\n\n/**\n * Returns the current selection start.\n *\n * @param {Object} state\n * @return {WPBlockSelection} The selection start.\n *\n * @deprecated since Gutenberg 10.0.0.\n */\nexport function getEditorSelectionStart( state ) {\n\tdeprecated( \"select('core/editor').getEditorSelectionStart\", {\n\t\tsince: '10.0',\n\t\tplugin: 'Gutenberg',\n\t\talternative: \"select('core/editor').getEditorSelection\",\n\t} );\n\treturn getEditedPostAttribute( state, 'selection' )?.selectionStart;\n}\n\n/**\n * Returns the current selection end.\n *\n * @param {Object} state\n * @return {WPBlockSelection} The selection end.\n *\n * @deprecated since Gutenberg 10.0.0.\n */\nexport function getEditorSelectionEnd( state ) {\n\tdeprecated( \"select('core/editor').getEditorSelectionStart\", {\n\t\tsince: '10.0',\n\t\tplugin: 'Gutenberg',\n\t\talternative: \"select('core/editor').getEditorSelection\",\n\t} );\n\treturn getEditedPostAttribute( state, 'selection' )?.selectionEnd;\n}\n\n/**\n * Returns the current selection.\n *\n * @param {Object} state\n * @return {WPBlockSelection} The selection end.\n */\nexport function getEditorSelection( state ) {\n\treturn getEditedPostAttribute( state, 'selection' );\n}\n\n/**\n * Is the editor ready\n *\n * @param {Object} state\n * @return {boolean} is Ready.\n */\nexport function __unstableIsEditorReady( state ) {\n\treturn state.isReady;\n}\n\n/**\n * Returns the post editor settings.\n *\n * @param {Object} state Editor state.\n *\n * @return {Object} The editor settings object.\n */\nexport function getEditorSettings( state ) {\n\treturn state.editorSettings;\n}\n\n/*\n * Backward compatibility\n */\n\n/**\n * Returns state object prior to a specified optimist transaction ID, or `null`\n * if the transaction corresponding to the given ID cannot be found.\n *\n * @deprecated since Gutenberg 9.7.0.\n */\nexport function getStateBeforeOptimisticTransaction() {\n\tdeprecated( \"select('core/editor').getStateBeforeOptimisticTransaction\", {\n\t\tsince: '5.7',\n\t\thint: 'No state history is kept on this store anymore',\n\t} );\n\n\treturn null;\n}\n/**\n * Returns true if an optimistic transaction is pending commit, for which the\n * before state satisfies the given predicate function.\n *\n * @deprecated since Gutenberg 9.7.0.\n */\nexport function inSomeHistory() {\n\tdeprecated( \"select('core/editor').inSomeHistory\", {\n\t\tsince: '5.7',\n\t\thint: 'No state history is kept on this store anymore',\n\t} );\n\treturn false;\n}\n\nfunction getBlockEditorSelector( name ) {\n\treturn createRegistrySelector( ( select ) => ( state, ...args ) => {\n\t\tdeprecated( \"`wp.data.select( 'core/editor' ).\" + name + '`', {\n\t\t\tsince: '5.3',\n\t\t\talternative: \"`wp.data.select( 'core/block-editor' ).\" + name + '`',\n\t\t} );\n\n\t\treturn select( blockEditorStore )[ name ]( ...args );\n\t} );\n}\n\n/**\n * @see getBlockName in core/block-editor store.\n */\nexport const getBlockName = getBlockEditorSelector( 'getBlockName' );\n\n/**\n * @see isBlockValid in core/block-editor store.\n */\nexport const isBlockValid = getBlockEditorSelector( 'isBlockValid' );\n\n/**\n * @see getBlockAttributes in core/block-editor store.\n */\nexport const getBlockAttributes = getBlockEditorSelector(\n\t'getBlockAttributes'\n);\n\n/**\n * @see getBlock in core/block-editor store.\n */\nexport const getBlock = getBlockEditorSelector( 'getBlock' );\n\n/**\n * @see getBlocks in core/block-editor store.\n */\nexport const getBlocks = getBlockEditorSelector( 'getBlocks' );\n\n/**\n * @see getClientIdsOfDescendants in core/block-editor store.\n */\nexport const getClientIdsOfDescendants = getBlockEditorSelector(\n\t'getClientIdsOfDescendants'\n);\n\n/**\n * @see getClientIdsWithDescendants in core/block-editor store.\n */\nexport const getClientIdsWithDescendants = getBlockEditorSelector(\n\t'getClientIdsWithDescendants'\n);\n\n/**\n * @see getGlobalBlockCount in core/block-editor store.\n */\nexport const getGlobalBlockCount = getBlockEditorSelector(\n\t'getGlobalBlockCount'\n);\n\n/**\n * @see getBlocksByClientId in core/block-editor store.\n */\nexport const getBlocksByClientId = getBlockEditorSelector(\n\t'getBlocksByClientId'\n);\n\n/**\n * @see getBlockCount in core/block-editor store.\n */\nexport const getBlockCount = getBlockEditorSelector( 'getBlockCount' );\n\n/**\n * @see getBlockSelectionStart in core/block-editor store.\n */\nexport const getBlockSelectionStart = getBlockEditorSelector(\n\t'getBlockSelectionStart'\n);\n\n/**\n * @see getBlockSelectionEnd in core/block-editor store.\n */\nexport const getBlockSelectionEnd = getBlockEditorSelector(\n\t'getBlockSelectionEnd'\n);\n\n/**\n * @see getSelectedBlockCount in core/block-editor store.\n */\nexport const getSelectedBlockCount = getBlockEditorSelector(\n\t'getSelectedBlockCount'\n);\n\n/**\n * @see hasSelectedBlock in core/block-editor store.\n */\nexport const hasSelectedBlock = getBlockEditorSelector( 'hasSelectedBlock' );\n\n/**\n * @see getSelectedBlockClientId in core/block-editor store.\n */\nexport const getSelectedBlockClientId = getBlockEditorSelector(\n\t'getSelectedBlockClientId'\n);\n\n/**\n * @see getSelectedBlock in core/block-editor store.\n */\nexport const getSelectedBlock = getBlockEditorSelector( 'getSelectedBlock' );\n\n/**\n * @see getBlockRootClientId in core/block-editor store.\n */\nexport const getBlockRootClientId = getBlockEditorSelector(\n\t'getBlockRootClientId'\n);\n\n/**\n * @see getBlockHierarchyRootClientId in core/block-editor store.\n */\nexport const getBlockHierarchyRootClientId = getBlockEditorSelector(\n\t'getBlockHierarchyRootClientId'\n);\n\n/**\n * @see getAdjacentBlockClientId in core/block-editor store.\n */\nexport const getAdjacentBlockClientId = getBlockEditorSelector(\n\t'getAdjacentBlockClientId'\n);\n\n/**\n * @see getPreviousBlockClientId in core/block-editor store.\n */\nexport const getPreviousBlockClientId = getBlockEditorSelector(\n\t'getPreviousBlockClientId'\n);\n\n/**\n * @see getNextBlockClientId in core/block-editor store.\n */\nexport const getNextBlockClientId = getBlockEditorSelector(\n\t'getNextBlockClientId'\n);\n\n/**\n * @see getSelectedBlocksInitialCaretPosition in core/block-editor store.\n */\nexport const getSelectedBlocksInitialCaretPosition = getBlockEditorSelector(\n\t'getSelectedBlocksInitialCaretPosition'\n);\n\n/**\n * @see getMultiSelectedBlockClientIds in core/block-editor store.\n */\nexport const getMultiSelectedBlockClientIds = getBlockEditorSelector(\n\t'getMultiSelectedBlockClientIds'\n);\n\n/**\n * @see getMultiSelectedBlocks in core/block-editor store.\n */\nexport const getMultiSelectedBlocks = getBlockEditorSelector(\n\t'getMultiSelectedBlocks'\n);\n\n/**\n * @see getFirstMultiSelectedBlockClientId in core/block-editor store.\n */\nexport const getFirstMultiSelectedBlockClientId = getBlockEditorSelector(\n\t'getFirstMultiSelectedBlockClientId'\n);\n\n/**\n * @see getLastMultiSelectedBlockClientId in core/block-editor store.\n */\nexport const getLastMultiSelectedBlockClientId = getBlockEditorSelector(\n\t'getLastMultiSelectedBlockClientId'\n);\n\n/**\n * @see isFirstMultiSelectedBlock in core/block-editor store.\n */\nexport const isFirstMultiSelectedBlock = getBlockEditorSelector(\n\t'isFirstMultiSelectedBlock'\n);\n\n/**\n * @see isBlockMultiSelected in core/block-editor store.\n */\nexport const isBlockMultiSelected = getBlockEditorSelector(\n\t'isBlockMultiSelected'\n);\n\n/**\n * @see isAncestorMultiSelected in core/block-editor store.\n */\nexport const isAncestorMultiSelected = getBlockEditorSelector(\n\t'isAncestorMultiSelected'\n);\n\n/**\n * @see getMultiSelectedBlocksStartClientId in core/block-editor store.\n */\nexport const getMultiSelectedBlocksStartClientId = getBlockEditorSelector(\n\t'getMultiSelectedBlocksStartClientId'\n);\n\n/**\n * @see getMultiSelectedBlocksEndClientId in core/block-editor store.\n */\nexport const getMultiSelectedBlocksEndClientId = getBlockEditorSelector(\n\t'getMultiSelectedBlocksEndClientId'\n);\n\n/**\n * @see getBlockOrder in core/block-editor store.\n */\nexport const getBlockOrder = getBlockEditorSelector( 'getBlockOrder' );\n\n/**\n * @see getBlockIndex in core/block-editor store.\n */\nexport const getBlockIndex = getBlockEditorSelector( 'getBlockIndex' );\n\n/**\n * @see isBlockSelected in core/block-editor store.\n */\nexport const isBlockSelected = getBlockEditorSelector( 'isBlockSelected' );\n\n/**\n * @see hasSelectedInnerBlock in core/block-editor store.\n */\nexport const hasSelectedInnerBlock = getBlockEditorSelector(\n\t'hasSelectedInnerBlock'\n);\n\n/**\n * @see isBlockWithinSelection in core/block-editor store.\n */\nexport const isBlockWithinSelection = getBlockEditorSelector(\n\t'isBlockWithinSelection'\n);\n\n/**\n * @see hasMultiSelection in core/block-editor store.\n */\nexport const hasMultiSelection = getBlockEditorSelector( 'hasMultiSelection' );\n\n/**\n * @see isMultiSelecting in core/block-editor store.\n */\nexport const isMultiSelecting = getBlockEditorSelector( 'isMultiSelecting' );\n\n/**\n * @see isSelectionEnabled in core/block-editor store.\n */\nexport const isSelectionEnabled = getBlockEditorSelector(\n\t'isSelectionEnabled'\n);\n\n/**\n * @see getBlockMode in core/block-editor store.\n */\nexport const getBlockMode = getBlockEditorSelector( 'getBlockMode' );\n\n/**\n * @see isTyping in core/block-editor store.\n */\nexport const isTyping = getBlockEditorSelector( 'isTyping' );\n\n/**\n * @see isCaretWithinFormattedText in core/block-editor store.\n */\nexport const isCaretWithinFormattedText = getBlockEditorSelector(\n\t'isCaretWithinFormattedText'\n);\n\n/**\n * @see getBlockInsertionPoint in core/block-editor store.\n */\nexport const getBlockInsertionPoint = getBlockEditorSelector(\n\t'getBlockInsertionPoint'\n);\n\n/**\n * @see isBlockInsertionPointVisible in core/block-editor store.\n */\nexport const isBlockInsertionPointVisible = getBlockEditorSelector(\n\t'isBlockInsertionPointVisible'\n);\n\n/**\n * @see isValidTemplate in core/block-editor store.\n */\nexport const isValidTemplate = getBlockEditorSelector( 'isValidTemplate' );\n\n/**\n * @see getTemplate in core/block-editor store.\n */\nexport const getTemplate = getBlockEditorSelector( 'getTemplate' );\n\n/**\n * @see getTemplateLock in core/block-editor store.\n */\nexport const getTemplateLock = getBlockEditorSelector( 'getTemplateLock' );\n\n/**\n * @see canInsertBlockType in core/block-editor store.\n */\nexport const canInsertBlockType = getBlockEditorSelector(\n\t'canInsertBlockType'\n);\n\n/**\n * @see getInserterItems in core/block-editor store.\n */\nexport const getInserterItems = getBlockEditorSelector( 'getInserterItems' );\n\n/**\n * @see hasInserterItems in core/block-editor store.\n */\nexport const hasInserterItems = getBlockEditorSelector( 'hasInserterItems' );\n\n/**\n * @see getBlockListSettings in core/block-editor store.\n */\nexport const getBlockListSettings = getBlockEditorSelector(\n\t'getBlockListSettings'\n);\n\n/**\n * Returns the default template types.\n *\n * @param {Object} state Global application state.\n *\n * @return {Object} The template types.\n */\nexport function __experimentalGetDefaultTemplateTypes( state ) {\n\treturn getEditorSettings( state )?.defaultTemplateTypes;\n}\n\n/**\n * Returns the default template part areas.\n *\n * @param {Object} state Global application state.\n *\n * @return {Array} The template part areas.\n */\nexport const __experimentalGetDefaultTemplatePartAreas = createSelector(\n\t( state ) => {\n\t\tconst areas =\n\t\t\tgetEditorSettings( state )?.defaultTemplatePartAreas || [];\n\t\treturn areas?.map( ( item ) => {\n\t\t\treturn { ...item, icon: getTemplatePartIcon( item.icon ) };\n\t\t} );\n\t},\n\t( state ) => [ getEditorSettings( state )?.defaultTemplatePartAreas ]\n);\n\n/**\n * Returns a default template type searched by slug.\n *\n * @param {Object} state Global application state.\n * @param {string} slug  The template type slug.\n *\n * @return {Object} The template type.\n */\nexport const __experimentalGetDefaultTemplateType = createSelector(\n\t( state, slug ) =>\n\t\tfind( __experimentalGetDefaultTemplateTypes( state ), { slug } ) || {},\n\t( state, slug ) => [ __experimentalGetDefaultTemplateTypes( state ), slug ]\n);\n\n/**\n * Given a template entity, return information about it which is ready to be\n * rendered, such as the title, description, and icon.\n *\n * @param {Object} state    Global application state.\n * @param {Object} template The template for which we need information.\n * @return {Object} Information about the template, including title, description, and icon.\n */\nexport function __experimentalGetTemplateInfo( state, template ) {\n\tif ( ! template ) {\n\t\treturn {};\n\t}\n\n\tconst { excerpt, slug, title, area } = template;\n\tconst {\n\t\ttitle: defaultTitle,\n\t\tdescription: defaultDescription,\n\t} = __experimentalGetDefaultTemplateType( state, slug );\n\n\tconst templateTitle = isString( title ) ? title : title?.rendered;\n\tconst templateDescription = isString( excerpt ) ? excerpt : excerpt?.raw;\n\tconst templateIcon =\n\t\t__experimentalGetDefaultTemplatePartAreas( state ).find(\n\t\t\t( item ) => area === item.area\n\t\t)?.icon || layout;\n\n\treturn {\n\t\ttitle:\n\t\t\ttemplateTitle && templateTitle !== slug\n\t\t\t\t? templateTitle\n\t\t\t\t: defaultTitle || slug,\n\t\tdescription: templateDescription || defaultDescription,\n\t\ticon: templateIcon,\n\t};\n}\n\n/**\n * Returns a post type label depending on the current post.\n *\n * @param {Object} state Global application state.\n *\n * @return {string|undefined} The post type label if available, otherwise undefined.\n */\nexport const getPostTypeLabel = createRegistrySelector(\n\t( select ) => ( state ) => {\n\t\tconst currentPostType = getCurrentPostType( state );\n\t\tconst postType = select( coreStore ).getPostType( currentPostType );\n\t\t// Disable reason: Post type labels object is shaped like this.\n\t\t// eslint-disable-next-line camelcase\n\t\treturn postType?.labels?.singular_name;\n\t}\n);\n"]}
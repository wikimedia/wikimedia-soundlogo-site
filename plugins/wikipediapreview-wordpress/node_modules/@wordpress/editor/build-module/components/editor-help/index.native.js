import _extends from "@babel/runtime/helpers/esm/extends";
import { createElement } from "@wordpress/element";

/**
 * External dependencies
 */
import { kebabCase } from 'lodash';
import { Text, ScrollView, StyleSheet, View } from 'react-native';
import { TransitionPresets } from '@react-navigation/stack';
/**
 * WordPress dependencies
 */

import { BottomSheet, BottomSheetConsumer, PanelBody } from '@wordpress/components';
import { __ } from '@wordpress/i18n';
import { helpFilled, plusCircleFilled, alignJustifyAlt, trashFilled, cogAlt } from '@wordpress/icons';
import { useSelect } from '@wordpress/data';
import { store as editorStore } from '@wordpress/editor';
import { usePreferredColorSchemeStyle } from '@wordpress/compose';
import { requestContactCustomerSupport, requestGotoCustomerSupportOptions } from '@wordpress/react-native-bridge';
/**
 * Internal dependencies
 */

import styles from './style.scss';
import HelpDetailNavigationScreen from './help-detail-navigation-screen';
import HelpTopicRow from './help-topic-row';
import HelpGetSupportButton from './help-get-support-button';
import IntroToBlocks from './intro-to-blocks';
import AddBlocks from './add-blocks';
import MoveBlocks from './move-blocks';
import RemoveBlocks from './remove-blocks';
import CustomizeBlocks from './customize-blocks';
const HELP_TOPICS = [{
  label: __('What is a block?'),
  icon: helpFilled,
  view: createElement(IntroToBlocks, null)
}, {
  label: __('Add blocks'),
  icon: plusCircleFilled,
  view: createElement(AddBlocks, null)
}, {
  label: __('Move blocks'),
  icon: alignJustifyAlt,
  view: createElement(MoveBlocks, null)
}, {
  label: __('Remove blocks'),
  icon: trashFilled,
  view: createElement(RemoveBlocks, null)
}, {
  label: __('Customize blocks'),
  icon: cogAlt,
  view: createElement(CustomizeBlocks, null)
}];

function EditorHelpTopics({
  close,
  isVisible,
  onClose
}) {
  const {
    postType
  } = useSelect(select => ({
    postType: select(editorStore).getEditedPostAttribute('type')
  }));
  const sectionTitle = usePreferredColorSchemeStyle(styles.helpDetailSectionHeading, styles.helpDetailSectionHeadingDark);
  const title = postType === 'page' ? __('How to edit your page') : __('How to edit your post');
  return createElement(BottomSheet, {
    isVisible: isVisible,
    onClose: onClose,
    hideHeader: true,
    hasNavigation: true,
    contentStyle: styles.contentContainer,
    testID: "editor-help-modal"
  }, createElement(BottomSheet.NavigationContainer, {
    animate: true,
    main: true
  }, createElement(BottomSheet.NavigationScreen, {
    isScrollable: true,
    fullScreen: true,
    name: "help-topics"
  }, createElement(View, {
    style: styles.container
  }, createElement(BottomSheet.NavBar, null, createElement(BottomSheet.NavBar.DismissButton, {
    onPress: close,
    iosText: __('Close')
  }), createElement(BottomSheet.NavBar.Heading, null, title)), createElement(BottomSheetConsumer, null, ({
    listProps
  }) => {
    const contentContainerStyle = StyleSheet.flatten(listProps.contentContainerStyle);
    return createElement(ScrollView, _extends({}, listProps, {
      contentContainerStyle: { ...contentContainerStyle,
        paddingBottom: Math.max(listProps.safeAreaBottomInset, contentContainerStyle.paddingBottom),

        /**
         * Remove margin set via `hideHeader`. Combining a header
         * and navigation in this bottom sheet is at odds with the
         * current `BottomSheet` implementation.
         */
        marginTop: 0
      }
    }), createElement(PanelBody, null, createElement(Text, {
      style: sectionTitle
    }, __('The basics')), HELP_TOPICS.map(({
      label,
      icon
    }) => {
      const labelSlug = kebabCase(label);
      return createElement(HelpTopicRow, {
        key: labelSlug,
        label: label,
        icon: icon,
        screenName: labelSlug
      });
    }), createElement(Text, {
      style: sectionTitle
    }, __('Get support')), createElement(HelpGetSupportButton, {
      title: __('Contact support'),
      onPress: requestContactCustomerSupport
    }), createElement(HelpGetSupportButton, {
      title: __('More support options'),
      onPress: requestGotoCustomerSupportOptions
    })));
  }))), HELP_TOPICS.map(({
    view,
    label
  }) => {
    const labelSlug = kebabCase(label);
    return createElement(HelpDetailNavigationScreen, {
      key: labelSlug,
      name: labelSlug,
      content: view,
      label: label,
      options: {
        gestureEnabled: true,
        ...TransitionPresets.DefaultTransition
      }
    });
  })));
}

export default EditorHelpTopics;
//# sourceMappingURL=index.native.js.map
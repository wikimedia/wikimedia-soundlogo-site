{"version":3,"sources":["@wordpress/editor/src/hooks/custom-sources-backwards-compatibility.js"],"names":["pickBy","mapValues","isEmpty","mapKeys","store","blocksStore","select","globalSelect","useSelect","useEntityProp","useMemo","createHigherOrderComponent","addFilter","editorStore","createWithMetaAttributeSource","metaAttributes","BlockEdit","attributes","setAttributes","props","postType","getCurrentPostType","meta","setMeta","mergedAttributes","metaKey","nextAttributes","nextMeta","value","key","attributeKey","shimAttributeSource","settings","source","edit","getBlockTypes","map","name","getBlockType","forEach"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { pickBy, mapValues, isEmpty, mapKeys } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { store as blocksStore } from '@wordpress/blocks';\nimport { select as globalSelect, useSelect } from '@wordpress/data';\nimport { useEntityProp } from '@wordpress/core-data';\nimport { useMemo } from '@wordpress/element';\nimport { createHigherOrderComponent } from '@wordpress/compose';\nimport { addFilter } from '@wordpress/hooks';\n\n/**\n * Internal dependencies\n */\nimport { store as editorStore } from '../store';\n\n/** @typedef {import('@wordpress/compose').WPHigherOrderComponent} WPHigherOrderComponent */\n/** @typedef {import('@wordpress/blocks').WPBlockSettings} WPBlockSettings */\n\n/**\n * Object whose keys are the names of block attributes, where each value\n * represents the meta key to which the block attribute is intended to save.\n *\n * @see https://developer.wordpress.org/reference/functions/register_meta/\n *\n * @typedef {Object<string,string>} WPMetaAttributeMapping\n */\n\n/**\n * Given a mapping of attribute names (meta source attributes) to their\n * associated meta key, returns a higher order component that overrides its\n * `attributes` and `setAttributes` props to sync any changes with the edited\n * post's meta keys.\n *\n * @param {WPMetaAttributeMapping} metaAttributes Meta attribute mapping.\n *\n * @return {WPHigherOrderComponent} Higher-order component.\n */\nconst createWithMetaAttributeSource = ( metaAttributes ) =>\n\tcreateHigherOrderComponent(\n\t\t( BlockEdit ) => ( { attributes, setAttributes, ...props } ) => {\n\t\t\tconst postType = useSelect(\n\t\t\t\t( select ) => select( editorStore ).getCurrentPostType(),\n\t\t\t\t[]\n\t\t\t);\n\t\t\tconst [ meta, setMeta ] = useEntityProp(\n\t\t\t\t'postType',\n\t\t\t\tpostType,\n\t\t\t\t'meta'\n\t\t\t);\n\n\t\t\tconst mergedAttributes = useMemo(\n\t\t\t\t() => ( {\n\t\t\t\t\t...attributes,\n\t\t\t\t\t...mapValues(\n\t\t\t\t\t\tmetaAttributes,\n\t\t\t\t\t\t( metaKey ) => meta[ metaKey ]\n\t\t\t\t\t),\n\t\t\t\t} ),\n\t\t\t\t[ attributes, meta ]\n\t\t\t);\n\n\t\t\treturn (\n\t\t\t\t<BlockEdit\n\t\t\t\t\tattributes={ mergedAttributes }\n\t\t\t\t\tsetAttributes={ ( nextAttributes ) => {\n\t\t\t\t\t\tconst nextMeta = mapKeys(\n\t\t\t\t\t\t\t// Filter to intersection of keys between the updated\n\t\t\t\t\t\t\t// attributes and those with an associated meta key.\n\t\t\t\t\t\t\tpickBy(\n\t\t\t\t\t\t\t\tnextAttributes,\n\t\t\t\t\t\t\t\t( value, key ) => metaAttributes[ key ]\n\t\t\t\t\t\t\t),\n\n\t\t\t\t\t\t\t// Rename the keys to the expected meta key name.\n\t\t\t\t\t\t\t( value, attributeKey ) =>\n\t\t\t\t\t\t\t\tmetaAttributes[ attributeKey ]\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tif ( ! isEmpty( nextMeta ) ) {\n\t\t\t\t\t\t\tsetMeta( nextMeta );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tsetAttributes( nextAttributes );\n\t\t\t\t\t} }\n\t\t\t\t\t{ ...props }\n\t\t\t\t/>\n\t\t\t);\n\t\t},\n\t\t'withMetaAttributeSource'\n\t);\n\n/**\n * Filters a registered block's settings to enhance a block's `edit` component\n * to upgrade meta-sourced attributes to use the post's meta entity property.\n *\n * @param {WPBlockSettings} settings Registered block settings.\n *\n * @return {WPBlockSettings} Filtered block settings.\n */\nfunction shimAttributeSource( settings ) {\n\t/** @type {WPMetaAttributeMapping} */\n\tconst metaAttributes = mapValues(\n\t\tpickBy( settings.attributes, { source: 'meta' } ),\n\t\t'meta'\n\t);\n\tif ( ! isEmpty( metaAttributes ) ) {\n\t\tsettings.edit = createWithMetaAttributeSource( metaAttributes )(\n\t\t\tsettings.edit\n\t\t);\n\t}\n\n\treturn settings;\n}\n\naddFilter(\n\t'blocks.registerBlockType',\n\t'core/editor/custom-sources-backwards-compatibility/shim-attribute-source',\n\tshimAttributeSource\n);\n\n// The above filter will only capture blocks registered after the filter was\n// added. There may already be blocks registered by this point, and those must\n// be updated to apply the shim.\n//\n// The following implementation achieves this, albeit with a couple caveats:\n// - Only blocks registered on the global store will be modified.\n// - The block settings are directly mutated, since there is currently no\n//   mechanism to update an existing block registration. This is the reason for\n//   `getBlockType` separate from `getBlockTypes`, since the latter returns a\n//   _copy_ of the block registration (i.e. the mutation would not affect the\n//   actual registered block settings).\n//\n// `getBlockTypes` or `getBlockType` implementation could change in the future\n// in regards to creating settings clones, but the corresponding end-to-end\n// tests for meta blocks should cover against any potential regressions.\n//\n// In the future, we could support updating block settings, at which point this\n// implementation could use that mechanism instead.\nglobalSelect( blocksStore )\n\t.getBlockTypes()\n\t.map( ( { name } ) => globalSelect( blocksStore ).getBlockType( name ) )\n\t.forEach( shimAttributeSource );\n"]}
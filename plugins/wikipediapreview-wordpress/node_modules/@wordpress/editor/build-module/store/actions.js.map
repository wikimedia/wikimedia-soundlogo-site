{"version":3,"sources":["@wordpress/editor/src/store/actions.js"],"names":["has","deprecated","controls","apiFetch","parse","synchronizeBlocksWithTemplate","__unstableSerializeAndClean","store","noticesStore","coreStore","blockEditorStore","STORE_NAME","TRASH_POST_NOTICE_ID","getNotificationArgumentsForSaveSuccess","getNotificationArgumentsForSaveFail","getNotificationArgumentsForTrashFail","setupEditor","post","edits","template","resetPost","type","setupEditorState","isNewPost","status","content","raw","blocks","resetEditorBlocks","__unstableShouldCreateUndoLevel","Object","keys","some","key","editPost","__experimentalTearDownEditor","__experimentalRequestPostUpdateStart","options","__experimentalRequestPostUpdateFinish","updatePost","since","alternative","id","select","dispatch","savePost","isAutosave","undoIgnore","previousRecord","error","args","length","updatedRecord","previousPost","postType","resolveSelect","refreshPost","postTypeSlug","newPost","path","rest_base","Date","now","trashPost","method","autosave","local","isPostNew","title","excerpt","postId","redo","undo","createUndoLevel","updatePostLock","lock","enablePublishSidebar","disablePublishSidebar","lockPostSaving","lockName","unlockPostSaving","lockPostAutosaving","unlockPostAutosaving","selection","noChange","blocksForSerialization","updateEditorSettings","settings","getBlockEditorAction","name","resetBlocks","receiveBlocks","updateBlock","updateBlockAttributes","selectBlock","startMultiSelect","stopMultiSelect","multiSelect","clearSelectedBlock","toggleSelection","replaceBlocks","replaceBlock","moveBlocksDown","moveBlocksUp","moveBlockToPosition","insertBlock","insertBlocks","showInsertionPoint","hideInsertionPoint","setTemplateValidity","synchronizeTemplate","mergeBlocks","removeBlocks","removeBlock","toggleBlockMode","startTyping","stopTyping","enterFormattedText","exitFormattedText","insertDefaultBlock","updateBlockListSettings"],"mappings":"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ACNtD,IAAAA,IAAI,EAAE,kBADA;AAENsD,IAAAA;AAFM,GAAP;AAIA;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,oBAAT,GAAgC;AACtC,SAAO;AACNvD,IAAAA,IAAI,EAAE;AADA,GAAP;AAGA;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASwD,qBAAT,GAAiC;AACvC,SAAO;AACNxD,IAAAA,IAAI,EAAE;AADA,GAAP;AAGA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASyD,cAAT,CAAyBC,QAAzB,EAAoC;AAC1C,SAAO;AACN1D,IAAAA,IAAI,EAAE,kBADA;AAEN0D,IAAAA;AAFM,GAAP;AAIA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,gBAAT,CAA2BD,QAA3B,EAAsC;AAC5C,SAAO;AACN1D,IAAAA,IAAI,EAAE,oBADA;AAEN0D,IAAAA;AAFM,GAAP;AAIA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASE,kBAAT,CAA6BF,QAA7B,EAAwC;AAC9C,SAAO;AACN1D,IAAAA,IAAI,EAAE,sBADA;AAEN0D,IAAAA;AAFM,GAAP;AAIA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASG,oBAAT,CAA+BH,QAA/B,EAA0C;AAChD,SAAO;AACN1D,IAAAA,IAAI,EAAE,wBADA;AAEN0D,IAAAA;AAFM,GAAP;AAIA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,UAAUnD,iBAAV,CAA6BD,MAA7B,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","sourcesContent":["/**\n * External dependencies\n */\nimport { has } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport deprecated from '@wordpress/deprecated';\nimport { controls } from '@wordpress/data';\nimport { apiFetch } from '@wordpress/data-controls';\nimport {\n\tparse,\n\tsynchronizeBlocksWithTemplate,\n\t__unstableSerializeAndClean,\n} from '@wordpress/blocks';\nimport { store as noticesStore } from '@wordpress/notices';\nimport { store as coreStore } from '@wordpress/core-data';\nimport { store as blockEditorStore } from '@wordpress/block-editor';\n\n/**\n * Internal dependencies\n */\nimport { STORE_NAME, TRASH_POST_NOTICE_ID } from './constants';\nimport {\n\tgetNotificationArgumentsForSaveSuccess,\n\tgetNotificationArgumentsForSaveFail,\n\tgetNotificationArgumentsForTrashFail,\n} from './utils/notice-builder';\n\n/**\n * Returns an action generator used in signalling that editor has initialized with\n * the specified post object and editor settings.\n *\n * @param {Object} post     Post object.\n * @param {Object} edits    Initial edited attributes object.\n * @param {Array?} template Block Template.\n */\nexport function* setupEditor( post, edits, template ) {\n\tyield resetPost( post );\n\tyield {\n\t\ttype: 'SETUP_EDITOR',\n\t\tpost,\n\t\tedits,\n\t\ttemplate,\n\t};\n\tyield setupEditorState( post );\n\t// Apply a template for new posts only, if exists.\n\tconst isNewPost = post.status === 'auto-draft';\n\tif ( isNewPost && template ) {\n\t\t// In order to ensure maximum of a single parse during setup, edits are\n\t\t// included as part of editor setup action. Assume edited content as\n\t\t// canonical if provided, falling back to post.\n\t\tlet content;\n\t\tif ( has( edits, [ 'content' ] ) ) {\n\t\t\tcontent = edits.content;\n\t\t} else {\n\t\t\tcontent = post.content.raw;\n\t\t}\n\t\tlet blocks = parse( content );\n\t\tblocks = synchronizeBlocksWithTemplate( blocks, template );\n\t\tyield resetEditorBlocks( blocks, {\n\t\t\t__unstableShouldCreateUndoLevel: false,\n\t\t} );\n\t}\n\tif (\n\t\tedits &&\n\t\tObject.keys( edits ).some(\n\t\t\t( key ) =>\n\t\t\t\tedits[ key ] !==\n\t\t\t\t( has( post, [ key, 'raw' ] ) ? post[ key ].raw : post[ key ] )\n\t\t)\n\t) {\n\t\tyield editPost( edits );\n\t}\n}\n\n/**\n * Returns an action object signalling that the editor is being destroyed and\n * that any necessary state or side-effect cleanup should occur.\n *\n * @return {Object} Action object.\n */\nexport function __experimentalTearDownEditor() {\n\treturn { type: 'TEAR_DOWN_EDITOR' };\n}\n\n/**\n * Returns an action object used in signalling that the latest version of the\n * post has been received, either by initialization or save.\n *\n * @param {Object} post Post object.\n *\n * @return {Object} Action object.\n */\nexport function resetPost( post ) {\n\treturn {\n\t\ttype: 'RESET_POST',\n\t\tpost,\n\t};\n}\n\n/**\n * Action for dispatching that a post update request has started.\n *\n * @param {Object} options\n *\n * @return {Object} An action object\n */\nexport function __experimentalRequestPostUpdateStart( options = {} ) {\n\treturn {\n\t\ttype: 'REQUEST_POST_UPDATE_START',\n\t\toptions,\n\t};\n}\n\n/**\n * Action for dispatching that a post update request has finished.\n *\n * @param {Object} options\n *\n * @return {Object} An action object\n */\nexport function __experimentalRequestPostUpdateFinish( options = {} ) {\n\treturn {\n\t\ttype: 'REQUEST_POST_UPDATE_FINISH',\n\t\toptions,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that a patch of updates for the\n * latest version of the post have been received.\n *\n * @return {Object} Action object.\n * @deprecated since Gutenberg 9.7.0.\n */\nexport function updatePost() {\n\tdeprecated( \"wp.data.dispatch( 'core/editor' ).updatePost\", {\n\t\tsince: '5.7',\n\t\talternative: 'Use the core entities store instead',\n\t} );\n\treturn {\n\t\ttype: 'DO_NOTHING',\n\t};\n}\n\n/**\n * Returns an action object used to setup the editor state when first opening\n * an editor.\n *\n * @param {Object} post Post object.\n *\n * @return {Object} Action object.\n */\nexport function setupEditorState( post ) {\n\treturn {\n\t\ttype: 'SETUP_EDITOR_STATE',\n\t\tpost,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that attributes of the post have\n * been edited.\n *\n * @param {Object} edits   Post attributes to edit.\n * @param {Object} options Options for the edit.\n *\n * @yield {Object} Action object or control.\n */\nexport function* editPost( edits, options ) {\n\tconst { id, type } = yield controls.select( STORE_NAME, 'getCurrentPost' );\n\tyield controls.dispatch(\n\t\tcoreStore,\n\t\t'editEntityRecord',\n\t\t'postType',\n\t\ttype,\n\t\tid,\n\t\tedits,\n\t\toptions\n\t);\n}\n\n/**\n * Action generator for saving the current post in the editor.\n *\n * @param {Object} options\n */\nexport function* savePost( options = {} ) {\n\tif ( ! ( yield controls.select( STORE_NAME, 'isEditedPostSaveable' ) ) ) {\n\t\treturn;\n\t}\n\tlet edits = {\n\t\tcontent: yield controls.select( STORE_NAME, 'getEditedPostContent' ),\n\t};\n\tif ( ! options.isAutosave ) {\n\t\tyield controls.dispatch( STORE_NAME, 'editPost', edits, {\n\t\t\tundoIgnore: true,\n\t\t} );\n\t}\n\n\tyield __experimentalRequestPostUpdateStart( options );\n\tconst previousRecord = yield controls.select(\n\t\tSTORE_NAME,\n\t\t'getCurrentPost'\n\t);\n\tedits = {\n\t\tid: previousRecord.id,\n\t\t...( yield controls.select(\n\t\t\tcoreStore,\n\t\t\t'getEntityRecordNonTransientEdits',\n\t\t\t'postType',\n\t\t\tpreviousRecord.type,\n\t\t\tpreviousRecord.id\n\t\t) ),\n\t\t...edits,\n\t};\n\tyield controls.dispatch(\n\t\tcoreStore,\n\t\t'saveEntityRecord',\n\t\t'postType',\n\t\tpreviousRecord.type,\n\t\tedits,\n\t\toptions\n\t);\n\tyield __experimentalRequestPostUpdateFinish( options );\n\n\tconst error = yield controls.select(\n\t\tcoreStore,\n\t\t'getLastEntitySaveError',\n\t\t'postType',\n\t\tpreviousRecord.type,\n\t\tpreviousRecord.id\n\t);\n\tif ( error ) {\n\t\tconst args = getNotificationArgumentsForSaveFail( {\n\t\t\tpost: previousRecord,\n\t\t\tedits,\n\t\t\terror,\n\t\t} );\n\t\tif ( args.length ) {\n\t\t\tyield controls.dispatch(\n\t\t\t\tnoticesStore,\n\t\t\t\t'createErrorNotice',\n\t\t\t\t...args\n\t\t\t);\n\t\t}\n\t} else {\n\t\tconst updatedRecord = yield controls.select(\n\t\t\tSTORE_NAME,\n\t\t\t'getCurrentPost'\n\t\t);\n\t\tconst args = getNotificationArgumentsForSaveSuccess( {\n\t\t\tpreviousPost: previousRecord,\n\t\t\tpost: updatedRecord,\n\t\t\tpostType: yield controls.resolveSelect(\n\t\t\t\tcoreStore,\n\t\t\t\t'getPostType',\n\t\t\t\tupdatedRecord.type\n\t\t\t),\n\t\t\toptions,\n\t\t} );\n\t\tif ( args.length ) {\n\t\t\tyield controls.dispatch(\n\t\t\t\tnoticesStore,\n\t\t\t\t'createSuccessNotice',\n\t\t\t\t...args\n\t\t\t);\n\t\t}\n\t\t// Make sure that any edits after saving create an undo level and are\n\t\t// considered for change detection.\n\t\tif ( ! options.isAutosave ) {\n\t\t\tyield controls.dispatch(\n\t\t\t\tblockEditorStore,\n\t\t\t\t'__unstableMarkLastChangeAsPersistent'\n\t\t\t);\n\t\t}\n\t}\n}\n\n/**\n * Action generator for handling refreshing the current post.\n */\nexport function* refreshPost() {\n\tconst post = yield controls.select( STORE_NAME, 'getCurrentPost' );\n\tconst postTypeSlug = yield controls.select(\n\t\tSTORE_NAME,\n\t\t'getCurrentPostType'\n\t);\n\tconst postType = yield controls.resolveSelect(\n\t\tcoreStore,\n\t\t'getPostType',\n\t\tpostTypeSlug\n\t);\n\tconst newPost = yield apiFetch( {\n\t\t// Timestamp arg allows caller to bypass browser caching, which is\n\t\t// expected for this specific function.\n\t\tpath:\n\t\t\t`/wp/v2/${ postType.rest_base }/${ post.id }` +\n\t\t\t`?context=edit&_timestamp=${ Date.now() }`,\n\t} );\n\tyield controls.dispatch( STORE_NAME, 'resetPost', newPost );\n}\n\n/**\n * Action generator for trashing the current post in the editor.\n */\nexport function* trashPost() {\n\tconst postTypeSlug = yield controls.select(\n\t\tSTORE_NAME,\n\t\t'getCurrentPostType'\n\t);\n\tconst postType = yield controls.resolveSelect(\n\t\tcoreStore,\n\t\t'getPostType',\n\t\tpostTypeSlug\n\t);\n\tyield controls.dispatch(\n\t\tnoticesStore,\n\t\t'removeNotice',\n\t\tTRASH_POST_NOTICE_ID\n\t);\n\ttry {\n\t\tconst post = yield controls.select( STORE_NAME, 'getCurrentPost' );\n\t\tyield apiFetch( {\n\t\t\tpath: `/wp/v2/${ postType.rest_base }/${ post.id }`,\n\t\t\tmethod: 'DELETE',\n\t\t} );\n\n\t\tyield controls.dispatch( STORE_NAME, 'savePost' );\n\t} catch ( error ) {\n\t\tyield controls.dispatch(\n\t\t\tnoticesStore,\n\t\t\t'createErrorNotice',\n\t\t\t...getNotificationArgumentsForTrashFail( { error } )\n\t\t);\n\t}\n}\n\n/**\n * Action generator used in signalling that the post should autosave.  This\n * includes server-side autosaving (default) and client-side (a.k.a. local)\n * autosaving (e.g. on the Web, the post might be committed to Session\n * Storage).\n *\n * @param {Object?} options Extra flags to identify the autosave.\n */\nexport function* autosave( { local = false, ...options } = {} ) {\n\tif ( local ) {\n\t\tconst post = yield controls.select( STORE_NAME, 'getCurrentPost' );\n\t\tconst isPostNew = yield controls.select(\n\t\t\tSTORE_NAME,\n\t\t\t'isEditedPostNew'\n\t\t);\n\t\tconst title = yield controls.select(\n\t\t\tSTORE_NAME,\n\t\t\t'getEditedPostAttribute',\n\t\t\t'title'\n\t\t);\n\t\tconst content = yield controls.select(\n\t\t\tSTORE_NAME,\n\t\t\t'getEditedPostAttribute',\n\t\t\t'content'\n\t\t);\n\t\tconst excerpt = yield controls.select(\n\t\t\tSTORE_NAME,\n\t\t\t'getEditedPostAttribute',\n\t\t\t'excerpt'\n\t\t);\n\t\tyield {\n\t\t\ttype: 'LOCAL_AUTOSAVE_SET',\n\t\t\tpostId: post.id,\n\t\t\tisPostNew,\n\t\t\ttitle,\n\t\t\tcontent,\n\t\t\texcerpt,\n\t\t};\n\t} else {\n\t\tyield controls.dispatch( STORE_NAME, 'savePost', {\n\t\t\tisAutosave: true,\n\t\t\t...options,\n\t\t} );\n\t}\n}\n\n/**\n * Returns an action object used in signalling that undo history should\n * restore last popped state.\n *\n * @yield {Object} Action object.\n */\nexport function* redo() {\n\tyield controls.dispatch( coreStore, 'redo' );\n}\n\n/**\n * Returns an action object used in signalling that undo history should pop.\n *\n * @yield {Object} Action object.\n */\nexport function* undo() {\n\tyield controls.dispatch( coreStore, 'undo' );\n}\n\n/**\n * Returns an action object used in signalling that undo history record should\n * be created.\n *\n * @return {Object} Action object.\n */\nexport function createUndoLevel() {\n\treturn { type: 'CREATE_UNDO_LEVEL' };\n}\n\n/**\n * Returns an action object used to lock the editor.\n *\n * @param {Object} lock Details about the post lock status, user, and nonce.\n *\n * @return {Object} Action object.\n */\nexport function updatePostLock( lock ) {\n\treturn {\n\t\ttype: 'UPDATE_POST_LOCK',\n\t\tlock,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the user has enabled the\n * publish sidebar.\n *\n * @return {Object} Action object\n */\nexport function enablePublishSidebar() {\n\treturn {\n\t\ttype: 'ENABLE_PUBLISH_SIDEBAR',\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the user has disabled the\n * publish sidebar.\n *\n * @return {Object} Action object\n */\nexport function disablePublishSidebar() {\n\treturn {\n\t\ttype: 'DISABLE_PUBLISH_SIDEBAR',\n\t};\n}\n\n/**\n * Returns an action object used to signal that post saving is locked.\n *\n * @param {string} lockName The lock name.\n *\n * @example\n * ```\n * const { subscribe } = wp.data;\n *\n * const initialPostStatus = wp.data.select( 'core/editor' ).getEditedPostAttribute( 'status' );\n *\n * // Only allow publishing posts that are set to a future date.\n * if ( 'publish' !== initialPostStatus ) {\n *\n * \t// Track locking.\n * \tlet locked = false;\n *\n * \t// Watch for the publish event.\n * \tlet unssubscribe = subscribe( () => {\n * \t\tconst currentPostStatus = wp.data.select( 'core/editor' ).getEditedPostAttribute( 'status' );\n * \t\tif ( 'publish' !== currentPostStatus ) {\n *\n * \t\t\t// Compare the post date to the current date, lock the post if the date isn't in the future.\n * \t\t\tconst postDate = new Date( wp.data.select( 'core/editor' ).getEditedPostAttribute( 'date' ) );\n * \t\t\tconst currentDate = new Date();\n * \t\t\tif ( postDate.getTime() <= currentDate.getTime() ) {\n * \t\t\t\tif ( ! locked ) {\n * \t\t\t\t\tlocked = true;\n * \t\t\t\t\twp.data.dispatch( 'core/editor' ).lockPostSaving( 'futurelock' );\n * \t\t\t\t}\n * \t\t\t} else {\n * \t\t\t\tif ( locked ) {\n * \t\t\t\t\tlocked = false;\n * \t\t\t\t\twp.data.dispatch( 'core/editor' ).unlockPostSaving( 'futurelock' );\n * \t\t\t\t}\n * \t\t\t}\n * \t\t}\n * \t} );\n * }\n * ```\n *\n * @return {Object} Action object\n */\nexport function lockPostSaving( lockName ) {\n\treturn {\n\t\ttype: 'LOCK_POST_SAVING',\n\t\tlockName,\n\t};\n}\n\n/**\n * Returns an action object used to signal that post saving is unlocked.\n *\n * @param {string} lockName The lock name.\n *\n * @example\n * ```\n * // Unlock post saving with the lock key `mylock`:\n * wp.data.dispatch( 'core/editor' ).unlockPostSaving( 'mylock' );\n * ```\n *\n * @return {Object} Action object\n */\nexport function unlockPostSaving( lockName ) {\n\treturn {\n\t\ttype: 'UNLOCK_POST_SAVING',\n\t\tlockName,\n\t};\n}\n\n/**\n * Returns an action object used to signal that post autosaving is locked.\n *\n * @param {string} lockName The lock name.\n *\n * @example\n * ```\n * // Lock post autosaving with the lock key `mylock`:\n * wp.data.dispatch( 'core/editor' ).lockPostAutosaving( 'mylock' );\n * ```\n *\n * @return {Object} Action object\n */\nexport function lockPostAutosaving( lockName ) {\n\treturn {\n\t\ttype: 'LOCK_POST_AUTOSAVING',\n\t\tlockName,\n\t};\n}\n\n/**\n * Returns an action object used to signal that post autosaving is unlocked.\n *\n * @param {string} lockName The lock name.\n *\n * @example\n * ```\n * // Unlock post saving with the lock key `mylock`:\n * wp.data.dispatch( 'core/editor' ).unlockPostAutosaving( 'mylock' );\n * ```\n *\n * @return {Object} Action object\n */\nexport function unlockPostAutosaving( lockName ) {\n\treturn {\n\t\ttype: 'UNLOCK_POST_AUTOSAVING',\n\t\tlockName,\n\t};\n}\n\n/**\n * Returns an action object used to signal that the blocks have been updated.\n *\n * @param {Array}   blocks  Block Array.\n * @param {?Object} options Optional options.\n *\n * @yield {Object} Action object\n */\nexport function* resetEditorBlocks( blocks, options = {} ) {\n\tconst { __unstableShouldCreateUndoLevel, selection } = options;\n\tconst edits = { blocks, selection };\n\n\tif ( __unstableShouldCreateUndoLevel !== false ) {\n\t\tconst { id, type } = yield controls.select(\n\t\t\tSTORE_NAME,\n\t\t\t'getCurrentPost'\n\t\t);\n\t\tconst noChange =\n\t\t\t( yield controls.select(\n\t\t\t\tcoreStore,\n\t\t\t\t'getEditedEntityRecord',\n\t\t\t\t'postType',\n\t\t\t\ttype,\n\t\t\t\tid\n\t\t\t) ).blocks === edits.blocks;\n\t\tif ( noChange ) {\n\t\t\treturn yield controls.dispatch(\n\t\t\t\tcoreStore,\n\t\t\t\t'__unstableCreateUndoLevel',\n\t\t\t\t'postType',\n\t\t\t\ttype,\n\t\t\t\tid\n\t\t\t);\n\t\t}\n\n\t\t// We create a new function here on every persistent edit\n\t\t// to make sure the edit makes the post dirty and creates\n\t\t// a new undo level.\n\t\tedits.content = ( { blocks: blocksForSerialization = [] } ) =>\n\t\t\t__unstableSerializeAndClean( blocksForSerialization );\n\t}\n\tyield* editPost( edits );\n}\n\n/*\n * Returns an action object used in signalling that the post editor settings have been updated.\n *\n * @param {Object} settings Updated settings\n *\n * @return {Object} Action object\n */\nexport function updateEditorSettings( settings ) {\n\treturn {\n\t\ttype: 'UPDATE_EDITOR_SETTINGS',\n\t\tsettings,\n\t};\n}\n\n/**\n * Backward compatibility\n */\n\nconst getBlockEditorAction = ( name ) =>\n\tfunction* ( ...args ) {\n\t\tdeprecated( \"`wp.data.dispatch( 'core/editor' ).\" + name + '`', {\n\t\t\tsince: '5.3',\n\t\t\talternative:\n\t\t\t\t\"`wp.data.dispatch( 'core/block-editor' ).\" + name + '`',\n\t\t} );\n\t\tyield controls.dispatch( blockEditorStore, name, ...args );\n\t};\n\n/**\n * @see resetBlocks in core/block-editor store.\n */\nexport const resetBlocks = getBlockEditorAction( 'resetBlocks' );\n\n/**\n * @see receiveBlocks in core/block-editor store.\n */\nexport const receiveBlocks = getBlockEditorAction( 'receiveBlocks' );\n\n/**\n * @see updateBlock in core/block-editor store.\n */\nexport const updateBlock = getBlockEditorAction( 'updateBlock' );\n\n/**\n * @see updateBlockAttributes in core/block-editor store.\n */\nexport const updateBlockAttributes = getBlockEditorAction(\n\t'updateBlockAttributes'\n);\n\n/**\n * @see selectBlock in core/block-editor store.\n */\nexport const selectBlock = getBlockEditorAction( 'selectBlock' );\n\n/**\n * @see startMultiSelect in core/block-editor store.\n */\nexport const startMultiSelect = getBlockEditorAction( 'startMultiSelect' );\n\n/**\n * @see stopMultiSelect in core/block-editor store.\n */\nexport const stopMultiSelect = getBlockEditorAction( 'stopMultiSelect' );\n\n/**\n * @see multiSelect in core/block-editor store.\n */\nexport const multiSelect = getBlockEditorAction( 'multiSelect' );\n\n/**\n * @see clearSelectedBlock in core/block-editor store.\n */\nexport const clearSelectedBlock = getBlockEditorAction( 'clearSelectedBlock' );\n\n/**\n * @see toggleSelection in core/block-editor store.\n */\nexport const toggleSelection = getBlockEditorAction( 'toggleSelection' );\n\n/**\n * @see replaceBlocks in core/block-editor store.\n */\nexport const replaceBlocks = getBlockEditorAction( 'replaceBlocks' );\n\n/**\n * @see replaceBlock in core/block-editor store.\n */\nexport const replaceBlock = getBlockEditorAction( 'replaceBlock' );\n\n/**\n * @see moveBlocksDown in core/block-editor store.\n */\nexport const moveBlocksDown = getBlockEditorAction( 'moveBlocksDown' );\n\n/**\n * @see moveBlocksUp in core/block-editor store.\n */\nexport const moveBlocksUp = getBlockEditorAction( 'moveBlocksUp' );\n\n/**\n * @see moveBlockToPosition in core/block-editor store.\n */\nexport const moveBlockToPosition = getBlockEditorAction(\n\t'moveBlockToPosition'\n);\n\n/**\n * @see insertBlock in core/block-editor store.\n */\nexport const insertBlock = getBlockEditorAction( 'insertBlock' );\n\n/**\n * @see insertBlocks in core/block-editor store.\n */\nexport const insertBlocks = getBlockEditorAction( 'insertBlocks' );\n\n/**\n * @see showInsertionPoint in core/block-editor store.\n */\nexport const showInsertionPoint = getBlockEditorAction( 'showInsertionPoint' );\n\n/**\n * @see hideInsertionPoint in core/block-editor store.\n */\nexport const hideInsertionPoint = getBlockEditorAction( 'hideInsertionPoint' );\n\n/**\n * @see setTemplateValidity in core/block-editor store.\n */\nexport const setTemplateValidity = getBlockEditorAction(\n\t'setTemplateValidity'\n);\n\n/**\n * @see synchronizeTemplate in core/block-editor store.\n */\nexport const synchronizeTemplate = getBlockEditorAction(\n\t'synchronizeTemplate'\n);\n\n/**\n * @see mergeBlocks in core/block-editor store.\n */\nexport const mergeBlocks = getBlockEditorAction( 'mergeBlocks' );\n\n/**\n * @see removeBlocks in core/block-editor store.\n */\nexport const removeBlocks = getBlockEditorAction( 'removeBlocks' );\n\n/**\n * @see removeBlock in core/block-editor store.\n */\nexport const removeBlock = getBlockEditorAction( 'removeBlock' );\n\n/**\n * @see toggleBlockMode in core/block-editor store.\n */\nexport const toggleBlockMode = getBlockEditorAction( 'toggleBlockMode' );\n\n/**\n * @see startTyping in core/block-editor store.\n */\nexport const startTyping = getBlockEditorAction( 'startTyping' );\n\n/**\n * @see stopTyping in core/block-editor store.\n */\nexport const stopTyping = getBlockEditorAction( 'stopTyping' );\n\n/**\n * @see enterFormattedText in core/block-editor store.\n */\nexport const enterFormattedText = getBlockEditorAction( 'enterFormattedText' );\n\n/**\n * @see exitFormattedText in core/block-editor store.\n */\nexport const exitFormattedText = getBlockEditorAction( 'exitFormattedText' );\n\n/**\n * @see insertDefaultBlock in core/block-editor store.\n */\nexport const insertDefaultBlock = getBlockEditorAction( 'insertDefaultBlock' );\n\n/**\n * @see updateBlockListSettings in core/block-editor store.\n */\nexport const updateBlockListSettings = getBlockEditorAction(\n\t'updateBlockListSettings'\n);\n"]}
{"version":3,"sources":["@wordpress/editor/src/store/selectors.js"],"names":["find","get","has","isString","includes","some","createSelector","getFreeformContentHandlerName","getDefaultBlockName","__unstableSerializeAndClean","isInTheFuture","getDate","addQueryArgs","createRegistrySelector","deprecated","Platform","layout","store","blockEditorStore","coreStore","PREFERENCES_DEFAULTS","EDIT_MERGE_PROPERTIES","PERMALINK_POSTNAME_REGEX","ONE_MINUTE_IN_MS","AUTOSAVE_PROPERTIES","getPostRawValue","cleanForSlug","getTemplatePartIcon","EMPTY_OBJECT","EMPTY_ARRAY","hasEditorUndo","select","hasUndo","hasEditorRedo","hasRedo","isEditedPostNew","state","getCurrentPost","status","hasChangedContent","edits","getPostEdits","isEditedPostDirty","postType","getCurrentPostType","postId","getCurrentPostId","hasEditsForEntityRecord","hasNonPostEntityChanges","dirtyEntityRecords","__experimentalGetDirtyEntityRecords","type","id","entityRecord","kind","name","key","isCleanNewPost","post","getRawEntityRecord","getCurrentPostRevisionsCount","getCurrentPostLastRevisionId","getEntityRecordEdits","getReferenceByDistinctEdits","since","alternative","getCurrentPostAttribute","attributeName","hasOwnProperty","getNestedEditedPostProperty","getEditedPostAttribute","getEditedPostContent","getAutosaveAttribute","currentUserId","getCurrentUser","autosave","getAutosave","getEditedPostVisibility","password","isCurrentPostPending","isCurrentPostPublished","currentPost","indexOf","Date","Number","date","isCurrentPostScheduled","isEditedPostPublishable","isEditedPostSaveable","isSavingPost","isEditedPostEmpty","OS","blocks","getEditorBlocks","length","blockName","isEditedPostAutosaveable","isPostAutosavingLocked","hasFetchedAutosave","hasFetchedAutosaves","field","isEditedPostBeingScheduled","checkedDate","isEditedPostDateFloating","modified","isSavingEntityRecord","isSavingNonPostEntityChanges","entitiesBeingSaved","__experimentalGetEntitiesBeingSaved","didPostSaveRequestSucceed","getLastEntitySaveError","didPostSaveRequestFail","isAutosavingPost","saving","isPreviewingPost","getEditedPostPreviewLink","pending","previewLink","preview","featuredImageId","_thumbnail_id","getSuggestedPostFormat","provider","attributes","providerNameSlug","record","getEditedEntityRecord","content","isPublishingPost","isPermalinkEditable","permalinkTemplate","test","getPermalink","permalinkParts","getPermalinkParts","prefix","postName","suffix","getEditedPostSlug","split","isPostLocked","postLock","isLocked","isPostSavingLocked","Object","keys","postSavingLock","postAutosavingLock","isPostLockTakeover","isTakeover","getPostLockUser","user","getActivePostLock","activePostLock","canUserUseUnfilteredHTML","isPublishSidebarEnabled","preferences","getEditorSelectionStart","plugin","selectionStart","getEditorSelectionEnd","selectionEnd","getEditorSelection","__unstableIsEditorReady","isReady","getEditorSettings","editorSettings","getStateBeforeOptimisticTransaction","hint","inSomeHistory","getBlockEditorSelector","args","getBlockName","isBlockValid","getBlockAttributes","getBlock","getBlocks","getClientIdsOfDescendants","getClientIdsWithDescendants","getGlobalBlockCount","getBlocksByClientId","getBlockCount","getBlockSelectionStart","getBlockSelectionEnd","getSelectedBlockCount","hasSelectedBlock","getSelectedBlockClientId","getSelectedBlock","getBlockRootClientId","getBlockHierarchyRootClientId","getAdjacentBlockClientId","getPreviousBlockClientId","getNextBlockClientId","getSelectedBlocksInitialCaretPosition","getMultiSelectedBlockClientIds","getMultiSelectedBlocks","getFirstMultiSelectedBlockClientId","getLastMultiSelectedBlockClientId","isFirstMultiSelectedBlock","isBlockMultiSelected","isAncestorMultiSelected","getMultiSelectedBlocksStartClientId","getMultiSelectedBlocksEndClientId","getBlockOrder","getBlockIndex","isBlockSelected","hasSelectedInnerBlock","isBlockWithinSelection","hasMultiSelection","isMultiSelecting","isSelectionEnabled","getBlockMode","isTyping","isCaretWithinFormattedText","getBlockInsertionPoint","isBlockInsertionPointVisible","isValidTemplate","getTemplate","getTemplateLock","canInsertBlockType","getInserterItems","hasInserterItems","getBlockListSettings","__experimentalGetDefaultTemplateTypes","defaultTemplateTypes","__experimentalGetDefaultTemplatePartAreas","areas","defaultTemplatePartAreas","map","item","icon","__experimentalGetDefaultTemplateType","slug","__experimentalGetTemplateInfo","template","excerpt","title","area","defaultTitle","description","defaultDescription","templateTitle","rendered","templateDescription","raw","templateIcon","getPostTypeLabel","currentPostType","getPostType","labels","singular_name"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { find, get, has, isString, includes, some } from 'lodash';\nimport createSelector from 'rememo';\n\n/**\n * WordPress dependencies\n */\nimport {\n\tgetFreeformContentHandlerName,\n\tgetDefaultBlockName,\n\t__unstableSerializeAndClean,\n} from '@wordpress/blocks';\nimport { isInTheFuture, getDate } from '@wordpress/date';\nimport { addQueryArgs } from '@wordpress/url';\nimport { createRegistrySelector } from '@wordpress/data';\nimport deprecated from '@wordpress/deprecated';\nimport { Platform } from '@wordpress/element';\nimport { layout } from '@wordpress/icons';\nimport { store as blockEditorStore } from '@wordpress/block-editor';\nimport { store as coreStore } from '@wordpress/core-data';\n\n/**\n * Internal dependencies\n */\nimport { PREFERENCES_DEFAULTS } from './defaults';\nimport {\n\tEDIT_MERGE_PROPERTIES,\n\tPERMALINK_POSTNAME_REGEX,\n\tONE_MINUTE_IN_MS,\n\tAUTOSAVE_PROPERTIES,\n} from './constants';\nimport { getPostRawValue } from './reducer';\nimport { cleanForSlug } from '../utils/url';\nimport { getTemplatePartIcon } from '../utils/get-template-part-icon';\n\n/**\n * Shared reference to an empty object for cases where it is important to avoid\n * returning a new object reference on every invocation, as in a connected or\n * other pure component which performs `shouldComponentUpdate` check on props.\n * This should be used as a last resort, since the normalized data should be\n * maintained by the reducer result in state.\n */\nconst EMPTY_OBJECT = {};\n\n/**\n * Shared reference to an empty array for cases where it is important to avoid\n * returning a new array reference on every invocation, as in a connected or\n * other pure component which performs `shouldComponentUpdate` check on props.\n * This should be used as a last resort, since the normalized data should be\n * maintained by the reducer result in state.\n */\nconst EMPTY_ARRAY = [];\n\n/**\n * Returns true if any past editor history snapshots exist, or false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether undo history exists.\n */\nexport const hasEditorUndo = createRegistrySelector( ( select ) => () => {\n\treturn select( coreStore ).hasUndo();\n} );\n\n/**\n * Returns true if any future editor history snapshots exist, or false\n * otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether redo history exists.\n */\nexport const hasEditorRedo = createRegistrySelector( ( select ) => () => {\n\treturn select( coreStore ).hasRedo();\n} );\n\n/**\n * Returns true if the currently edited post is yet to be saved, or false if\n * the post has been saved.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the post is new.\n */\nexport function isEditedPostNew( state ) {\n\treturn getCurrentPost( state ).status === 'auto-draft';\n}\n\n/**\n * Returns true if content includes unsaved changes, or false otherwise.\n *\n * @param {Object} state Editor state.\n *\n * @return {boolean} Whether content includes unsaved changes.\n */\nexport function hasChangedContent( state ) {\n\tconst edits = getPostEdits( state );\n\n\treturn (\n\t\t'blocks' in edits ||\n\t\t// `edits` is intended to contain only values which are different from\n\t\t// the saved post, so the mere presence of a property is an indicator\n\t\t// that the value is different than what is known to be saved. While\n\t\t// content in Visual mode is represented by the blocks state, in Text\n\t\t// mode it is tracked by `edits.content`.\n\t\t'content' in edits\n\t);\n}\n\n/**\n * Returns true if there are unsaved values for the current edit session, or\n * false if the editing state matches the saved or new post.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether unsaved values exist.\n */\nexport const isEditedPostDirty = createRegistrySelector(\n\t( select ) => ( state ) => {\n\t\t// Edits should contain only fields which differ from the saved post (reset\n\t\t// at initial load and save complete). Thus, a non-empty edits state can be\n\t\t// inferred to contain unsaved values.\n\t\tconst postType = getCurrentPostType( state );\n\t\tconst postId = getCurrentPostId( state );\n\t\tif (\n\t\t\tselect( coreStore ).hasEditsForEntityRecord(\n\t\t\t\t'postType',\n\t\t\t\tpostType,\n\t\t\t\tpostId\n\t\t\t)\n\t\t) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n);\n\n/**\n * Returns true if there are unsaved edits for entities other than\n * the editor's post, and false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether there are edits or not.\n */\nexport const hasNonPostEntityChanges = createRegistrySelector(\n\t( select ) => ( state ) => {\n\t\tconst dirtyEntityRecords = select(\n\t\t\tcoreStore\n\t\t).__experimentalGetDirtyEntityRecords();\n\t\tconst { type, id } = getCurrentPost( state );\n\t\treturn some(\n\t\t\tdirtyEntityRecords,\n\t\t\t( entityRecord ) =>\n\t\t\t\tentityRecord.kind !== 'postType' ||\n\t\t\t\tentityRecord.name !== type ||\n\t\t\t\tentityRecord.key !== id\n\t\t);\n\t}\n);\n\n/**\n * Returns true if there are no unsaved values for the current edit session and\n * if the currently edited post is new (has never been saved before).\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether new post and unsaved values exist.\n */\nexport function isCleanNewPost( state ) {\n\treturn ! isEditedPostDirty( state ) && isEditedPostNew( state );\n}\n\n/**\n * Returns the post currently being edited in its last known saved state, not\n * including unsaved edits. Returns an object containing relevant default post\n * values if the post has not yet been saved.\n *\n * @param {Object} state Global application state.\n *\n * @return {Object} Post object.\n */\nexport const getCurrentPost = createRegistrySelector(\n\t( select ) => ( state ) => {\n\t\tconst postId = getCurrentPostId( state );\n\t\tconst postType = getCurrentPostType( state );\n\n\t\tconst post = select( coreStore ).getRawEntityRecord(\n\t\t\t'postType',\n\t\t\tpostType,\n\t\t\tpostId\n\t\t);\n\t\tif ( post ) {\n\t\t\treturn post;\n\t\t}\n\n\t\t// This exists for compatibility with the previous selector behavior\n\t\t// which would guarantee an object return based on the editor reducer's\n\t\t// default empty object state.\n\t\treturn EMPTY_OBJECT;\n\t}\n);\n\n/**\n * Returns the post type of the post currently being edited.\n *\n * @param {Object} state Global application state.\n *\n * @return {string} Post type.\n */\nexport function getCurrentPostType( state ) {\n\treturn state.postType;\n}\n\n/**\n * Returns the ID of the post currently being edited, or null if the post has\n * not yet been saved.\n *\n * @param {Object} state Global application state.\n *\n * @return {?number} ID of current post.\n */\nexport function getCurrentPostId( state ) {\n\treturn state.postId;\n}\n\n/**\n * Returns the number of revisions of the post currently being edited.\n *\n * @param {Object} state Global application state.\n *\n * @return {number} Number of revisions.\n */\nexport function getCurrentPostRevisionsCount( state ) {\n\treturn get(\n\t\tgetCurrentPost( state ),\n\t\t[ '_links', 'version-history', 0, 'count' ],\n\t\t0\n\t);\n}\n\n/**\n * Returns the last revision ID of the post currently being edited,\n * or null if the post has no revisions.\n *\n * @param {Object} state Global application state.\n *\n * @return {?number} ID of the last revision.\n */\nexport function getCurrentPostLastRevisionId( state ) {\n\treturn get(\n\t\tgetCurrentPost( state ),\n\t\t[ '_links', 'predecessor-version', 0, 'id' ],\n\t\tnull\n\t);\n}\n\n/**\n * Returns any post values which have been changed in the editor but not yet\n * been saved.\n *\n * @param {Object} state Global application state.\n *\n * @return {Object} Object of key value pairs comprising unsaved edits.\n */\nexport const getPostEdits = createRegistrySelector( ( select ) => ( state ) => {\n\tconst postType = getCurrentPostType( state );\n\tconst postId = getCurrentPostId( state );\n\treturn (\n\t\tselect( coreStore ).getEntityRecordEdits(\n\t\t\t'postType',\n\t\t\tpostType,\n\t\t\tpostId\n\t\t) || EMPTY_OBJECT\n\t);\n} );\n\n/**\n * Returns a new reference when edited values have changed. This is useful in\n * inferring where an edit has been made between states by comparison of the\n * return values using strict equality.\n *\n * @deprecated since Gutenberg 6.5.0.\n *\n * @example\n *\n * ```\n * const hasEditOccurred = (\n *    getReferenceByDistinctEdits( beforeState ) !==\n *    getReferenceByDistinctEdits( afterState )\n * );\n * ```\n *\n * @param {Object} state Editor state.\n *\n * @return {*} A value whose reference will change only when an edit occurs.\n */\nexport const getReferenceByDistinctEdits = createRegistrySelector(\n\t( select ) => (/* state */) => {\n\t\tdeprecated(\n\t\t\t\"`wp.data.select( 'core/editor' ).getReferenceByDistinctEdits`\",\n\t\t\t{\n\t\t\t\tsince: '5.4',\n\t\t\t\talternative:\n\t\t\t\t\t\"`wp.data.select( 'core' ).getReferenceByDistinctEdits`\",\n\t\t\t}\n\t\t);\n\n\t\treturn select( coreStore ).getReferenceByDistinctEdits();\n\t}\n);\n\n/**\n * Returns an attribute value of the saved post.\n *\n * @param {Object} state         Global application state.\n * @param {string} attributeName Post attribute name.\n *\n * @return {*} Post attribute value.\n */\nexport function getCurrentPostAttribute( state, attributeName ) {\n\tswitch ( attributeName ) {\n\t\tcase 'type':\n\t\t\treturn getCurrentPostType( state );\n\n\t\tcase 'id':\n\t\t\treturn getCurrentPostId( state );\n\n\t\tdefault:\n\t\t\tconst post = getCurrentPost( state );\n\t\t\tif ( ! post.hasOwnProperty( attributeName ) ) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\treturn getPostRawValue( post[ attributeName ] );\n\t}\n}\n\n/**\n * Returns a single attribute of the post being edited, preferring the unsaved\n * edit if one exists, but merging with the attribute value for the last known\n * saved state of the post (this is needed for some nested attributes like meta).\n *\n * @param {Object} state         Global application state.\n * @param {string} attributeName Post attribute name.\n *\n * @return {*} Post attribute value.\n */\nconst getNestedEditedPostProperty = ( state, attributeName ) => {\n\tconst edits = getPostEdits( state );\n\tif ( ! edits.hasOwnProperty( attributeName ) ) {\n\t\treturn getCurrentPostAttribute( state, attributeName );\n\t}\n\n\treturn {\n\t\t...getCurrentPostAttribute( state, attributeName ),\n\t\t...edits[ attributeName ],\n\t};\n};\n\n/**\n * Returns a single attribute of the post being edited, preferring the unsaved\n * edit if one exists, but falling back to the attribute for the last known\n * saved state of the post.\n *\n * @param {Object} state         Global application state.\n * @param {string} attributeName Post attribute name.\n *\n * @return {*} Post attribute value.\n */\nexport function getEditedPostAttribute( state, attributeName ) {\n\t// Special cases\n\tswitch ( attributeName ) {\n\t\tcase 'content':\n\t\t\treturn getEditedPostContent( state );\n\t}\n\n\t// Fall back to saved post value if not edited.\n\tconst edits = getPostEdits( state );\n\tif ( ! edits.hasOwnProperty( attributeName ) ) {\n\t\treturn getCurrentPostAttribute( state, attributeName );\n\t}\n\n\t// Merge properties are objects which contain only the patch edit in state,\n\t// and thus must be merged with the current post attribute.\n\tif ( EDIT_MERGE_PROPERTIES.has( attributeName ) ) {\n\t\treturn getNestedEditedPostProperty( state, attributeName );\n\t}\n\n\treturn edits[ attributeName ];\n}\n\n/**\n * Returns an attribute value of the current autosave revision for a post, or\n * null if there is no autosave for the post.\n *\n * @deprecated since 5.6. Callers should use the `getAutosave( postType, postId, userId )` selector\n * \t\t\t   from the '@wordpress/core-data' package and access properties on the returned\n * \t\t\t   autosave object using getPostRawValue.\n *\n * @param {Object} state         Global application state.\n * @param {string} attributeName Autosave attribute name.\n *\n * @return {*} Autosave attribute value.\n */\nexport const getAutosaveAttribute = createRegistrySelector(\n\t( select ) => ( state, attributeName ) => {\n\t\tif (\n\t\t\t! includes( AUTOSAVE_PROPERTIES, attributeName ) &&\n\t\t\tattributeName !== 'preview_link'\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst postType = getCurrentPostType( state );\n\t\tconst postId = getCurrentPostId( state );\n\t\tconst currentUserId = get( select( coreStore ).getCurrentUser(), [\n\t\t\t'id',\n\t\t] );\n\t\tconst autosave = select( coreStore ).getAutosave(\n\t\t\tpostType,\n\t\t\tpostId,\n\t\t\tcurrentUserId\n\t\t);\n\n\t\tif ( autosave ) {\n\t\t\treturn getPostRawValue( autosave[ attributeName ] );\n\t\t}\n\t}\n);\n\n/**\n * Returns the current visibility of the post being edited, preferring the\n * unsaved value if different than the saved post. The return value is one of\n * \"private\", \"password\", or \"public\".\n *\n * @param {Object} state Global application state.\n *\n * @return {string} Post visibility.\n */\nexport function getEditedPostVisibility( state ) {\n\tconst status = getEditedPostAttribute( state, 'status' );\n\tif ( status === 'private' ) {\n\t\treturn 'private';\n\t}\n\n\tconst password = getEditedPostAttribute( state, 'password' );\n\tif ( password ) {\n\t\treturn 'password';\n\t}\n\n\treturn 'public';\n}\n\n/**\n * Returns true if post is pending review.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether current post is pending review.\n */\nexport function isCurrentPostPending( state ) {\n\treturn getCurrentPost( state ).status === 'pending';\n}\n\n/**\n * Return true if the current post has already been published.\n *\n * @param {Object}  state       Global application state.\n * @param {Object?} currentPost Explicit current post for bypassing registry selector.\n *\n * @return {boolean} Whether the post has been published.\n */\nexport function isCurrentPostPublished( state, currentPost ) {\n\tconst post = currentPost || getCurrentPost( state );\n\n\treturn (\n\t\t[ 'publish', 'private' ].indexOf( post.status ) !== -1 ||\n\t\t( post.status === 'future' &&\n\t\t\t! isInTheFuture(\n\t\t\t\tnew Date( Number( getDate( post.date ) ) - ONE_MINUTE_IN_MS )\n\t\t\t) )\n\t);\n}\n\n/**\n * Returns true if post is already scheduled.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether current post is scheduled to be posted.\n */\nexport function isCurrentPostScheduled( state ) {\n\treturn (\n\t\tgetCurrentPost( state ).status === 'future' &&\n\t\t! isCurrentPostPublished( state )\n\t);\n}\n\n/**\n * Return true if the post being edited can be published.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the post can been published.\n */\nexport function isEditedPostPublishable( state ) {\n\tconst post = getCurrentPost( state );\n\n\t// TODO: Post being publishable should be superset of condition of post\n\t// being saveable. Currently this restriction is imposed at UI.\n\t//\n\t//  See: <PostPublishButton /> (`isButtonEnabled` assigned by `isSaveable`)\n\n\treturn (\n\t\tisEditedPostDirty( state ) ||\n\t\t[ 'publish', 'private', 'future' ].indexOf( post.status ) === -1\n\t);\n}\n\n/**\n * Returns true if the post can be saved, or false otherwise. A post must\n * contain a title, an excerpt, or non-empty content to be valid for save.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the post can be saved.\n */\nexport function isEditedPostSaveable( state ) {\n\tif ( isSavingPost( state ) ) {\n\t\treturn false;\n\t}\n\n\t// TODO: Post should not be saveable if not dirty. Cannot be added here at\n\t// this time since posts where meta boxes are present can be saved even if\n\t// the post is not dirty. Currently this restriction is imposed at UI, but\n\t// should be moved here.\n\t//\n\t//  See: `isEditedPostPublishable` (includes `isEditedPostDirty` condition)\n\t//  See: <PostSavedState /> (`forceIsDirty` prop)\n\t//  See: <PostPublishButton /> (`forceIsDirty` prop)\n\t//  See: https://github.com/WordPress/gutenberg/pull/4184\n\n\treturn (\n\t\t!! getEditedPostAttribute( state, 'title' ) ||\n\t\t!! getEditedPostAttribute( state, 'excerpt' ) ||\n\t\t! isEditedPostEmpty( state ) ||\n\t\tPlatform.OS === 'native'\n\t);\n}\n\n/**\n * Returns true if the edited post has content. A post has content if it has at\n * least one saveable block or otherwise has a non-empty content property\n * assigned.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether post has content.\n */\nexport function isEditedPostEmpty( state ) {\n\t// While the condition of truthy content string is sufficient to determine\n\t// emptiness, testing saveable blocks length is a trivial operation. Since\n\t// this function can be called frequently, optimize for the fast case as a\n\t// condition of the mere existence of blocks. Note that the value of edited\n\t// content takes precedent over block content, and must fall through to the\n\t// default logic.\n\tconst blocks = getEditorBlocks( state );\n\n\tif ( blocks.length ) {\n\t\t// Pierce the abstraction of the serializer in knowing that blocks are\n\t\t// joined with with newlines such that even if every individual block\n\t\t// produces an empty save result, the serialized content is non-empty.\n\t\tif ( blocks.length > 1 ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// There are two conditions under which the optimization cannot be\n\t\t// assumed, and a fallthrough to getEditedPostContent must occur:\n\t\t//\n\t\t// 1. getBlocksForSerialization has special treatment in omitting a\n\t\t//    single unmodified default block.\n\t\t// 2. Comment delimiters are omitted for a freeform or unregistered\n\t\t//    block in its serialization. The freeform block specifically may\n\t\t//    produce an empty string in its saved output.\n\t\t//\n\t\t// For all other content, the single block is assumed to make a post\n\t\t// non-empty, if only by virtue of its own comment delimiters.\n\t\tconst blockName = blocks[ 0 ].name;\n\t\tif (\n\t\t\tblockName !== getDefaultBlockName() &&\n\t\t\tblockName !== getFreeformContentHandlerName()\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn ! getEditedPostContent( state );\n}\n\n/**\n * Returns true if the post can be autosaved, or false otherwise.\n *\n * @param {Object} state    Global application state.\n * @param {Object} autosave A raw autosave object from the REST API.\n *\n * @return {boolean} Whether the post can be autosaved.\n */\nexport const isEditedPostAutosaveable = createRegistrySelector(\n\t( select ) => ( state ) => {\n\t\t// A post must contain a title, an excerpt, or non-empty content to be valid for autosaving.\n\t\tif ( ! isEditedPostSaveable( state ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// A post is not autosavable when there is a post autosave lock.\n\t\tif ( isPostAutosavingLocked( state ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst postType = getCurrentPostType( state );\n\t\tconst postId = getCurrentPostId( state );\n\t\tconst hasFetchedAutosave = select( coreStore ).hasFetchedAutosaves(\n\t\t\tpostType,\n\t\t\tpostId\n\t\t);\n\t\tconst currentUserId = get( select( coreStore ).getCurrentUser(), [\n\t\t\t'id',\n\t\t] );\n\n\t\t// Disable reason - this line causes the side-effect of fetching the autosave\n\t\t// via a resolver, moving below the return would result in the autosave never\n\t\t// being fetched.\n\t\t// eslint-disable-next-line @wordpress/no-unused-vars-before-return\n\t\tconst autosave = select( coreStore ).getAutosave(\n\t\t\tpostType,\n\t\t\tpostId,\n\t\t\tcurrentUserId\n\t\t);\n\n\t\t// If any existing autosaves have not yet been fetched, this function is\n\t\t// unable to determine if the post is autosaveable, so return false.\n\t\tif ( ! hasFetchedAutosave ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// If we don't already have an autosave, the post is autosaveable.\n\t\tif ( ! autosave ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// To avoid an expensive content serialization, use the content dirtiness\n\t\t// flag in place of content field comparison against the known autosave.\n\t\t// This is not strictly accurate, and relies on a tolerance toward autosave\n\t\t// request failures for unnecessary saves.\n\t\tif ( hasChangedContent( state ) ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// If the title or excerpt has changed, the post is autosaveable.\n\t\treturn [ 'title', 'excerpt' ].some(\n\t\t\t( field ) =>\n\t\t\t\tgetPostRawValue( autosave[ field ] ) !==\n\t\t\t\tgetEditedPostAttribute( state, field )\n\t\t);\n\t}\n);\n\n/**\n * Return true if the post being edited is being scheduled. Preferring the\n * unsaved status values.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the post has been published.\n */\nexport function isEditedPostBeingScheduled( state ) {\n\tconst date = getEditedPostAttribute( state, 'date' );\n\t// Offset the date by one minute (network latency)\n\tconst checkedDate = new Date(\n\t\tNumber( getDate( date ) ) - ONE_MINUTE_IN_MS\n\t);\n\n\treturn isInTheFuture( checkedDate );\n}\n\n/**\n * Returns whether the current post should be considered to have a \"floating\"\n * date (i.e. that it would publish \"Immediately\" rather than at a set time).\n *\n * Unlike in the PHP backend, the REST API returns a full date string for posts\n * where the 0000-00-00T00:00:00 placeholder is present in the database. To\n * infer that a post is set to publish \"Immediately\" we check whether the date\n * and modified date are the same.\n *\n * @param {Object} state Editor state.\n *\n * @return {boolean} Whether the edited post has a floating date value.\n */\nexport function isEditedPostDateFloating( state ) {\n\tconst date = getEditedPostAttribute( state, 'date' );\n\tconst modified = getEditedPostAttribute( state, 'modified' );\n\n\t// This should be the status of the persisted post\n\t// It shouldn't use the \"edited\" status otherwise it breaks the\n\t// inferred post data floating status\n\t// See https://github.com/WordPress/gutenberg/issues/28083\n\tconst status = getCurrentPost( state ).status;\n\tif (\n\t\tstatus === 'draft' ||\n\t\tstatus === 'auto-draft' ||\n\t\tstatus === 'pending'\n\t) {\n\t\treturn date === modified || date === null;\n\t}\n\treturn false;\n}\n\n/**\n * Returns true if the post is currently being saved, or false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether post is being saved.\n */\nexport const isSavingPost = createRegistrySelector( ( select ) => ( state ) => {\n\tconst postType = getCurrentPostType( state );\n\tconst postId = getCurrentPostId( state );\n\treturn select( coreStore ).isSavingEntityRecord(\n\t\t'postType',\n\t\tpostType,\n\t\tpostId\n\t);\n} );\n\n/**\n * Returns true if non-post entities are currently being saved, or false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether non-post entities are being saved.\n */\nexport const isSavingNonPostEntityChanges = createRegistrySelector(\n\t( select ) => ( state ) => {\n\t\tconst entitiesBeingSaved = select(\n\t\t\tcoreStore\n\t\t).__experimentalGetEntitiesBeingSaved();\n\t\tconst { type, id } = getCurrentPost( state );\n\t\treturn some(\n\t\t\tentitiesBeingSaved,\n\t\t\t( entityRecord ) =>\n\t\t\t\tentityRecord.kind !== 'postType' ||\n\t\t\t\tentityRecord.name !== type ||\n\t\t\t\tentityRecord.key !== id\n\t\t);\n\t}\n);\n\n/**\n * Returns true if a previous post save was attempted successfully, or false\n * otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the post was saved successfully.\n */\nexport const didPostSaveRequestSucceed = createRegistrySelector(\n\t( select ) => ( state ) => {\n\t\tconst postType = getCurrentPostType( state );\n\t\tconst postId = getCurrentPostId( state );\n\t\treturn ! select( coreStore ).getLastEntitySaveError(\n\t\t\t'postType',\n\t\t\tpostType,\n\t\t\tpostId\n\t\t);\n\t}\n);\n\n/**\n * Returns true if a previous post save was attempted but failed, or false\n * otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the post save failed.\n */\nexport const didPostSaveRequestFail = createRegistrySelector(\n\t( select ) => ( state ) => {\n\t\tconst postType = getCurrentPostType( state );\n\t\tconst postId = getCurrentPostId( state );\n\t\treturn !! select( coreStore ).getLastEntitySaveError(\n\t\t\t'postType',\n\t\t\tpostType,\n\t\t\tpostId\n\t\t);\n\t}\n);\n\n/**\n * Returns true if the post is autosaving, or false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the post is autosaving.\n */\nexport function isAutosavingPost( state ) {\n\tif ( ! isSavingPost( state ) ) {\n\t\treturn false;\n\t}\n\treturn !! get( state.saving, [ 'options', 'isAutosave' ] );\n}\n\n/**\n * Returns true if the post is being previewed, or false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the post is being previewed.\n */\nexport function isPreviewingPost( state ) {\n\tif ( ! isSavingPost( state ) ) {\n\t\treturn false;\n\t}\n\treturn !! get( state.saving, [ 'options', 'isPreview' ] );\n}\n\n/**\n * Returns the post preview link\n *\n * @param {Object} state Global application state.\n *\n * @return {string?} Preview Link.\n */\nexport function getEditedPostPreviewLink( state ) {\n\tif ( state.saving.pending || isSavingPost( state ) ) {\n\t\treturn;\n\t}\n\n\tlet previewLink = getAutosaveAttribute( state, 'preview_link' );\n\tif ( ! previewLink ) {\n\t\tpreviewLink = getEditedPostAttribute( state, 'link' );\n\t\tif ( previewLink ) {\n\t\t\tpreviewLink = addQueryArgs( previewLink, { preview: true } );\n\t\t}\n\t}\n\tconst featuredImageId = getEditedPostAttribute( state, 'featured_media' );\n\n\tif ( previewLink && featuredImageId ) {\n\t\treturn addQueryArgs( previewLink, { _thumbnail_id: featuredImageId } );\n\t}\n\n\treturn previewLink;\n}\n\n/**\n * Returns a suggested post format for the current post, inferred only if there\n * is a single block within the post and it is of a type known to match a\n * default post format. Returns null if the format cannot be determined.\n *\n * @param {Object} state Global application state.\n *\n * @return {?string} Suggested post format.\n */\nexport function getSuggestedPostFormat( state ) {\n\tconst blocks = getEditorBlocks( state );\n\n\tif ( blocks.length > 2 ) return null;\n\n\tlet name;\n\t// If there is only one block in the content of the post grab its name\n\t// so we can derive a suitable post format from it.\n\tif ( blocks.length === 1 ) {\n\t\tname = blocks[ 0 ].name;\n\t\t// check for core/embed `video` and `audio` eligible suggestions\n\t\tif ( name === 'core/embed' ) {\n\t\t\tconst provider = blocks[ 0 ].attributes?.providerNameSlug;\n\t\t\tif ( [ 'youtube', 'vimeo' ].includes( provider ) ) {\n\t\t\t\tname = 'core/video';\n\t\t\t} else if ( [ 'spotify', 'soundcloud' ].includes( provider ) ) {\n\t\t\t\tname = 'core/audio';\n\t\t\t}\n\t\t}\n\t}\n\n\t// If there are two blocks in the content and the last one is a text blocks\n\t// grab the name of the first one to also suggest a post format from it.\n\tif ( blocks.length === 2 && blocks[ 1 ].name === 'core/paragraph' ) {\n\t\tname = blocks[ 0 ].name;\n\t}\n\n\t// We only convert to default post formats in core.\n\tswitch ( name ) {\n\t\tcase 'core/image':\n\t\t\treturn 'image';\n\t\tcase 'core/quote':\n\t\tcase 'core/pullquote':\n\t\t\treturn 'quote';\n\t\tcase 'core/gallery':\n\t\t\treturn 'gallery';\n\t\tcase 'core/video':\n\t\t\treturn 'video';\n\t\tcase 'core/audio':\n\t\t\treturn 'audio';\n\t\tdefault:\n\t\t\treturn null;\n\t}\n}\n\n/**\n * Returns the content of the post being edited.\n *\n * @param {Object} state Global application state.\n *\n * @return {string} Post content.\n */\nexport const getEditedPostContent = createRegistrySelector(\n\t( select ) => ( state ) => {\n\t\tconst postId = getCurrentPostId( state );\n\t\tconst postType = getCurrentPostType( state );\n\t\tconst record = select( coreStore ).getEditedEntityRecord(\n\t\t\t'postType',\n\t\t\tpostType,\n\t\t\tpostId\n\t\t);\n\t\tif ( record ) {\n\t\t\tif ( typeof record.content === 'function' ) {\n\t\t\t\treturn record.content( record );\n\t\t\t} else if ( record.blocks ) {\n\t\t\t\treturn __unstableSerializeAndClean( record.blocks );\n\t\t\t} else if ( record.content ) {\n\t\t\t\treturn record.content;\n\t\t\t}\n\t\t}\n\t\treturn '';\n\t}\n);\n\n/**\n * Returns true if the post is being published, or false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether post is being published.\n */\nexport function isPublishingPost( state ) {\n\treturn (\n\t\tisSavingPost( state ) &&\n\t\t! isCurrentPostPublished( state ) &&\n\t\tgetEditedPostAttribute( state, 'status' ) === 'publish'\n\t);\n}\n\n/**\n * Returns whether the permalink is editable or not.\n *\n * @param {Object} state Editor state.\n *\n * @return {boolean} Whether or not the permalink is editable.\n */\nexport function isPermalinkEditable( state ) {\n\tconst permalinkTemplate = getEditedPostAttribute(\n\t\tstate,\n\t\t'permalink_template'\n\t);\n\n\treturn PERMALINK_POSTNAME_REGEX.test( permalinkTemplate );\n}\n\n/**\n * Returns the permalink for the post.\n *\n * @param {Object} state Editor state.\n *\n * @return {?string} The permalink, or null if the post is not viewable.\n */\nexport function getPermalink( state ) {\n\tconst permalinkParts = getPermalinkParts( state );\n\tif ( ! permalinkParts ) {\n\t\treturn null;\n\t}\n\n\tconst { prefix, postName, suffix } = permalinkParts;\n\n\tif ( isPermalinkEditable( state ) ) {\n\t\treturn prefix + postName + suffix;\n\t}\n\n\treturn prefix;\n}\n\n/**\n * Returns the slug for the post being edited, preferring a manually edited\n * value if one exists, then a sanitized version of the current post title, and\n * finally the post ID.\n *\n * @param {Object} state Editor state.\n *\n * @return {string} The current slug to be displayed in the editor\n */\nexport function getEditedPostSlug( state ) {\n\treturn (\n\t\tgetEditedPostAttribute( state, 'slug' ) ||\n\t\tcleanForSlug( getEditedPostAttribute( state, 'title' ) ) ||\n\t\tgetCurrentPostId( state )\n\t);\n}\n\n/**\n * Returns the permalink for a post, split into it's three parts: the prefix,\n * the postName, and the suffix.\n *\n * @param {Object} state Editor state.\n *\n * @return {Object} An object containing the prefix, postName, and suffix for\n *                  the permalink, or null if the post is not viewable.\n */\nexport function getPermalinkParts( state ) {\n\tconst permalinkTemplate = getEditedPostAttribute(\n\t\tstate,\n\t\t'permalink_template'\n\t);\n\tif ( ! permalinkTemplate ) {\n\t\treturn null;\n\t}\n\n\tconst postName =\n\t\tgetEditedPostAttribute( state, 'slug' ) ||\n\t\tgetEditedPostAttribute( state, 'generated_slug' );\n\n\tconst [ prefix, suffix ] = permalinkTemplate.split(\n\t\tPERMALINK_POSTNAME_REGEX\n\t);\n\n\treturn {\n\t\tprefix,\n\t\tpostName,\n\t\tsuffix,\n\t};\n}\n\n/**\n * Returns whether the post is locked.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Is locked.\n */\nexport function isPostLocked( state ) {\n\treturn state.postLock.isLocked;\n}\n\n/**\n * Returns whether post saving is locked.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Is locked.\n */\nexport function isPostSavingLocked( state ) {\n\treturn Object.keys( state.postSavingLock ).length > 0;\n}\n\n/**\n * Returns whether post autosaving is locked.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Is locked.\n */\nexport function isPostAutosavingLocked( state ) {\n\treturn Object.keys( state.postAutosavingLock ).length > 0;\n}\n\n/**\n * Returns whether the edition of the post has been taken over.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Is post lock takeover.\n */\nexport function isPostLockTakeover( state ) {\n\treturn state.postLock.isTakeover;\n}\n\n/**\n * Returns details about the post lock user.\n *\n * @param {Object} state Global application state.\n *\n * @return {Object} A user object.\n */\nexport function getPostLockUser( state ) {\n\treturn state.postLock.user;\n}\n\n/**\n * Returns the active post lock.\n *\n * @param {Object} state Global application state.\n *\n * @return {Object} The lock object.\n */\nexport function getActivePostLock( state ) {\n\treturn state.postLock.activePostLock;\n}\n\n/**\n * Returns whether or not the user has the unfiltered_html capability.\n *\n * @param {Object} state Editor state.\n *\n * @return {boolean} Whether the user can or can't post unfiltered HTML.\n */\nexport function canUserUseUnfilteredHTML( state ) {\n\treturn has( getCurrentPost( state ), [\n\t\t'_links',\n\t\t'wp:action-unfiltered-html',\n\t] );\n}\n\n/**\n * Returns whether the pre-publish panel should be shown\n * or skipped when the user clicks the \"publish\" button.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the pre-publish panel should be shown or not.\n */\nexport function isPublishSidebarEnabled( state ) {\n\tif ( state.preferences.hasOwnProperty( 'isPublishSidebarEnabled' ) ) {\n\t\treturn state.preferences.isPublishSidebarEnabled;\n\t}\n\treturn PREFERENCES_DEFAULTS.isPublishSidebarEnabled;\n}\n\n/**\n * Return the current block list.\n *\n * @param {Object} state\n * @return {Array} Block list.\n */\nexport function getEditorBlocks( state ) {\n\treturn getEditedPostAttribute( state, 'blocks' ) || EMPTY_ARRAY;\n}\n\n/**\n * A block selection object.\n *\n * @typedef {Object} WPBlockSelection\n *\n * @property {string} clientId     A block client ID.\n * @property {string} attributeKey A block attribute key.\n * @property {number} offset       An attribute value offset, based on the rich\n *                                 text value. See `wp.richText.create`.\n */\n\n/**\n * Returns the current selection start.\n *\n * @param {Object} state\n * @return {WPBlockSelection} The selection start.\n *\n * @deprecated since Gutenberg 10.0.0.\n */\nexport function getEditorSelectionStart( state ) {\n\tdeprecated( \"select('core/editor').getEditorSelectionStart\", {\n\t\tsince: '10.0',\n\t\tplugin: 'Gutenberg',\n\t\talternative: \"select('core/editor').getEditorSelection\",\n\t} );\n\treturn getEditedPostAttribute( state, 'selection' )?.selectionStart;\n}\n\n/**\n * Returns the current selection end.\n *\n * @param {Object} state\n * @return {WPBlockSelection} The selection end.\n *\n * @deprecated since Gutenberg 10.0.0.\n */\nexport function getEditorSelectionEnd( state ) {\n\tdeprecated( \"select('core/editor').getEditorSelectionStart\", {\n\t\tsince: '10.0',\n\t\tplugin: 'Gutenberg',\n\t\talternative: \"select('core/editor').getEditorSelection\",\n\t} );\n\treturn getEditedPostAttribute( state, 'selection' )?.selectionEnd;\n}\n\n/**\n * Returns the current selection.\n *\n * @param {Object} state\n * @return {WPBlockSelection} The selection end.\n */\nexport function getEditorSelection( state ) {\n\treturn getEditedPostAttribute( state, 'selection' );\n}\n\n/**\n * Is the editor ready\n *\n * @param {Object} state\n * @return {boolean} is Ready.\n */\nexport function __unstableIsEditorReady( state ) {\n\treturn state.isReady;\n}\n\n/**\n * Returns the post editor settings.\n *\n * @param {Object} state Editor state.\n *\n * @return {Object} The editor settings object.\n */\nexport function getEditorSettings( state ) {\n\treturn state.editorSettings;\n}\n\n/*\n * Backward compatibility\n */\n\n/**\n * Returns state object prior to a specified optimist transaction ID, or `null`\n * if the transaction corresponding to the given ID cannot be found.\n *\n * @deprecated since Gutenberg 9.7.0.\n */\nexport function getStateBeforeOptimisticTransaction() {\n\tdeprecated( \"select('core/editor').getStateBeforeOptimisticTransaction\", {\n\t\tsince: '5.7',\n\t\thint: 'No state history is kept on this store anymore',\n\t} );\n\n\treturn null;\n}\n/**\n * Returns true if an optimistic transaction is pending commit, for which the\n * before state satisfies the given predicate function.\n *\n * @deprecated since Gutenberg 9.7.0.\n */\nexport function inSomeHistory() {\n\tdeprecated( \"select('core/editor').inSomeHistory\", {\n\t\tsince: '5.7',\n\t\thint: 'No state history is kept on this store anymore',\n\t} );\n\treturn false;\n}\n\nfunction getBlockEditorSelector( name ) {\n\treturn createRegistrySelector( ( select ) => ( state, ...args ) => {\n\t\tdeprecated( \"`wp.data.select( 'core/editor' ).\" + name + '`', {\n\t\t\tsince: '5.3',\n\t\t\talternative: \"`wp.data.select( 'core/block-editor' ).\" + name + '`',\n\t\t} );\n\n\t\treturn select( blockEditorStore )[ name ]( ...args );\n\t} );\n}\n\n/**\n * @see getBlockName in core/block-editor store.\n */\nexport const getBlockName = getBlockEditorSelector( 'getBlockName' );\n\n/**\n * @see isBlockValid in core/block-editor store.\n */\nexport const isBlockValid = getBlockEditorSelector( 'isBlockValid' );\n\n/**\n * @see getBlockAttributes in core/block-editor store.\n */\nexport const getBlockAttributes = getBlockEditorSelector(\n\t'getBlockAttributes'\n);\n\n/**\n * @see getBlock in core/block-editor store.\n */\nexport const getBlock = getBlockEditorSelector( 'getBlock' );\n\n/**\n * @see getBlocks in core/block-editor store.\n */\nexport const getBlocks = getBlockEditorSelector( 'getBlocks' );\n\n/**\n * @see getClientIdsOfDescendants in core/block-editor store.\n */\nexport const getClientIdsOfDescendants = getBlockEditorSelector(\n\t'getClientIdsOfDescendants'\n);\n\n/**\n * @see getClientIdsWithDescendants in core/block-editor store.\n */\nexport const getClientIdsWithDescendants = getBlockEditorSelector(\n\t'getClientIdsWithDescendants'\n);\n\n/**\n * @see getGlobalBlockCount in core/block-editor store.\n */\nexport const getGlobalBlockCount = getBlockEditorSelector(\n\t'getGlobalBlockCount'\n);\n\n/**\n * @see getBlocksByClientId in core/block-editor store.\n */\nexport const getBlocksByClientId = getBlockEditorSelector(\n\t'getBlocksByClientId'\n);\n\n/**\n * @see getBlockCount in core/block-editor store.\n */\nexport const getBlockCount = getBlockEditorSelector( 'getBlockCount' );\n\n/**\n * @see getBlockSelectionStart in core/block-editor store.\n */\nexport const getBlockSelectionStart = getBlockEditorSelector(\n\t'getBlockSelectionStart'\n);\n\n/**\n * @see getBlockSelectionEnd in core/block-editor store.\n */\nexport const getBlockSelectionEnd = getBlockEditorSelector(\n\t'getBlockSelectionEnd'\n);\n\n/**\n * @see getSelectedBlockCount in core/block-editor store.\n */\nexport const getSelectedBlockCount = getBlockEditorSelector(\n\t'getSelectedBlockCount'\n);\n\n/**\n * @see hasSelectedBlock in core/block-editor store.\n */\nexport const hasSelectedBlock = getBlockEditorSelector( 'hasSelectedBlock' );\n\n/**\n * @see getSelectedBlockClientId in core/block-editor store.\n */\nexport const getSelectedBlockClientId = getBlockEditorSelector(\n\t'getSelectedBlockClientId'\n);\n\n/**\n * @see getSelectedBlock in core/block-editor store.\n */\nexport const getSelectedBlock = getBlockEditorSelector( 'getSelectedBlock' );\n\n/**\n * @see getBlockRootClientId in core/block-editor store.\n */\nexport const getBlockRootClientId = getBlockEditorSelector(\n\t'getBlockRootClientId'\n);\n\n/**\n * @see getBlockHierarchyRootClientId in core/block-editor store.\n */\nexport const getBlockHierarchyRootClientId = getBlockEditorSelector(\n\t'getBlockHierarchyRootClientId'\n);\n\n/**\n * @see getAdjacentBlockClientId in core/block-editor store.\n */\nexport const getAdjacentBlockClientId = getBlockEditorSelector(\n\t'getAdjacentBlockClientId'\n);\n\n/**\n * @see getPreviousBlockClientId in core/block-editor store.\n */\nexport const getPreviousBlockClientId = getBlockEditorSelector(\n\t'getPreviousBlockClientId'\n);\n\n/**\n * @see getNextBlockClientId in core/block-editor store.\n */\nexport const getNextBlockClientId = getBlockEditorSelector(\n\t'getNextBlockClientId'\n);\n\n/**\n * @see getSelectedBlocksInitialCaretPosition in core/block-editor store.\n */\nexport const getSelectedBlocksInitialCaretPosition = getBlockEditorSelector(\n\t'getSelectedBlocksInitialCaretPosition'\n);\n\n/**\n * @see getMultiSelectedBlockClientIds in core/block-editor store.\n */\nexport const getMultiSelectedBlockClientIds = getBlockEditorSelector(\n\t'getMultiSelectedBlockClientIds'\n);\n\n/**\n * @see getMultiSelectedBlocks in core/block-editor store.\n */\nexport const getMultiSelectedBlocks = getBlockEditorSelector(\n\t'getMultiSelectedBlocks'\n);\n\n/**\n * @see getFirstMultiSelectedBlockClientId in core/block-editor store.\n */\nexport const getFirstMultiSelectedBlockClientId = getBlockEditorSelector(\n\t'getFirstMultiSelectedBlockClientId'\n);\n\n/**\n * @see getLastMultiSelectedBlockClientId in core/block-editor store.\n */\nexport const getLastMultiSelectedBlockClientId = getBlockEditorSelector(\n\t'getLastMultiSelectedBlockClientId'\n);\n\n/**\n * @see isFirstMultiSelectedBlock in core/block-editor store.\n */\nexport const isFirstMultiSelectedBlock = getBlockEditorSelector(\n\t'isFirstMultiSelectedBlock'\n);\n\n/**\n * @see isBlockMultiSelected in core/block-editor store.\n */\nexport const isBlockMultiSelected = getBlockEditorSelector(\n\t'isBlockMultiSelected'\n);\n\n/**\n * @see isAncestorMultiSelected in core/block-editor store.\n */\nexport const isAncestorMultiSelected = getBlockEditorSelector(\n\t'isAncestorMultiSelected'\n);\n\n/**\n * @see getMultiSelectedBlocksStartClientId in core/block-editor store.\n */\nexport const getMultiSelectedBlocksStartClientId = getBlockEditorSelector(\n\t'getMultiSelectedBlocksStartClientId'\n);\n\n/**\n * @see getMultiSelectedBlocksEndClientId in core/block-editor store.\n */\nexport const getMultiSelectedBlocksEndClientId = getBlockEditorSelector(\n\t'getMultiSelectedBlocksEndClientId'\n);\n\n/**\n * @see getBlockOrder in core/block-editor store.\n */\nexport const getBlockOrder = getBlockEditorSelector( 'getBlockOrder' );\n\n/**\n * @see getBlockIndex in core/block-editor store.\n */\nexport const getBlockIndex = getBlockEditorSelector( 'getBlockIndex' );\n\n/**\n * @see isBlockSelected in core/block-editor store.\n */\nexport const isBlockSelected = getBlockEditorSelector( 'isBlockSelected' );\n\n/**\n * @see hasSelectedInnerBlock in core/block-editor store.\n */\nexport const hasSelectedInnerBlock = getBlockEditorSelector(\n\t'hasSelectedInnerBlock'\n);\n\n/**\n * @see isBlockWithinSelection in core/block-editor store.\n */\nexport const isBlockWithinSelection = getBlockEditorSelector(\n\t'isBlockWithinSelection'\n);\n\n/**\n * @see hasMultiSelection in core/block-editor store.\n */\nexport const hasMultiSelection = getBlockEditorSelector( 'hasMultiSelection' );\n\n/**\n * @see isMultiSelecting in core/block-editor store.\n */\nexport const isMultiSelecting = getBlockEditorSelector( 'isMultiSelecting' );\n\n/**\n * @see isSelectionEnabled in core/block-editor store.\n */\nexport const isSelectionEnabled = getBlockEditorSelector(\n\t'isSelectionEnabled'\n);\n\n/**\n * @see getBlockMode in core/block-editor store.\n */\nexport const getBlockMode = getBlockEditorSelector( 'getBlockMode' );\n\n/**\n * @see isTyping in core/block-editor store.\n */\nexport const isTyping = getBlockEditorSelector( 'isTyping' );\n\n/**\n * @see isCaretWithinFormattedText in core/block-editor store.\n */\nexport const isCaretWithinFormattedText = getBlockEditorSelector(\n\t'isCaretWithinFormattedText'\n);\n\n/**\n * @see getBlockInsertionPoint in core/block-editor store.\n */\nexport const getBlockInsertionPoint = getBlockEditorSelector(\n\t'getBlockInsertionPoint'\n);\n\n/**\n * @see isBlockInsertionPointVisible in core/block-editor store.\n */\nexport const isBlockInsertionPointVisible = getBlockEditorSelector(\n\t'isBlockInsertionPointVisible'\n);\n\n/**\n * @see isValidTemplate in core/block-editor store.\n */\nexport const isValidTemplate = getBlockEditorSelector( 'isValidTemplate' );\n\n/**\n * @see getTemplate in core/block-editor store.\n */\nexport const getTemplate = getBlockEditorSelector( 'getTemplate' );\n\n/**\n * @see getTemplateLock in core/block-editor store.\n */\nexport const getTemplateLock = getBlockEditorSelector( 'getTemplateLock' );\n\n/**\n * @see canInsertBlockType in core/block-editor store.\n */\nexport const canInsertBlockType = getBlockEditorSelector(\n\t'canInsertBlockType'\n);\n\n/**\n * @see getInserterItems in core/block-editor store.\n */\nexport const getInserterItems = getBlockEditorSelector( 'getInserterItems' );\n\n/**\n * @see hasInserterItems in core/block-editor store.\n */\nexport const hasInserterItems = getBlockEditorSelector( 'hasInserterItems' );\n\n/**\n * @see getBlockListSettings in core/block-editor store.\n */\nexport const getBlockListSettings = getBlockEditorSelector(\n\t'getBlockListSettings'\n);\n\n/**\n * Returns the default template types.\n *\n * @param {Object} state Global application state.\n *\n * @return {Object} The template types.\n */\nexport function __experimentalGetDefaultTemplateTypes( state ) {\n\treturn getEditorSettings( state )?.defaultTemplateTypes;\n}\n\n/**\n * Returns the default template part areas.\n *\n * @param {Object} state Global application state.\n *\n * @return {Array} The template part areas.\n */\nexport const __experimentalGetDefaultTemplatePartAreas = createSelector(\n\t( state ) => {\n\t\tconst areas =\n\t\t\tgetEditorSettings( state )?.defaultTemplatePartAreas || [];\n\t\treturn areas?.map( ( item ) => {\n\t\t\treturn { ...item, icon: getTemplatePartIcon( item.icon ) };\n\t\t} );\n\t},\n\t( state ) => [ getEditorSettings( state )?.defaultTemplatePartAreas ]\n);\n\n/**\n * Returns a default template type searched by slug.\n *\n * @param {Object} state Global application state.\n * @param {string} slug  The template type slug.\n *\n * @return {Object} The template type.\n */\nexport const __experimentalGetDefaultTemplateType = createSelector(\n\t( state, slug ) =>\n\t\tfind( __experimentalGetDefaultTemplateTypes( state ), { slug } ) || {},\n\t( state, slug ) => [ __experimentalGetDefaultTemplateTypes( state ), slug ]\n);\n\n/**\n * Given a template entity, return information about it which is ready to be\n * rendered, such as the title, description, and icon.\n *\n * @param {Object} state    Global application state.\n * @param {Object} template The template for which we need information.\n * @return {Object} Information about the template, including title, description, and icon.\n */\nexport function __experimentalGetTemplateInfo( state, template ) {\n\tif ( ! template ) {\n\t\treturn {};\n\t}\n\n\tconst { excerpt, slug, title, area } = template;\n\tconst {\n\t\ttitle: defaultTitle,\n\t\tdescription: defaultDescription,\n\t} = __experimentalGetDefaultTemplateType( state, slug );\n\n\tconst templateTitle = isString( title ) ? title : title?.rendered;\n\tconst templateDescription = isString( excerpt ) ? excerpt : excerpt?.raw;\n\tconst templateIcon =\n\t\t__experimentalGetDefaultTemplatePartAreas( state ).find(\n\t\t\t( item ) => area === item.area\n\t\t)?.icon || layout;\n\n\treturn {\n\t\ttitle:\n\t\t\ttemplateTitle && templateTitle !== slug\n\t\t\t\t? templateTitle\n\t\t\t\t: defaultTitle || slug,\n\t\tdescription: templateDescription || defaultDescription,\n\t\ticon: templateIcon,\n\t};\n}\n\n/**\n * Returns a post type label depending on the current post.\n *\n * @param {Object} state Global application state.\n *\n * @return {string|undefined} The post type label if available, otherwise undefined.\n */\nexport const getPostTypeLabel = createRegistrySelector(\n\t( select ) => ( state ) => {\n\t\tconst currentPostType = getCurrentPostType( state );\n\t\tconst postType = select( coreStore ).getPostType( currentPostType );\n\t\t// Disable reason: Post type labels object is shaped like this.\n\t\t// eslint-disable-next-line camelcase\n\t\treturn postType?.labels?.singular_name;\n\t}\n);\n"]}
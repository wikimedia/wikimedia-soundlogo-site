{"version":3,"sources":["@wordpress/editor/src/utils/terms.js"],"names":["groupBy","map","unescape","lodashUnescapeString","buildTermsTree","flatTerms","flatTermsWithParentAndChildren","term","children","parent","termsByParent","null","length","fillWithChildren","terms","id","unescapeString","arg","replace","unescapeTerm","name","unescapeTerms"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,OAAT,EAAkBC,GAAlB,EAAuBC,QAAQ,IAAIC,oBAAnC,QAA+D,QAA/D;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,cAAT,CAAyBC,SAAzB,EAAqC;AAC3C,QAAMC,8BAA8B,GAAGD,SAAS,CAACJ,GAAV,CAAiBM,IAAF,IAAY;AACjE,WAAO;AACNC,MAAAA,QAAQ,EAAE,EADJ;AAENC,MAAAA,MAAM,EAAE,IAFF;AAGN,SAAGF;AAHG,KAAP;AAKA,GANsC,CAAvC;AAQA,QAAMG,aAAa,GAAGV,OAAO,CAAEM,8BAAF,EAAkC,QAAlC,CAA7B;;AACA,MAAKI,aAAa,CAACC,IAAd,IAAsBD,aAAa,CAACC,IAAd,CAAmBC,MAA9C,EAAuD;AACtD,WAAON,8BAAP;AACA;;AACD,QAAMO,gBAAgB,GAAKC,KAAF,IAAa;AACrC,WAAOA,KAAK,CAACb,GAAN,CAAaM,IAAF,IAAY;AAC7B,YAAMC,QAAQ,GAAGE,aAAa,CAAEH,IAAI,CAACQ,EAAP,CAA9B;AACA,aAAO,EACN,GAAGR,IADG;AAENC,QAAAA,QAAQ,EACPA,QAAQ,IAAIA,QAAQ,CAACI,MAArB,GACGC,gBAAgB,CAAEL,QAAF,CADnB,GAEG;AALE,OAAP;AAOA,KATM,CAAP;AAUA,GAXD;;AAaA,SAAOK,gBAAgB,CAAEH,aAAa,CAAE,GAAF,CAAb,IAAwB,EAA1B,CAAvB;AACA,C,CAED;;AACA,OAAO,MAAMM,cAAc,GAAKC,GAAF,IAAW;AACxC,SAAOd,oBAAoB,CAAEc,GAAG,CAACC,OAAJ,CAAa,QAAb,EAAuB,GAAvB,CAAF,CAA3B;AACA,CAFM;AAIP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,YAAY,GAAKZ,IAAF,IAAY;AACvC,SAAO,EACN,GAAGA,IADG;AAENa,IAAAA,IAAI,EAAEJ,cAAc,CAAET,IAAI,CAACa,IAAP;AAFd,GAAP;AAIA,CALM;AAOP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,aAAa,GAAKP,KAAF,IAAa;AACzC,SAAOb,GAAG,CAAEa,KAAF,EAASK,YAAT,CAAV;AACA,CAFM","sourcesContent":["/**\n * External dependencies\n */\nimport { groupBy, map, unescape as lodashUnescapeString } from 'lodash';\n\n/**\n * Returns terms in a tree form.\n *\n * @param {Array} flatTerms Array of terms in flat format.\n *\n * @return {Array} Array of terms in tree format.\n */\nexport function buildTermsTree( flatTerms ) {\n\tconst flatTermsWithParentAndChildren = flatTerms.map( ( term ) => {\n\t\treturn {\n\t\t\tchildren: [],\n\t\t\tparent: null,\n\t\t\t...term,\n\t\t};\n\t} );\n\n\tconst termsByParent = groupBy( flatTermsWithParentAndChildren, 'parent' );\n\tif ( termsByParent.null && termsByParent.null.length ) {\n\t\treturn flatTermsWithParentAndChildren;\n\t}\n\tconst fillWithChildren = ( terms ) => {\n\t\treturn terms.map( ( term ) => {\n\t\t\tconst children = termsByParent[ term.id ];\n\t\t\treturn {\n\t\t\t\t...term,\n\t\t\t\tchildren:\n\t\t\t\t\tchildren && children.length\n\t\t\t\t\t\t? fillWithChildren( children )\n\t\t\t\t\t\t: [],\n\t\t\t};\n\t\t} );\n\t};\n\n\treturn fillWithChildren( termsByParent[ '0' ] || [] );\n}\n\n// Lodash unescape function handles &#39; but not &#039; which may be return in some API requests.\nexport const unescapeString = ( arg ) => {\n\treturn lodashUnescapeString( arg.replace( '&#039;', \"'\" ) );\n};\n\n/**\n * Returns a term object with name unescaped.\n * The unescape of the name property is done using lodash unescape function.\n *\n * @param {Object} term The term object to unescape.\n *\n * @return {Object} Term object with name property unescaped.\n */\nexport const unescapeTerm = ( term ) => {\n\treturn {\n\t\t...term,\n\t\tname: unescapeString( term.name ),\n\t};\n};\n\n/**\n * Returns an array of term objects with names unescaped.\n * The unescape of each term is performed using the unescapeTerm function.\n *\n * @param {Object[]} terms Array of term objects to unescape.\n *\n * @return {Object[]} Array of term objects unescaped.\n */\nexport const unescapeTerms = ( terms ) => {\n\treturn map( terms, unescapeTerm );\n};\n"]}
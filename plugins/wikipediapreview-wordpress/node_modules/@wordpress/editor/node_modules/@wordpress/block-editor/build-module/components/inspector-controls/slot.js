import _extends from "@babel/runtime/helpers/esm/extends";
import { createElement } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { __experimentalUseSlot as useSlot } from '@wordpress/components';
import warning from '@wordpress/warning';
/**
 * Internal dependencies
 */

import BlockSupportToolsPanel from './block-support-tools-panel';
import groups from './groups';
export default function InspectorControlsSlot({
  __experimentalGroup: group = 'default',
  bubblesVirtually = true,
  label,
  ...props
}) {
  var _groups$group;

  const Slot = (_groups$group = groups[group]) === null || _groups$group === void 0 ? void 0 : _groups$group.Slot;
  const slot = useSlot(Slot === null || Slot === void 0 ? void 0 : Slot.__unstableName);

  if (!Slot || !slot) {
    typeof process !== "undefined" && process.env && process.env.NODE_ENV !== "production" ? warning(`Unknown InspectorControl group "${group}" provided.`) : void 0;
    return null;
  }

  const hasFills = Boolean(slot.fills && slot.fills.length);

  if (!hasFills) {
    return null;
  }

  if (label) {
    return createElement(BlockSupportToolsPanel, {
      group: group,
      label: label
    }, createElement(Slot, _extends({}, props, {
      bubblesVirtually: bubblesVirtually
    })));
  }

  return createElement(Slot, _extends({}, props, {
    bubblesVirtually: bubblesVirtually
  }));
}
//# sourceMappingURL=slot.js.map
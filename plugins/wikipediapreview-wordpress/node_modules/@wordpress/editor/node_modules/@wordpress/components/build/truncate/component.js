"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _context = require("../ui/context");

var _view = require("../view");

var _hook = _interopRequireDefault(require("./hook"));

/**
 * Internal dependencies
 */

/**
 * @param {import('../ui/context').WordPressComponentProps<import('./types').Props, 'span'>} props
 * @param {import('react').Ref<any>}                                                         forwardedRef
 */
function Truncate(props, forwardedRef) {
  const truncateProps = (0, _hook.default)(props);
  return (0, _element.createElement)(_view.View, (0, _extends2.default)({
    as: "span"
  }, truncateProps, {
    ref: forwardedRef
  }));
}
/**
 * `Truncate` is a typography primitive that trims text content.
 * For almost all cases, it is recommended that `Text`, `Heading`, or
 * `Subheading` is used to render text content. However,`Truncate` is
 * available for custom implementations.
 *
 * @example
 * ```jsx
 * import { __experimentalTruncate as Truncate } from `@wordpress/components`;
 *
 * function Example() {
 * 	return (
 * 		<Truncate>
 * 			Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc ex
 * 			neque, vulputate a diam et, luctus convallis lacus. Vestibulum ac
 * 			mollis mi. Morbi id elementum massa.
 * 		</Truncate>
 * 	);
 * }
 * ```
 */


const ConnectedTruncate = (0, _context.contextConnect)(Truncate, 'Truncate');
var _default = ConnectedTruncate;
exports.default = _default;
//# sourceMappingURL=component.js.map
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = BoxInputControls;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _lodash = require("lodash");

var _unitControl = _interopRequireDefault(require("./unit-control"));

var _utils = require("./utils");

var _boxControlStyles = require("./styles/box-control-styles");

/**
 * External dependencies
 */

/**
 * Internal dependencies
 */
function BoxInputControls({
  onChange = _lodash.noop,
  onFocus = _lodash.noop,
  onHoverOn = _lodash.noop,
  onHoverOff = _lodash.noop,
  values,
  selectedUnits,
  setSelectedUnits,
  sides,
  ...props
}) {
  const createHandleOnFocus = side => event => {
    onFocus(event, {
      side
    });
  };

  const createHandleOnHoverOn = side => () => {
    onHoverOn({
      [side]: true
    });
  };

  const createHandleOnHoverOff = side => () => {
    onHoverOff({
      [side]: false
    });
  };

  const handleOnChange = nextValues => {
    onChange(nextValues);
  };

  const createHandleOnChange = side => (next, {
    event
  }) => {
    const {
      altKey
    } = event;
    const nextValues = { ...values
    };
    const isNumeric = !isNaN(parseFloat(next));
    const nextValue = isNumeric ? next : undefined;
    nextValues[side] = nextValue;
    /**
     * Supports changing pair sides. For example, holding the ALT key
     * when changing the TOP will also update BOTTOM.
     */

    if (altKey) {
      switch (side) {
        case 'top':
          nextValues.bottom = nextValue;
          break;

        case 'bottom':
          nextValues.top = nextValue;
          break;

        case 'left':
          nextValues.right = nextValue;
          break;

        case 'right':
          nextValues.left = nextValue;
          break;
      }
    }

    handleOnChange(nextValues);
  };

  const createHandleOnUnitChange = side => next => {
    const newUnits = { ...selectedUnits
    };
    newUnits[side] = next;
    setSelectedUnits(newUnits);
  }; // Filter sides if custom configuration provided, maintaining default order.


  const filteredSides = sides !== null && sides !== void 0 && sides.length ? _utils.ALL_SIDES.filter(side => sides.includes(side)) : _utils.ALL_SIDES;
  const first = filteredSides[0];
  const last = filteredSides[filteredSides.length - 1];
  const only = first === last && first;
  return (0, _element.createElement)(_boxControlStyles.LayoutContainer, {
    className: "component-box-control__input-controls-wrapper"
  }, (0, _element.createElement)(_boxControlStyles.Layout, {
    gap: 0,
    align: "top",
    className: "component-box-control__input-controls"
  }, filteredSides.map(side => (0, _element.createElement)(_unitControl.default, (0, _extends2.default)({}, props, {
    isFirst: first === side,
    isLast: last === side,
    isOnly: only === side,
    value: values[side],
    unit: values[side] ? undefined : selectedUnits[side],
    onChange: createHandleOnChange(side),
    onUnitChange: createHandleOnUnitChange(side),
    onFocus: createHandleOnFocus(side),
    onHoverOn: createHandleOnHoverOn(side),
    onHoverOff: createHandleOnHoverOff(side),
    label: _utils.LABELS[side],
    key: `box-control-${side}`
  })))));
}
//# sourceMappingURL=input-controls.js.map
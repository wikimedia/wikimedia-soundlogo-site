{"version":3,"sources":["@wordpress/media-utils/src/utils/upload-media.js"],"names":["compact","flatMap","forEach","get","has","includes","map","noop","omit","some","startsWith","apiFetch","createBlobURL","revokeBlobURL","__","sprintf","getMimeTypesArray","wpMimeTypesObject","mime","extensionsString","type","split","extensions","extension","uploadMedia","allowedTypes","additionalData","filesList","maxUploadFileSize","onError","onFileChange","wpAllowedMimeTypes","files","filesSet","setAndUpdateFiles","idx","value","isAllowedType","fileType","allowedType","allowedMimeTypesForUser","isAllowedMimeTypeForUser","triggerError","error","message","file","name","validFiles","mediaFile","code","size","push","url","length","savedMedia","createMediaFromFile","mediaObject","alt","alt_text","caption","title","raw","source_url","data","window","FormData","append","replace","key","path","body","method"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport {\n\tcompact,\n\tflatMap,\n\tforEach,\n\tget,\n\thas,\n\tincludes,\n\tmap,\n\tnoop,\n\tomit,\n\tsome,\n\tstartsWith,\n} from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport apiFetch from '@wordpress/api-fetch';\nimport { createBlobURL, revokeBlobURL } from '@wordpress/blob';\nimport { __, sprintf } from '@wordpress/i18n';\n\n/**\n * Browsers may use unexpected mime types, and they differ from browser to browser.\n * This function computes a flexible array of mime types from the mime type structured provided by the server.\n * Converts { jpg|jpeg|jpe: \"image/jpeg\" } into [ \"image/jpeg\", \"image/jpg\", \"image/jpeg\", \"image/jpe\" ]\n * The computation of this array instead of directly using the object,\n * solves the problem in chrome where mp3 files have audio/mp3 as mime type instead of audio/mpeg.\n * https://bugs.chromium.org/p/chromium/issues/detail?id=227004\n *\n * @param {?Object} wpMimeTypesObject Mime type object received from the server.\n *                                    Extensions are keys separated by '|' and values are mime types associated with an extension.\n *\n * @return {?Array} An array of mime types or the parameter passed if it was \"falsy\".\n */\nexport function getMimeTypesArray( wpMimeTypesObject ) {\n\tif ( ! wpMimeTypesObject ) {\n\t\treturn wpMimeTypesObject;\n\t}\n\treturn flatMap( wpMimeTypesObject, ( mime, extensionsString ) => {\n\t\tconst [ type ] = mime.split( '/' );\n\t\tconst extensions = extensionsString.split( '|' );\n\t\treturn [\n\t\t\tmime,\n\t\t\t...map( extensions, ( extension ) => `${ type }/${ extension }` ),\n\t\t];\n\t} );\n}\n\n/**\n *\tMedia Upload is used by audio, image, gallery, video, and file blocks to\n *\thandle uploading a media file when a file upload button is activated.\n *\n *\tTODO: future enhancement to add an upload indicator.\n *\n * @param {Object}   $0                    Parameters object passed to the function.\n * @param {?Array}   $0.allowedTypes       Array with the types of media that can be uploaded, if unset all types are allowed.\n * @param {?Object}  $0.additionalData     Additional data to include in the request.\n * @param {Array}    $0.filesList          List of files.\n * @param {?number}  $0.maxUploadFileSize  Maximum upload size in bytes allowed for the site.\n * @param {Function} $0.onError            Function called when an error happens.\n * @param {Function} $0.onFileChange       Function called each time a file or a temporary representation of the file is available.\n * @param {?Object}  $0.wpAllowedMimeTypes List of allowed mime types and file extensions.\n */\nexport async function uploadMedia( {\n\tallowedTypes,\n\tadditionalData = {},\n\tfilesList,\n\tmaxUploadFileSize,\n\tonError = noop,\n\tonFileChange,\n\twpAllowedMimeTypes = null,\n} ) {\n\t// Cast filesList to array\n\tconst files = [ ...filesList ];\n\n\tconst filesSet = [];\n\tconst setAndUpdateFiles = ( idx, value ) => {\n\t\trevokeBlobURL( get( filesSet, [ idx, 'url' ] ) );\n\t\tfilesSet[ idx ] = value;\n\t\tonFileChange( compact( filesSet ) );\n\t};\n\n\t// Allowed type specified by consumer\n\tconst isAllowedType = ( fileType ) => {\n\t\tif ( ! allowedTypes ) {\n\t\t\treturn true;\n\t\t}\n\t\treturn some( allowedTypes, ( allowedType ) => {\n\t\t\t// If a complete mimetype is specified verify if it matches exactly the mime type of the file.\n\t\t\tif ( includes( allowedType, '/' ) ) {\n\t\t\t\treturn allowedType === fileType;\n\t\t\t}\n\t\t\t// Otherwise a general mime type is used and we should verify if the file mimetype starts with it.\n\t\t\treturn startsWith( fileType, `${ allowedType }/` );\n\t\t} );\n\t};\n\n\t// Allowed types for the current WP_User\n\tconst allowedMimeTypesForUser = getMimeTypesArray( wpAllowedMimeTypes );\n\tconst isAllowedMimeTypeForUser = ( fileType ) => {\n\t\treturn includes( allowedMimeTypesForUser, fileType );\n\t};\n\n\t// Build the error message including the filename\n\tconst triggerError = ( error ) => {\n\t\terror.message = [\n\t\t\t<strong key=\"filename\">{ error.file.name }</strong>,\n\t\t\t': ',\n\t\t\terror.message,\n\t\t];\n\n\t\tonError( error );\n\t};\n\n\tconst validFiles = [];\n\n\tfor ( const mediaFile of files ) {\n\t\t// Verify if user is allowed to upload this mime type.\n\t\t// Defer to the server when type not detected.\n\t\tif (\n\t\t\tallowedMimeTypesForUser &&\n\t\t\tmediaFile.type &&\n\t\t\t! isAllowedMimeTypeForUser( mediaFile.type )\n\t\t) {\n\t\t\ttriggerError( {\n\t\t\t\tcode: 'MIME_TYPE_NOT_ALLOWED_FOR_USER',\n\t\t\t\tmessage: __(\n\t\t\t\t\t'Sorry, this file type is not permitted for security reasons.'\n\t\t\t\t),\n\t\t\t\tfile: mediaFile,\n\t\t\t} );\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Check if the block supports this mime type.\n\t\t// Defer to the server when type not detected.\n\t\tif ( mediaFile.type && ! isAllowedType( mediaFile.type ) ) {\n\t\t\ttriggerError( {\n\t\t\t\tcode: 'MIME_TYPE_NOT_SUPPORTED',\n\t\t\t\tmessage: __( 'Sorry, this file type is not supported here.' ),\n\t\t\t\tfile: mediaFile,\n\t\t\t} );\n\t\t\tcontinue;\n\t\t}\n\n\t\t// verify if file is greater than the maximum file upload size allowed for the site.\n\t\tif ( maxUploadFileSize && mediaFile.size > maxUploadFileSize ) {\n\t\t\ttriggerError( {\n\t\t\t\tcode: 'SIZE_ABOVE_LIMIT',\n\t\t\t\tmessage: __(\n\t\t\t\t\t'This file exceeds the maximum upload size for this site.'\n\t\t\t\t),\n\t\t\t\tfile: mediaFile,\n\t\t\t} );\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Don't allow empty files to be uploaded.\n\t\tif ( mediaFile.size <= 0 ) {\n\t\t\ttriggerError( {\n\t\t\t\tcode: 'EMPTY_FILE',\n\t\t\t\tmessage: __( 'This file is empty.' ),\n\t\t\t\tfile: mediaFile,\n\t\t\t} );\n\t\t\tcontinue;\n\t\t}\n\n\t\tvalidFiles.push( mediaFile );\n\n\t\t// Set temporary URL to create placeholder media file, this is replaced\n\t\t// with final file from media gallery when upload is `done` below\n\t\tfilesSet.push( { url: createBlobURL( mediaFile ) } );\n\t\tonFileChange( filesSet );\n\t}\n\n\tfor ( let idx = 0; idx < validFiles.length; ++idx ) {\n\t\tconst mediaFile = validFiles[ idx ];\n\t\ttry {\n\t\t\tconst savedMedia = await createMediaFromFile(\n\t\t\t\tmediaFile,\n\t\t\t\tadditionalData\n\t\t\t);\n\t\t\tconst mediaObject = {\n\t\t\t\t...omit( savedMedia, [ 'alt_text', 'source_url' ] ),\n\t\t\t\talt: savedMedia.alt_text,\n\t\t\t\tcaption: get( savedMedia, [ 'caption', 'raw' ], '' ),\n\t\t\t\ttitle: savedMedia.title.raw,\n\t\t\t\turl: savedMedia.source_url,\n\t\t\t};\n\t\t\tsetAndUpdateFiles( idx, mediaObject );\n\t\t} catch ( error ) {\n\t\t\t// Reset to empty on failure.\n\t\t\tsetAndUpdateFiles( idx, null );\n\t\t\tlet message;\n\t\t\tif ( has( error, [ 'message' ] ) ) {\n\t\t\t\tmessage = get( error, [ 'message' ] );\n\t\t\t} else {\n\t\t\t\tmessage = sprintf(\n\t\t\t\t\t// translators: %s: file name\n\t\t\t\t\t__( 'Error while uploading file %s to the media library.' ),\n\t\t\t\t\tmediaFile.name\n\t\t\t\t);\n\t\t\t}\n\t\t\tonError( {\n\t\t\t\tcode: 'GENERAL',\n\t\t\t\tmessage,\n\t\t\t\tfile: mediaFile,\n\t\t\t} );\n\t\t}\n\t}\n}\n\n/**\n * @param {File}    file           Media File to Save.\n * @param {?Object} additionalData Additional data to include in the request.\n *\n * @return {Promise} Media Object Promise.\n */\nfunction createMediaFromFile( file, additionalData ) {\n\t// Create upload payload\n\tconst data = new window.FormData();\n\tdata.append( 'file', file, file.name || file.type.replace( '/', '.' ) );\n\tforEach( additionalData, ( value, key ) => data.append( key, value ) );\n\treturn apiFetch( {\n\t\tpath: '/wp/v2/media',\n\t\tbody: data,\n\t\tmethod: 'POST',\n\t} );\n}\n"]}
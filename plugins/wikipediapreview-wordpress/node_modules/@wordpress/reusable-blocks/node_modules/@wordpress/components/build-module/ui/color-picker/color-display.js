import { createElement, Fragment } from "@wordpress/element";

/**
 * External dependencies
 */
import colorize from 'tinycolor2';
/**
 * WordPress dependencies
 */

import { useCopyToClipboard } from '@wordpress/compose';
import { useState, useEffect, useRef } from '@wordpress/element';
import { __ } from '@wordpress/i18n';
/**
 * Internal dependencies
 */

import { Text } from '../../text';
import { Flex, FlexItem } from '../../flex';
import { Tooltip } from '../tooltip';
import { space } from '../utils/space';

const ValueDisplay = ({
  values
}) => createElement(Fragment, null, values.map(([value, abbreviation]) => {
  return createElement(FlexItem, {
    key: abbreviation,
    isBlock: true,
    display: "flex"
  }, createElement(Text, {
    color: "blue"
  }, abbreviation), createElement(Text, null, value));
}));

const HslDisplay = ({
  color,
  enableAlpha
}) => {
  const {
    h,
    s,
    l,
    a
  } = colorize(color).toHsl();
  const values = [[Math.floor(h), 'H'], [Math.round(s * 100), 'S'], [Math.round(l * 100), 'L']];

  if (enableAlpha) {
    values.push([Math.round(a * 100), 'A']);
  }

  return createElement(ValueDisplay, {
    values: values
  });
};

const RgbDisplay = ({
  color,
  enableAlpha
}) => {
  const {
    r,
    g,
    b,
    a
  } = colorize(color).toRgb();
  const values = [[r, 'R'], [g, 'G'], [b, 'B']];

  if (enableAlpha) {
    values.push([Math.round(a * 100), 'A']);
  }

  return createElement(ValueDisplay, {
    values: values
  });
};

const HexDisplay = ({
  color,
  enableAlpha
}) => {
  const colorized = colorize(color);
  const colorWithoutHash = (enableAlpha ? colorized.toHex8String() : colorized.toHexString()).slice(1).toUpperCase();
  return createElement(FlexItem, null, createElement(Text, {
    color: "blue"
  }, "#"), createElement(Text, null, colorWithoutHash));
};

const getComponent = colorType => {
  switch (colorType) {
    case 'hsl':
      return HslDisplay;

    case 'rgb':
      return RgbDisplay;

    default:
    case 'hex':
      return HexDisplay;
  }
};

export const ColorDisplay = ({
  color,
  colorType,
  enableAlpha
}) => {
  const [copiedColor, setCopiedColor] = useState(null);
  const copyTimer = useRef();
  const props = {
    color,
    enableAlpha
  };
  const Component = getComponent(colorType);
  const copyRef = useCopyToClipboard(() => {
    switch (colorType) {
      case 'hsl':
        {
          return colorize(color).toHslString();
        }

      case 'rgb':
        {
          return colorize(color).toRgbString();
        }

      default:
      case 'hex':
        {
          const colorized = colorize(color);
          return enableAlpha ? colorized.toHex8String() : colorized.toHexString();
        }
    }
  }, () => {
    if (copyTimer.current) {
      clearTimeout(copyTimer.current);
    }

    setCopiedColor(colorize(color).toHex8String());
    copyTimer.current = setTimeout(() => {
      setCopiedColor(null);
      copyTimer.current = undefined;
    }, 3000);
  });
  useEffect(() => {
    // clear copyTimer on component unmount.
    return () => {
      if (copyTimer.current) {
        clearTimeout(copyTimer.current);
      }
    };
  }, []);
  return createElement(Tooltip, {
    content: createElement(Text, {
      color: "white"
    }, copiedColor === colorize(color).toHex8String() ? __('Copied!') : __('Copy'))
  }, createElement(Flex, {
    justify: "flex-start",
    gap: space(1),
    ref: copyRef,
    style: {
      height: 30
    }
  }, createElement(Component, props)));
};
//# sourceMappingURL=color-display.js.map
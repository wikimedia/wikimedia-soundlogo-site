{"version":3,"sources":["@wordpress/components/src/ui/color-picker/hex-input.tsx"],"names":["colorize","__","Text","Spacer","space","ColorHexInputControl","HexInput","color","onChange","enableAlpha","handleValidate","value","isValid","Error","colorized","toHex8String","toHexString","slice","toUpperCase","nextValue","toHsl"],"mappings":";;AAAA;AACA;AACA;AACA,OAAOA,QAAP,MAAuC,YAAvC;AAEA;AACA;AACA;;AACA,SAASC,EAAT,QAAmB,iBAAnB;AAEA;AACA;AACA;;AACA,SAASC,IAAT,QAAqB,YAArB;AACA,SAASC,MAAT,QAAuB,cAAvB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAASC,oBAAT,QAAqC,UAArC;AAQA,OAAO,MAAMC,QAAQ,GAAG,CAAE;AAAEC,EAAAA,KAAF;AAASC,EAAAA,QAAT;AAAmBC,EAAAA;AAAnB,CAAF,KAAuD;AAC9E,QAAMC,cAAc,GAAKC,KAAF,IAAqB;AAC3C,QAAK,CAAEX,QAAQ,CAAEW,KAAF,CAAR,CAAkBC,OAAlB,EAAP,EAAqC;AACpC,YAAM,IAAIC,KAAJ,CAAW,yBAAX,CAAN;AACA;AACD,GAJD;;AAMA,QAAMC,SAAS,GAAGd,QAAQ,CAAEO,KAAF,CAA1B;AACA,QAAMI,KAAK,GAAGF,WAAW,GACtBK,SAAS,CAACC,YAAV,EADsB,GAEtBD,SAAS,CAACE,WAAV,EAFH;AAIA,SACC,cAAC,oBAAD;AACC,IAAA,MAAM,EACL,cAAC,MAAD;AACC,MAAA,EAAE,EAAGd,IADN;AAEC,MAAA,UAAU,EAAGE,KAAK,CAAE,GAAF,CAFnB;AAGC,MAAA,KAAK,EAAC,MAHP;AAIC,MAAA,UAAU,EAAG;AAJd,WAFF;AAWC,IAAA,KAAK,EAAGO,KAAK,CAACM,KAAN,CAAa,CAAb,EAAiBC,WAAjB,EAXT;AAYC,IAAA,QAAQ,EAAKC,SAAF,IACVX,QAAQ,CAAER,QAAQ,CAAEmB,SAAF,CAAR,CAAsBC,KAAtB,EAAF,CAbV;AAeC,IAAA,UAAU,EAAGV,cAfd;AAgBC,IAAA,SAAS,EAAGD,WAAW,GAAG,CAAH,GAAO,CAhB/B;AAiBC,IAAA,KAAK,EAAGR,EAAE,CAAE,WAAF,CAjBX;AAkBC,IAAA,mBAAmB;AAlBpB,IADD;AAsBA,CAlCM","sourcesContent":["/**\n * External dependencies\n */\nimport colorize, { ColorFormats } from 'tinycolor2';\n\n/**\n * WordPress dependencies\n */\nimport { __ } from '@wordpress/i18n';\n\n/**\n * Internal dependencies\n */\nimport { Text } from '../../text';\nimport { Spacer } from '../../spacer';\nimport { space } from '../utils/space';\nimport { ColorHexInputControl } from './styles';\n\ninterface HexInputProps {\n\tcolor: ColorFormats.HSLA;\n\tonChange: ( value: ColorFormats.HSLA ) => void;\n\tenableAlpha: boolean;\n}\n\nexport const HexInput = ( { color, onChange, enableAlpha }: HexInputProps ) => {\n\tconst handleValidate = ( value: string ) => {\n\t\tif ( ! colorize( value ).isValid() ) {\n\t\t\tthrow new Error( 'Invalid hex color input' );\n\t\t}\n\t};\n\n\tconst colorized = colorize( color );\n\tconst value = enableAlpha\n\t\t? colorized.toHex8String()\n\t\t: colorized.toHexString();\n\n\treturn (\n\t\t<ColorHexInputControl\n\t\t\tprefix={\n\t\t\t\t<Spacer\n\t\t\t\t\tas={ Text }\n\t\t\t\t\tmarginLeft={ space( 3.5 ) }\n\t\t\t\t\tcolor=\"blue\"\n\t\t\t\t\tlineHeight={ 1 }\n\t\t\t\t>\n\t\t\t\t\t#\n\t\t\t\t</Spacer>\n\t\t\t}\n\t\t\tvalue={ value.slice( 1 ).toUpperCase() }\n\t\t\tonChange={ ( nextValue ) =>\n\t\t\t\tonChange( colorize( nextValue ).toHsl() )\n\t\t\t}\n\t\t\tonValidate={ handleValidate }\n\t\t\tmaxLength={ enableAlpha ? 8 : 6 }\n\t\t\tlabel={ __( 'Hex color' ) }\n\t\t\thideLabelFromVision\n\t\t/>\n\t);\n};\n"]}
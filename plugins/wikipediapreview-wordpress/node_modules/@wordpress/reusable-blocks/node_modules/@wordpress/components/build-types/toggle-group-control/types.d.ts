/**
 * External dependencies
 */
import type { MutableRefObject, Ref, ReactNode, ReactText } from 'react';
import type { RadioStateReturn } from 'reakit';
/**
 * Internal dependencies
 */
import type { FormElementProps } from '../utils/types';
export declare type ToggleGroupControlOptionProps = {
    value: ReactText;
    label: string;
};
export declare type ToggleGroupControlProps = Omit<FormElementProps<any>, 'defaultValue'> & {
    /**
     * Label for the form element.
     */
    label: string;
    /**
     * If true, the label will only be visible to screen readers.
     *
     * @default false
     */
    hideLabelFromVision?: boolean;
    /**
     * Determines if segments should be rendered with equal widths.
     *
     * @default false
     */
    isAdaptiveWidth?: boolean;
    /**
     * Renders `ToggleGroupControl` as a (CSS) block element.
     *
     * @default false
     */
    isBlock?: boolean;
    /**
     * Callback when a segment is selected.
     */
    onChange?: (value: ReactText | undefined) => void;
    /**
     * The value of `ToggleGroupControl`
     */
    value?: ReactText;
    /**
     * React children
     */
    children: ReactNode;
    /**
     * If this property is added, a help text will be generated
     * using help property as the content.
     */
    help?: ReactNode;
};
export declare type ToggleGroupControlContextProps = RadioStateReturn & {
    /**
     * Renders `ToggleGroupControl` as a (CSS) block element.
     *
     * @default false
     */
    isBlock?: boolean;
};
export declare type ToggleGroupControlButtonProps = {
    className?: string;
    forwardedRef?: Ref<any>;
    /**
     * Renders `ToggleGroupControl` is a (CSS) block element.
     *
     * @default false
     */
    isBlock?: boolean;
    label: string;
    showSeparator?: boolean;
    value?: ReactText;
    state?: any;
};
export declare type ToggleGroupControlBackdropProps = {
    containerRef: MutableRefObject<HTMLElement | undefined>;
    containerWidth?: number | null;
    isAdaptiveWidth?: boolean;
    state?: any;
};
//# sourceMappingURL=types.d.ts.map
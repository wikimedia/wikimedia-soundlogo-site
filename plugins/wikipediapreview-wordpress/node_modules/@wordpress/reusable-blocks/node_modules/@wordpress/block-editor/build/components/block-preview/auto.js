"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _components = require("@wordpress/components");

var _compose = require("@wordpress/compose");

var _data = require("@wordpress/data");

var _blockList = _interopRequireDefault(require("../block-list"));

var _iframe = _interopRequireDefault(require("../iframe"));

var _editorStyles = _interopRequireDefault(require("../editor-styles"));

var _store = require("../../store");

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
// This is used to avoid rendering the block list if the sizes change.
let MemoizedBlockList;

function AutoBlockPreview({
  viewportWidth,
  __experimentalPadding
}) {
  const [containerResizeListener, {
    width: containerWidth
  }] = (0, _compose.useResizeObserver)();
  const [contentResizeListener, {
    height: contentHeight
  }] = (0, _compose.useResizeObserver)();
  const styles = (0, _data.useSelect)(select => {
    return select(_store.store).getSettings().styles;
  }, []); // Initialize on render instead of module top level, to avoid circular dependency issues.

  MemoizedBlockList = MemoizedBlockList || (0, _compose.pure)(_blockList.default);
  const scale = containerWidth / viewportWidth;
  return (0, _element.createElement)("div", {
    className: "block-editor-block-preview__container"
  }, containerResizeListener, (0, _element.createElement)(_components.Disabled, {
    className: "block-editor-block-preview__content",
    style: {
      transform: `scale(${scale})`,
      height: contentHeight * scale
    }
  }, (0, _element.createElement)(_iframe.default, {
    head: (0, _element.createElement)(_editorStyles.default, {
      styles: styles
    }),
    contentRef: (0, _compose.useRefEffect)(bodyElement => {
      const {
        ownerDocument: {
          documentElement
        }
      } = bodyElement;
      documentElement.style.position = 'absolute';
      documentElement.style.width = '100%';
      bodyElement.style.padding = __experimentalPadding + 'px';
    }, []),
    "aria-hidden": true,
    tabIndex: -1,
    style: {
      position: 'absolute',
      width: viewportWidth,
      height: contentHeight,
      pointerEvents: 'none'
    }
  }, contentResizeListener, (0, _element.createElement)(MemoizedBlockList, {
    renderAppender: false
  }))));
}

var _default = AutoBlockPreview;
exports.default = _default;
//# sourceMappingURL=auto.js.map
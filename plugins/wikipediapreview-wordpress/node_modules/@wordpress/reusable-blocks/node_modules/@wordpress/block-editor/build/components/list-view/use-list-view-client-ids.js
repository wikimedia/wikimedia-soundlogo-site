"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useListViewClientIds;

var _data = require("@wordpress/data");

var _utils = require("./utils");

var _store = require("../../store");

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
const useListViewClientIdsTree = (blocks, selectedClientIds, showOnlyCurrentHierarchy) => (0, _data.useSelect)(select => {
  const {
    getBlockHierarchyRootClientId,
    __unstableGetClientIdsTree,
    __unstableGetClientIdWithClientIdsTree
  } = select(_store.store);

  if (blocks) {
    return blocks;
  }

  const isSingleBlockSelected = selectedClientIds && !Array.isArray(selectedClientIds);

  if (!showOnlyCurrentHierarchy || !isSingleBlockSelected) {
    return __unstableGetClientIdsTree();
  }

  const rootBlock = __unstableGetClientIdWithClientIdsTree(getBlockHierarchyRootClientId(selectedClientIds));

  if (!rootBlock) {
    return __unstableGetClientIdsTree();
  }

  const hasHierarchy = !(0, _utils.isClientIdSelected)(rootBlock.clientId, selectedClientIds) || rootBlock.innerBlocks && rootBlock.innerBlocks.length !== 0;

  if (hasHierarchy) {
    return [rootBlock];
  }

  return __unstableGetClientIdsTree();
}, [blocks, selectedClientIds, showOnlyCurrentHierarchy]);

function useListViewClientIds(blocks, showOnlyCurrentHierarchy, __experimentalPersistentListViewFeatures) {
  const {
    selectedClientIds,
    draggedClientIds
  } = (0, _data.useSelect)(select => {
    const {
      getSelectedBlockClientId,
      getSelectedBlockClientIds,
      getDraggedBlockClientIds
    } = select(_store.store);

    if (__experimentalPersistentListViewFeatures) {
      return {
        selectedClientIds: getSelectedBlockClientIds(),
        draggedClientIds: getDraggedBlockClientIds()
      };
    }

    return {
      selectedClientIds: getSelectedBlockClientId(),
      draggedClientIds: getDraggedBlockClientIds()
    };
  }, [__experimentalPersistentListViewFeatures]);
  const clientIdsTree = useListViewClientIdsTree(blocks, selectedClientIds, showOnlyCurrentHierarchy);
  return {
    clientIdsTree,
    selectedClientIds,
    draggedClientIds
  };
}
//# sourceMappingURL=use-list-view-client-ids.js.map
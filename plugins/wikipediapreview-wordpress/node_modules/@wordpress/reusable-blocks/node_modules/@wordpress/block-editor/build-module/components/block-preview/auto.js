import { createElement } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { Disabled } from '@wordpress/components';
import { useResizeObserver, pure, useRefEffect } from '@wordpress/compose';
import { useSelect } from '@wordpress/data';
/**
 * Internal dependencies
 */

import BlockList from '../block-list';
import Iframe from '../iframe';
import EditorStyles from '../editor-styles';
import { store } from '../../store'; // This is used to avoid rendering the block list if the sizes change.

let MemoizedBlockList;

function AutoBlockPreview({
  viewportWidth,
  __experimentalPadding
}) {
  const [containerResizeListener, {
    width: containerWidth
  }] = useResizeObserver();
  const [contentResizeListener, {
    height: contentHeight
  }] = useResizeObserver();
  const styles = useSelect(select => {
    return select(store).getSettings().styles;
  }, []); // Initialize on render instead of module top level, to avoid circular dependency issues.

  MemoizedBlockList = MemoizedBlockList || pure(BlockList);
  const scale = containerWidth / viewportWidth;
  return createElement("div", {
    className: "block-editor-block-preview__container"
  }, containerResizeListener, createElement(Disabled, {
    className: "block-editor-block-preview__content",
    style: {
      transform: `scale(${scale})`,
      height: contentHeight * scale
    }
  }, createElement(Iframe, {
    head: createElement(EditorStyles, {
      styles: styles
    }),
    contentRef: useRefEffect(bodyElement => {
      const {
        ownerDocument: {
          documentElement
        }
      } = bodyElement;
      documentElement.style.position = 'absolute';
      documentElement.style.width = '100%';
      bodyElement.style.padding = __experimentalPadding + 'px';
    }, []),
    "aria-hidden": true,
    tabIndex: -1,
    style: {
      position: 'absolute',
      width: viewportWidth,
      height: contentHeight,
      pointerEvents: 'none'
    }
  }, contentResizeListener, createElement(MemoizedBlockList, {
    renderAppender: false
  }))));
}

export default AutoBlockPreview;
//# sourceMappingURL=auto.js.map
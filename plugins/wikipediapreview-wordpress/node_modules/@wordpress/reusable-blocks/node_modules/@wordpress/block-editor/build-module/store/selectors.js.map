{"version":3,"sources":["@wordpress/block-editor/src/store/selectors.js"],"names":["castArray","flatMap","first","isArray","isBoolean","last","map","reduce","some","find","filter","mapKeys","orderBy","createSelector","getBlockType","getBlockTypes","hasBlockSupport","getPossibleBlockTransformations","parse","Platform","symbol","MILLISECONDS_PER_HOUR","MILLISECONDS_PER_DAY","MILLISECONDS_PER_WEEK","EMPTY_ARRAY","getBlockName","state","clientId","block","blocks","byClientId","socialLinkName","OS","name","attributes","service","isBlockValid","isValid","getBlockAttributes","getBlock","tree","__unstableGetBlockWithoutInnerBlocks","getBlocks","rootClientId","treeKey","areInnerBlocksControlled","innerBlocks","__unstableGetClientIdWithClientIdsTree","__unstableGetClientIdsTree","order","getBlockOrder","getClientIdsOfDescendants","clientIds","descendants","getClientIdsWithDescendants","topLevelIds","getGlobalBlockCount","blockName","length","accumulator","getBlocksByClientId","getBlockCount","getSelectionStart","selection","selectionStart","getSelectionEnd","selectionEnd","getBlockSelectionStart","getBlockSelectionEnd","getSelectedBlockCount","multiSelectedBlockCount","getMultiSelectedBlockClientIds","hasSelectedBlock","getSelectedBlockClientId","getSelectedBlock","getBlockRootClientId","parents","undefined","getBlockParents","ascending","current","push","reverse","getBlockParentsByBlockName","id","Array","includes","getBlockHierarchyRootClientId","parent","getLowestCommonAncestorWithSelectedBlock","selectedId","clientParents","selectedParents","lowestCommonAncestor","maxDepth","Math","min","index","getAdjacentBlockClientId","startClientId","modifier","getFirstMultiSelectedBlockClientId","getLastMultiSelectedBlockClientId","orderSet","indexOf","nextIndex","getPreviousBlockClientId","getNextBlockClientId","getSelectedBlocksInitialCaretPosition","initialPosition","getSelectedBlockClientIds","blockOrder","startIndex","endIndex","slice","getMultiSelectedBlocks","multiSelectedBlockClientIds","getDependants","isFirstMultiSelectedBlock","isBlockMultiSelected","isAncestorMultiSelected","ancestorClientId","isMultiSelected","getMultiSelectedBlocksStartClientId","getMultiSelectedBlocksEndClientId","getBlockIndex","isBlockSelected","hasSelectedInnerBlock","deep","innerClientId","isBlockWithinSelection","hasMultiSelection","isMultiSelecting","isSelectionEnabled","getBlockMode","blocksMode","isTyping","isDraggingBlocks","draggedBlocks","getDraggedBlockClientIds","isBlockBeingDragged","isAncestorBeingDragged","parentClientId","isCaretWithinFormattedText","getBlockInsertionPoint","insertionPoint","isBlockInsertionPointVisible","isValidTemplate","template","getTemplate","settings","getTemplateLock","templateLock","blockListSettings","getBlockListSettings","checkAllowList","list","item","defaultResult","canInsertBlockTypeUnmemoized","blockType","allowedBlockTypes","getSettings","isBlockAllowedInEditor","isLocked","parentBlockListSettings","parentAllowedBlocks","allowedBlocks","hasParentAllowedBlock","blockAllowedParentBlocks","parentName","hasBlockAllowedParent","canInsertBlockType","canInsertBlocks","every","canRemoveBlock","lock","parentIsLocked","remove","canRemoveBlocks","canMoveBlock","move","canMoveBlocks","getInsertUsage","preferences","insertUsage","canIncludeBlockTypeInInserter","getItemFromVariation","variation","variationId","time","count","icon","title","description","category","example","hasOwnProperty","initialAttributes","keywords","frecency","calculateFrecency","duration","Date","now","buildBlockTypeItem","buildScope","isDisabled","blockItemBase","inserterVariations","variations","scope","utility","getInserterItems","buildBlockTypeInserterItem","buildReusableBlockInserterItem","reusableBlock","referencedBlocks","__experimentalGetParsedReusableBlock","referencedBlockType","ref","raw","blockTypeInserterItems","reusableBlockInserterItems","getReusableBlocks","visibleBlockTypeInserterItems","isDefault","blockVariations","variationMapper","groupByType","core","noncore","type","startsWith","items","sortedBlockTypes","getBlockTransformItems","buildBlockTypeTransformItem","blockTypeTransformItems","itemsByName","possibleTransforms","possibleBlockTransformations","hasInserterItems","hasBlockType","hasReusableBlock","__experimentalGetAllowedBlocks","__experimentalGetDirectInsertBlock","defaultBlock","__experimentalDefaultBlock","directInsert","__experimentalDirectInsert","checkAllowListRecursive","blocksQueue","shift","isAllowed","forEach","innerBlock","__experimentalGetParsedPattern","patternName","patterns","__experimentalBlockPatterns","pattern","content","getAllAllowedPatterns","parsedPatterns","allowedPatterns","__experimentalGetAllowedPatterns","availableParsedPatterns","patternsAllowed","__experimentalGetPatternsByBlockTypes","blockNames","normalizedBlockNames","blockTypes","__experimentalGetPatternTransformItems","selectedBlockNames","from","Set","isLastBlockChangePersistent","isPersistentChange","__experimentalGetBlockListSettingsForBlocks","blockListSettingsForBlocks","__experimentalGetReusableBlockTitle","__unstableIsLastBlockChangeIgnored","isIgnoredChange","__experimentalGetLastBlockAttributeChanges","lastBlockAttributesChange","__experimentalReusableBlocks","isNavigationMode","hasBlockMovingClientId","didAutomaticChange","automaticChangeStatus","isBlockHighlighted","highlightedBlock","controlledInnerBlocks","__experimentalGetActiveBlockIdByBlockNames","validBlockNames","selectedBlockClientId","entityAreaParents","wasBlockJustInserted","source","lastBlockInserted"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport {\n\tcastArray,\n\tflatMap,\n\tfirst,\n\tisArray,\n\tisBoolean,\n\tlast,\n\tmap,\n\treduce,\n\tsome,\n\tfind,\n\tfilter,\n\tmapKeys,\n\torderBy,\n} from 'lodash';\nimport createSelector from 'rememo';\n\n/**\n * WordPress dependencies\n */\nimport {\n\tgetBlockType,\n\tgetBlockTypes,\n\thasBlockSupport,\n\tgetPossibleBlockTransformations,\n\tparse,\n} from '@wordpress/blocks';\nimport { Platform } from '@wordpress/element';\nimport { symbol } from '@wordpress/icons';\n\n/**\n * A block selection object.\n *\n * @typedef {Object} WPBlockSelection\n *\n * @property {string} clientId     A block client ID.\n * @property {string} attributeKey A block attribute key.\n * @property {number} offset       An attribute value offset, based on the rich\n *                                 text value. See `wp.richText.create`.\n */\n\n// Module constants\nconst MILLISECONDS_PER_HOUR = 3600 * 1000;\nconst MILLISECONDS_PER_DAY = 24 * 3600 * 1000;\nconst MILLISECONDS_PER_WEEK = 7 * 24 * 3600 * 1000;\n\n/**\n * Shared reference to an empty array for cases where it is important to avoid\n * returning a new array reference on every invocation, as in a connected or\n * other pure component which performs `shouldComponentUpdate` check on props.\n * This should be used as a last resort, since the normalized data should be\n * maintained by the reducer result in state.\n *\n * @type {Array}\n */\nconst EMPTY_ARRAY = [];\n\n/**\n * Returns a block's name given its client ID, or null if no block exists with\n * the client ID.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {string} Block name.\n */\nexport function getBlockName( state, clientId ) {\n\tconst block = state.blocks.byClientId[ clientId ];\n\tconst socialLinkName = 'core/social-link';\n\n\tif ( Platform.OS !== 'web' && block?.name === socialLinkName ) {\n\t\tconst attributes = state.blocks.attributes[ clientId ];\n\t\tconst { service } = attributes;\n\n\t\treturn service ? `${ socialLinkName }-${ service }` : socialLinkName;\n\t}\n\treturn block ? block.name : null;\n}\n\n/**\n * Returns whether a block is valid or not.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {boolean} Is Valid.\n */\nexport function isBlockValid( state, clientId ) {\n\tconst block = state.blocks.byClientId[ clientId ];\n\treturn !! block && block.isValid;\n}\n\n/**\n * Returns a block's attributes given its client ID, or null if no block exists with\n * the client ID.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {Object?} Block attributes.\n */\nexport function getBlockAttributes( state, clientId ) {\n\tconst block = state.blocks.byClientId[ clientId ];\n\tif ( ! block ) {\n\t\treturn null;\n\t}\n\n\treturn state.blocks.attributes[ clientId ];\n}\n\n/**\n * Returns a block given its client ID. This is a parsed copy of the block,\n * containing its `blockName`, `clientId`, and current `attributes` state. This\n * is not the block's registration settings, which must be retrieved from the\n * blocks module registration store.\n *\n * getBlock recurses through its inner blocks until all its children blocks have\n * been retrieved. Note that getBlock will not return the child inner blocks of\n * an inner block controller. This is because an inner block controller syncs\n * itself with its own entity, and should therefore not be included with the\n * blocks of a different entity. For example, say you call `getBlocks( TP )` to\n * get the blocks of a template part. If another template part is a child of TP,\n * then the nested template part's child blocks will not be returned. This way,\n * the template block itself is considered part of the parent, but the children\n * are not.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {Object} Parsed block object.\n */\nexport function getBlock( state, clientId ) {\n\tconst block = state.blocks.byClientId[ clientId ];\n\tif ( ! block ) {\n\t\treturn null;\n\t}\n\n\treturn state.blocks.tree[ clientId ];\n}\n\nexport const __unstableGetBlockWithoutInnerBlocks = createSelector(\n\t( state, clientId ) => {\n\t\tconst block = state.blocks.byClientId[ clientId ];\n\t\tif ( ! block ) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn {\n\t\t\t...block,\n\t\t\tattributes: getBlockAttributes( state, clientId ),\n\t\t};\n\t},\n\t( state, clientId ) => [\n\t\tstate.blocks.byClientId[ clientId ],\n\t\tstate.blocks.attributes[ clientId ],\n\t]\n);\n\n/**\n * Returns all block objects for the current post being edited as an array in\n * the order they appear in the post. Note that this will exclude child blocks\n * of nested inner block controllers.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {Object[]} Post blocks.\n */\nexport function getBlocks( state, rootClientId ) {\n\tconst treeKey =\n\t\t! rootClientId || ! areInnerBlocksControlled( state, rootClientId )\n\t\t\t? rootClientId || ''\n\t\t\t: 'controlled||' + rootClientId;\n\treturn state.blocks.tree[ treeKey ]?.innerBlocks || EMPTY_ARRAY;\n}\n\n/**\n * Returns a stripped down block object containing only its client ID,\n * and its inner blocks' client IDs.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Client ID of the block to get.\n *\n * @return {Object} Client IDs of the post blocks.\n */\nexport const __unstableGetClientIdWithClientIdsTree = createSelector(\n\t( state, clientId ) => ( {\n\t\tclientId,\n\t\tinnerBlocks: __unstableGetClientIdsTree( state, clientId ),\n\t} ),\n\t( state ) => [ state.blocks.order ]\n);\n\n/**\n * Returns the block tree represented in the block-editor store from the\n * given root, consisting of stripped down block objects containing only\n * their client IDs, and their inner blocks' client IDs.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {Object[]} Client IDs of the post blocks.\n */\nexport const __unstableGetClientIdsTree = createSelector(\n\t( state, rootClientId = '' ) =>\n\t\tmap( getBlockOrder( state, rootClientId ), ( clientId ) =>\n\t\t\t__unstableGetClientIdWithClientIdsTree( state, clientId )\n\t\t),\n\t( state ) => [ state.blocks.order ]\n);\n\n/**\n * Returns an array containing the clientIds of all descendants\n * of the blocks given.\n *\n * @param {Object} state     Global application state.\n * @param {Array}  clientIds Array of blocks to inspect.\n *\n * @return {Array} ids of descendants.\n */\nexport const getClientIdsOfDescendants = ( state, clientIds ) =>\n\tflatMap( clientIds, ( clientId ) => {\n\t\tconst descendants = getBlockOrder( state, clientId );\n\t\treturn [\n\t\t\t...descendants,\n\t\t\t...getClientIdsOfDescendants( state, descendants ),\n\t\t];\n\t} );\n\n/**\n * Returns an array containing the clientIds of the top-level blocks\n * and their descendants of any depth (for nested blocks).\n *\n * @param {Object} state Global application state.\n *\n * @return {Array} ids of top-level and descendant blocks.\n */\nexport const getClientIdsWithDescendants = createSelector(\n\t( state ) => {\n\t\tconst topLevelIds = getBlockOrder( state );\n\t\treturn [\n\t\t\t...topLevelIds,\n\t\t\t...getClientIdsOfDescendants( state, topLevelIds ),\n\t\t];\n\t},\n\t( state ) => [ state.blocks.order ]\n);\n\n/**\n * Returns the total number of blocks, or the total number of blocks with a specific name in a post.\n * The number returned includes nested blocks.\n *\n * @param {Object}  state     Global application state.\n * @param {?string} blockName Optional block name, if specified only blocks of that type will be counted.\n *\n * @return {number} Number of blocks in the post, or number of blocks with name equal to blockName.\n */\nexport const getGlobalBlockCount = createSelector(\n\t( state, blockName ) => {\n\t\tconst clientIds = getClientIdsWithDescendants( state );\n\t\tif ( ! blockName ) {\n\t\t\treturn clientIds.length;\n\t\t}\n\t\treturn reduce(\n\t\t\tclientIds,\n\t\t\t( accumulator, clientId ) => {\n\t\t\t\tconst block = state.blocks.byClientId[ clientId ];\n\t\t\t\treturn block.name === blockName ? accumulator + 1 : accumulator;\n\t\t\t},\n\t\t\t0\n\t\t);\n\t},\n\t( state ) => [ state.blocks.order, state.blocks.byClientId ]\n);\n\n/**\n * Given an array of block client IDs, returns the corresponding array of block\n * objects.\n *\n * @param {Object}   state     Editor state.\n * @param {string[]} clientIds Client IDs for which blocks are to be returned.\n *\n * @return {WPBlock[]} Block objects.\n */\nexport const getBlocksByClientId = createSelector(\n\t( state, clientIds ) =>\n\t\tmap( castArray( clientIds ), ( clientId ) =>\n\t\t\tgetBlock( state, clientId )\n\t\t),\n\t( state, clientIds ) =>\n\t\tmap(\n\t\t\tcastArray( clientIds ),\n\t\t\t( clientId ) => state.blocks.tree[ clientId ]\n\t\t)\n);\n\n/**\n * Returns the number of blocks currently present in the post.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {number} Number of blocks in the post.\n */\nexport function getBlockCount( state, rootClientId ) {\n\treturn getBlockOrder( state, rootClientId ).length;\n}\n\n/**\n * Returns the current selection start block client ID, attribute key and text\n * offset.\n *\n * @param {Object} state Block editor state.\n *\n * @return {WPBlockSelection} Selection start information.\n */\nexport function getSelectionStart( state ) {\n\treturn state.selection.selectionStart;\n}\n\n/**\n * Returns the current selection end block client ID, attribute key and text\n * offset.\n *\n * @param {Object} state Block editor state.\n *\n * @return {WPBlockSelection} Selection end information.\n */\nexport function getSelectionEnd( state ) {\n\treturn state.selection.selectionEnd;\n}\n\n/**\n * Returns the current block selection start. This value may be null, and it\n * may represent either a singular block selection or multi-selection start.\n * A selection is singular if its start and end match.\n *\n * @param {Object} state Global application state.\n *\n * @return {?string} Client ID of block selection start.\n */\nexport function getBlockSelectionStart( state ) {\n\treturn state.selection.selectionStart.clientId;\n}\n\n/**\n * Returns the current block selection end. This value may be null, and it\n * may represent either a singular block selection or multi-selection end.\n * A selection is singular if its start and end match.\n *\n * @param {Object} state Global application state.\n *\n * @return {?string} Client ID of block selection end.\n */\nexport function getBlockSelectionEnd( state ) {\n\treturn state.selection.selectionEnd.clientId;\n}\n\n/**\n * Returns the number of blocks currently selected in the post.\n *\n * @param {Object} state Global application state.\n *\n * @return {number} Number of blocks selected in the post.\n */\nexport function getSelectedBlockCount( state ) {\n\tconst multiSelectedBlockCount = getMultiSelectedBlockClientIds( state )\n\t\t.length;\n\n\tif ( multiSelectedBlockCount ) {\n\t\treturn multiSelectedBlockCount;\n\t}\n\n\treturn state.selection.selectionStart.clientId ? 1 : 0;\n}\n\n/**\n * Returns true if there is a single selected block, or false otherwise.\n *\n * @param {Object} state Editor state.\n *\n * @return {boolean} Whether a single block is selected.\n */\nexport function hasSelectedBlock( state ) {\n\tconst { selectionStart, selectionEnd } = state.selection;\n\treturn (\n\t\t!! selectionStart.clientId &&\n\t\tselectionStart.clientId === selectionEnd.clientId\n\t);\n}\n\n/**\n * Returns the currently selected block client ID, or null if there is no\n * selected block.\n *\n * @param {Object} state Editor state.\n *\n * @return {?string} Selected block client ID.\n */\nexport function getSelectedBlockClientId( state ) {\n\tconst { selectionStart, selectionEnd } = state.selection;\n\tconst { clientId } = selectionStart;\n\n\tif ( ! clientId || clientId !== selectionEnd.clientId ) {\n\t\treturn null;\n\t}\n\n\treturn clientId;\n}\n\n/**\n * Returns the currently selected block, or null if there is no selected block.\n *\n * @param {Object} state Global application state.\n *\n * @return {?Object} Selected block.\n */\nexport function getSelectedBlock( state ) {\n\tconst clientId = getSelectedBlockClientId( state );\n\treturn clientId ? getBlock( state, clientId ) : null;\n}\n\n/**\n * Given a block client ID, returns the root block from which the block is\n * nested, an empty string for top-level blocks, or null if the block does not\n * exist.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block from which to find root client ID.\n *\n * @return {?string} Root client ID, if exists\n */\nexport function getBlockRootClientId( state, clientId ) {\n\treturn state.blocks.parents[ clientId ] !== undefined\n\t\t? state.blocks.parents[ clientId ]\n\t\t: null;\n}\n\n/**\n * Given a block client ID, returns the list of all its parents from top to bottom.\n *\n * @param {Object}  state     Editor state.\n * @param {string}  clientId  Block from which to find root client ID.\n * @param {boolean} ascending Order results from bottom to top (true) or top to bottom (false).\n *\n * @return {Array} ClientIDs of the parent blocks.\n */\nexport const getBlockParents = createSelector(\n\t( state, clientId, ascending = false ) => {\n\t\tconst parents = [];\n\t\tlet current = clientId;\n\t\twhile ( !! state.blocks.parents[ current ] ) {\n\t\t\tcurrent = state.blocks.parents[ current ];\n\t\t\tparents.push( current );\n\t\t}\n\n\t\treturn ascending ? parents : parents.reverse();\n\t},\n\t( state ) => [ state.blocks.parents ]\n);\n\n/**\n * Given a block client ID and a block name, returns the list of all its parents\n * from top to bottom, filtered by the given name(s). For example, if passed\n * 'core/group' as the blockName, it will only return parents which are group\n * blocks. If passed `[ 'core/group', 'core/cover']`, as the blockName, it will\n * return parents which are group blocks and parents which are cover blocks.\n *\n * @param {Object}          state     Editor state.\n * @param {string}          clientId  Block from which to find root client ID.\n * @param {string|string[]} blockName Block name(s) to filter.\n * @param {boolean}         ascending Order results from bottom to top (true) or top to bottom (false).\n *\n * @return {Array} ClientIDs of the parent blocks.\n */\nexport const getBlockParentsByBlockName = createSelector(\n\t( state, clientId, blockName, ascending = false ) => {\n\t\tconst parents = getBlockParents( state, clientId, ascending );\n\t\treturn map(\n\t\t\tfilter(\n\t\t\t\tmap( parents, ( id ) => ( {\n\t\t\t\t\tid,\n\t\t\t\t\tname: getBlockName( state, id ),\n\t\t\t\t} ) ),\n\t\t\t\t( { name } ) => {\n\t\t\t\t\tif ( Array.isArray( blockName ) ) {\n\t\t\t\t\t\treturn blockName.includes( name );\n\t\t\t\t\t}\n\t\t\t\t\treturn name === blockName;\n\t\t\t\t}\n\t\t\t),\n\t\t\t( { id } ) => id\n\t\t);\n\t},\n\t( state ) => [ state.blocks.parents ]\n);\n\n/**\n * Given a block client ID, returns the root of the hierarchy from which the block is nested, return the block itself for root level blocks.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block from which to find root client ID.\n *\n * @return {string} Root client ID\n */\nexport function getBlockHierarchyRootClientId( state, clientId ) {\n\tlet current = clientId;\n\tlet parent;\n\tdo {\n\t\tparent = current;\n\t\tcurrent = state.blocks.parents[ current ];\n\t} while ( current );\n\treturn parent;\n}\n\n/**\n * Given a block client ID, returns the lowest common ancestor with selected client ID.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block from which to find common ancestor client ID.\n *\n * @return {string} Common ancestor client ID or undefined\n */\nexport function getLowestCommonAncestorWithSelectedBlock( state, clientId ) {\n\tconst selectedId = getSelectedBlockClientId( state );\n\tconst clientParents = [ ...getBlockParents( state, clientId ), clientId ];\n\tconst selectedParents = [\n\t\t...getBlockParents( state, selectedId ),\n\t\tselectedId,\n\t];\n\n\tlet lowestCommonAncestor;\n\n\tconst maxDepth = Math.min( clientParents.length, selectedParents.length );\n\tfor ( let index = 0; index < maxDepth; index++ ) {\n\t\tif ( clientParents[ index ] === selectedParents[ index ] ) {\n\t\t\tlowestCommonAncestor = clientParents[ index ];\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn lowestCommonAncestor;\n}\n\n/**\n * Returns the client ID of the block adjacent one at the given reference\n * startClientId and modifier directionality. Defaults start startClientId to\n * the selected block, and direction as next block. Returns null if there is no\n * adjacent block.\n *\n * @param {Object}  state         Editor state.\n * @param {?string} startClientId Optional client ID of block from which to\n *                                search.\n * @param {?number} modifier      Directionality multiplier (1 next, -1\n *                                previous).\n *\n * @return {?string} Return the client ID of the block, or null if none exists.\n */\nexport function getAdjacentBlockClientId( state, startClientId, modifier = 1 ) {\n\t// Default to selected block.\n\tif ( startClientId === undefined ) {\n\t\tstartClientId = getSelectedBlockClientId( state );\n\t}\n\n\t// Try multi-selection starting at extent based on modifier.\n\tif ( startClientId === undefined ) {\n\t\tif ( modifier < 0 ) {\n\t\t\tstartClientId = getFirstMultiSelectedBlockClientId( state );\n\t\t} else {\n\t\t\tstartClientId = getLastMultiSelectedBlockClientId( state );\n\t\t}\n\t}\n\n\t// Validate working start client ID.\n\tif ( ! startClientId ) {\n\t\treturn null;\n\t}\n\n\t// Retrieve start block root client ID, being careful to allow the falsey\n\t// empty string top-level root by explicitly testing against null.\n\tconst rootClientId = getBlockRootClientId( state, startClientId );\n\tif ( rootClientId === null ) {\n\t\treturn null;\n\t}\n\n\tconst { order } = state.blocks;\n\tconst orderSet = order[ rootClientId ];\n\tconst index = orderSet.indexOf( startClientId );\n\tconst nextIndex = index + 1 * modifier;\n\n\t// Block was first in set and we're attempting to get previous.\n\tif ( nextIndex < 0 ) {\n\t\treturn null;\n\t}\n\n\t// Block was last in set and we're attempting to get next.\n\tif ( nextIndex === orderSet.length ) {\n\t\treturn null;\n\t}\n\n\t// Assume incremented index is within the set.\n\treturn orderSet[ nextIndex ];\n}\n\n/**\n * Returns the previous block's client ID from the given reference start ID.\n * Defaults start to the selected block. Returns null if there is no previous\n * block.\n *\n * @param {Object}  state         Editor state.\n * @param {?string} startClientId Optional client ID of block from which to\n *                                search.\n *\n * @return {?string} Adjacent block's client ID, or null if none exists.\n */\nexport function getPreviousBlockClientId( state, startClientId ) {\n\treturn getAdjacentBlockClientId( state, startClientId, -1 );\n}\n\n/**\n * Returns the next block's client ID from the given reference start ID.\n * Defaults start to the selected block. Returns null if there is no next\n * block.\n *\n * @param {Object}  state         Editor state.\n * @param {?string} startClientId Optional client ID of block from which to\n *                                search.\n *\n * @return {?string} Adjacent block's client ID, or null if none exists.\n */\nexport function getNextBlockClientId( state, startClientId ) {\n\treturn getAdjacentBlockClientId( state, startClientId, 1 );\n}\n\n/* eslint-disable jsdoc/valid-types */\n/**\n * Returns the initial caret position for the selected block.\n * This position is to used to position the caret properly when the selected block changes.\n * If the current block is not a RichText, having initial position set to 0 means \"focus block\"\n *\n * @param {Object} state Global application state.\n *\n * @return {0|-1|null} Initial position.\n */\nexport function getSelectedBlocksInitialCaretPosition( state ) {\n\t/* eslint-enable jsdoc/valid-types */\n\treturn state.initialPosition;\n}\n\n/**\n * Returns the current selection set of block client IDs (multiselection or single selection).\n *\n * @param {Object} state Editor state.\n *\n * @return {Array} Multi-selected block client IDs.\n */\nexport const getSelectedBlockClientIds = createSelector(\n\t( state ) => {\n\t\tconst { selectionStart, selectionEnd } = state.selection;\n\n\t\tif (\n\t\t\tselectionStart.clientId === undefined ||\n\t\t\tselectionEnd.clientId === undefined\n\t\t) {\n\t\t\treturn EMPTY_ARRAY;\n\t\t}\n\n\t\tif ( selectionStart.clientId === selectionEnd.clientId ) {\n\t\t\treturn [ selectionStart.clientId ];\n\t\t}\n\n\t\t// Retrieve root client ID to aid in retrieving relevant nested block\n\t\t// order, being careful to allow the falsey empty string top-level root\n\t\t// by explicitly testing against null.\n\t\tconst rootClientId = getBlockRootClientId(\n\t\t\tstate,\n\t\t\tselectionStart.clientId\n\t\t);\n\t\tif ( rootClientId === null ) {\n\t\t\treturn EMPTY_ARRAY;\n\t\t}\n\n\t\tconst blockOrder = getBlockOrder( state, rootClientId );\n\t\tconst startIndex = blockOrder.indexOf( selectionStart.clientId );\n\t\tconst endIndex = blockOrder.indexOf( selectionEnd.clientId );\n\n\t\tif ( startIndex > endIndex ) {\n\t\t\treturn blockOrder.slice( endIndex, startIndex + 1 );\n\t\t}\n\n\t\treturn blockOrder.slice( startIndex, endIndex + 1 );\n\t},\n\t( state ) => [\n\t\tstate.blocks.order,\n\t\tstate.selection.selectionStart.clientId,\n\t\tstate.selection.selectionEnd.clientId,\n\t]\n);\n\n/**\n * Returns the current multi-selection set of block client IDs, or an empty\n * array if there is no multi-selection.\n *\n * @param {Object} state Editor state.\n *\n * @return {Array} Multi-selected block client IDs.\n */\nexport function getMultiSelectedBlockClientIds( state ) {\n\tconst { selectionStart, selectionEnd } = state.selection;\n\n\tif ( selectionStart.clientId === selectionEnd.clientId ) {\n\t\treturn EMPTY_ARRAY;\n\t}\n\n\treturn getSelectedBlockClientIds( state );\n}\n\n/**\n * Returns the current multi-selection set of blocks, or an empty array if\n * there is no multi-selection.\n *\n * @param {Object} state Editor state.\n *\n * @return {Array} Multi-selected block objects.\n */\nexport const getMultiSelectedBlocks = createSelector(\n\t( state ) => {\n\t\tconst multiSelectedBlockClientIds = getMultiSelectedBlockClientIds(\n\t\t\tstate\n\t\t);\n\t\tif ( ! multiSelectedBlockClientIds.length ) {\n\t\t\treturn EMPTY_ARRAY;\n\t\t}\n\n\t\treturn multiSelectedBlockClientIds.map( ( clientId ) =>\n\t\t\tgetBlock( state, clientId )\n\t\t);\n\t},\n\t( state ) => [\n\t\t...getSelectedBlockClientIds.getDependants( state ),\n\t\tstate.blocks.byClientId,\n\t\tstate.blocks.order,\n\t\tstate.blocks.attributes,\n\t]\n);\n\n/**\n * Returns the client ID of the first block in the multi-selection set, or null\n * if there is no multi-selection.\n *\n * @param {Object} state Editor state.\n *\n * @return {?string} First block client ID in the multi-selection set.\n */\nexport function getFirstMultiSelectedBlockClientId( state ) {\n\treturn first( getMultiSelectedBlockClientIds( state ) ) || null;\n}\n\n/**\n * Returns the client ID of the last block in the multi-selection set, or null\n * if there is no multi-selection.\n *\n * @param {Object} state Editor state.\n *\n * @return {?string} Last block client ID in the multi-selection set.\n */\nexport function getLastMultiSelectedBlockClientId( state ) {\n\treturn last( getMultiSelectedBlockClientIds( state ) ) || null;\n}\n\n/**\n * Returns true if a multi-selection exists, and the block corresponding to the\n * specified client ID is the first block of the multi-selection set, or false\n * otherwise.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {boolean} Whether block is first in multi-selection.\n */\nexport function isFirstMultiSelectedBlock( state, clientId ) {\n\treturn getFirstMultiSelectedBlockClientId( state ) === clientId;\n}\n\n/**\n * Returns true if the client ID occurs within the block multi-selection, or\n * false otherwise.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {boolean} Whether block is in multi-selection set.\n */\nexport function isBlockMultiSelected( state, clientId ) {\n\treturn getMultiSelectedBlockClientIds( state ).indexOf( clientId ) !== -1;\n}\n\n/**\n * Returns true if an ancestor of the block is multi-selected, or false\n * otherwise.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {boolean} Whether an ancestor of the block is in multi-selection\n *                   set.\n */\nexport const isAncestorMultiSelected = createSelector(\n\t( state, clientId ) => {\n\t\tlet ancestorClientId = clientId;\n\t\tlet isMultiSelected = false;\n\t\twhile ( ancestorClientId && ! isMultiSelected ) {\n\t\t\tancestorClientId = getBlockRootClientId( state, ancestorClientId );\n\t\t\tisMultiSelected = isBlockMultiSelected( state, ancestorClientId );\n\t\t}\n\t\treturn isMultiSelected;\n\t},\n\t( state ) => [\n\t\tstate.blocks.order,\n\t\tstate.selection.selectionStart.clientId,\n\t\tstate.selection.selectionEnd.clientId,\n\t]\n);\n/**\n * Returns the client ID of the block which begins the multi-selection set, or\n * null if there is no multi-selection.\n *\n * This is not necessarily the first client ID in the selection.\n *\n * @see getFirstMultiSelectedBlockClientId\n *\n * @param {Object} state Editor state.\n *\n * @return {?string} Client ID of block beginning multi-selection.\n */\nexport function getMultiSelectedBlocksStartClientId( state ) {\n\tconst { selectionStart, selectionEnd } = state.selection;\n\n\tif ( selectionStart.clientId === selectionEnd.clientId ) {\n\t\treturn null;\n\t}\n\n\treturn selectionStart.clientId || null;\n}\n\n/**\n * Returns the client ID of the block which ends the multi-selection set, or\n * null if there is no multi-selection.\n *\n * This is not necessarily the last client ID in the selection.\n *\n * @see getLastMultiSelectedBlockClientId\n *\n * @param {Object} state Editor state.\n *\n * @return {?string} Client ID of block ending multi-selection.\n */\nexport function getMultiSelectedBlocksEndClientId( state ) {\n\tconst { selectionStart, selectionEnd } = state.selection;\n\n\tif ( selectionStart.clientId === selectionEnd.clientId ) {\n\t\treturn null;\n\t}\n\n\treturn selectionEnd.clientId || null;\n}\n\n/**\n * Returns an array containing all block client IDs in the editor in the order\n * they appear. Optionally accepts a root client ID of the block list for which\n * the order should be returned, defaulting to the top-level block order.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {Array} Ordered client IDs of editor blocks.\n */\nexport function getBlockOrder( state, rootClientId ) {\n\treturn state.blocks.order[ rootClientId || '' ] || EMPTY_ARRAY;\n}\n\n/**\n * Returns the index at which the block corresponding to the specified client\n * ID occurs within the block order, or `-1` if the block does not exist.\n *\n * @param {Object}  state        Editor state.\n * @param {string}  clientId     Block client ID.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {number} Index at which block exists in order.\n */\nexport function getBlockIndex( state, clientId, rootClientId ) {\n\treturn getBlockOrder( state, rootClientId ).indexOf( clientId );\n}\n\n/**\n * Returns true if the block corresponding to the specified client ID is\n * currently selected and no multi-selection exists, or false otherwise.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {boolean} Whether block is selected and multi-selection exists.\n */\nexport function isBlockSelected( state, clientId ) {\n\tconst { selectionStart, selectionEnd } = state.selection;\n\n\tif ( selectionStart.clientId !== selectionEnd.clientId ) {\n\t\treturn false;\n\t}\n\n\treturn selectionStart.clientId === clientId;\n}\n\n/**\n * Returns true if one of the block's inner blocks is selected.\n *\n * @param {Object}  state    Editor state.\n * @param {string}  clientId Block client ID.\n * @param {boolean} deep     Perform a deep check.\n *\n * @return {boolean} Whether the block as an inner block selected\n */\nexport function hasSelectedInnerBlock( state, clientId, deep = false ) {\n\treturn some(\n\t\tgetBlockOrder( state, clientId ),\n\t\t( innerClientId ) =>\n\t\t\tisBlockSelected( state, innerClientId ) ||\n\t\t\tisBlockMultiSelected( state, innerClientId ) ||\n\t\t\t( deep && hasSelectedInnerBlock( state, innerClientId, deep ) )\n\t);\n}\n\n/**\n * Returns true if the block corresponding to the specified client ID is\n * currently selected but isn't the last of the selected blocks. Here \"last\"\n * refers to the block sequence in the document, _not_ the sequence of\n * multi-selection, which is why `state.selectionEnd` isn't used.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {boolean} Whether block is selected and not the last in the\n *                   selection.\n */\nexport function isBlockWithinSelection( state, clientId ) {\n\tif ( ! clientId ) {\n\t\treturn false;\n\t}\n\n\tconst clientIds = getMultiSelectedBlockClientIds( state );\n\tconst index = clientIds.indexOf( clientId );\n\treturn index > -1 && index < clientIds.length - 1;\n}\n\n/**\n * Returns true if a multi-selection has been made, or false otherwise.\n *\n * @param {Object} state Editor state.\n *\n * @return {boolean} Whether multi-selection has been made.\n */\nexport function hasMultiSelection( state ) {\n\tconst { selectionStart, selectionEnd } = state.selection;\n\treturn selectionStart.clientId !== selectionEnd.clientId;\n}\n\n/**\n * Whether in the process of multi-selecting or not. This flag is only true\n * while the multi-selection is being selected (by mouse move), and is false\n * once the multi-selection has been settled.\n *\n * @see hasMultiSelection\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} True if multi-selecting, false if not.\n */\nexport function isMultiSelecting( state ) {\n\treturn state.isMultiSelecting;\n}\n\n/**\n * Selector that returns if multi-selection is enabled or not.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} True if it should be possible to multi-select blocks, false if multi-selection is disabled.\n */\nexport function isSelectionEnabled( state ) {\n\treturn state.isSelectionEnabled;\n}\n\n/**\n * Returns the block's editing mode, defaulting to \"visual\" if not explicitly\n * assigned.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {Object} Block editing mode.\n */\nexport function getBlockMode( state, clientId ) {\n\treturn state.blocksMode[ clientId ] || 'visual';\n}\n\n/**\n * Returns true if the user is typing, or false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether user is typing.\n */\nexport function isTyping( state ) {\n\treturn state.isTyping;\n}\n\n/**\n * Returns true if the user is dragging blocks, or false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether user is dragging blocks.\n */\nexport function isDraggingBlocks( state ) {\n\treturn !! state.draggedBlocks.length;\n}\n\n/**\n * Returns the client ids of any blocks being directly dragged.\n *\n * This does not include children of a parent being dragged.\n *\n * @param {Object} state Global application state.\n *\n * @return {string[]} Array of dragged block client ids.\n */\nexport function getDraggedBlockClientIds( state ) {\n\treturn state.draggedBlocks;\n}\n\n/**\n * Returns whether the block is being dragged.\n *\n * Only returns true if the block is being directly dragged,\n * not if the block is a child of a parent being dragged.\n * See `isAncestorBeingDragged` for child blocks.\n *\n * @param {Object} state    Global application state.\n * @param {string} clientId Client id for block to check.\n *\n * @return {boolean} Whether the block is being dragged.\n */\nexport function isBlockBeingDragged( state, clientId ) {\n\treturn state.draggedBlocks.includes( clientId );\n}\n\n/**\n * Returns whether a parent/ancestor of the block is being dragged.\n *\n * @param {Object} state    Global application state.\n * @param {string} clientId Client id for block to check.\n *\n * @return {boolean} Whether the block's ancestor is being dragged.\n */\nexport function isAncestorBeingDragged( state, clientId ) {\n\t// Return early if no blocks are being dragged rather than\n\t// the more expensive check for parents.\n\tif ( ! isDraggingBlocks( state ) ) {\n\t\treturn false;\n\t}\n\n\tconst parents = getBlockParents( state, clientId );\n\treturn some( parents, ( parentClientId ) =>\n\t\tisBlockBeingDragged( state, parentClientId )\n\t);\n}\n\n/**\n * Returns true if the caret is within formatted text, or false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the caret is within formatted text.\n */\nexport function isCaretWithinFormattedText( state ) {\n\treturn state.isCaretWithinFormattedText;\n}\n\n/**\n * Returns the insertion point, the index at which the new inserted block would\n * be placed. Defaults to the last index.\n *\n * @param {Object} state Editor state.\n *\n * @return {Object} Insertion point object with `rootClientId`, `index`.\n */\nexport function getBlockInsertionPoint( state ) {\n\tlet rootClientId, index;\n\n\tconst {\n\t\tinsertionPoint,\n\t\tselection: { selectionEnd },\n\t} = state;\n\tif ( insertionPoint !== null ) {\n\t\treturn insertionPoint;\n\t}\n\n\tconst { clientId } = selectionEnd;\n\n\tif ( clientId ) {\n\t\trootClientId = getBlockRootClientId( state, clientId ) || undefined;\n\t\tindex = getBlockIndex( state, selectionEnd.clientId, rootClientId ) + 1;\n\t} else {\n\t\tindex = getBlockOrder( state ).length;\n\t}\n\n\treturn { rootClientId, index };\n}\n\n/**\n * Returns true if we should show the block insertion point.\n *\n * @param {Object} state Global application state.\n *\n * @return {?boolean} Whether the insertion point is visible or not.\n */\nexport function isBlockInsertionPointVisible( state ) {\n\treturn state.insertionPoint !== null;\n}\n\n/**\n * Returns whether the blocks matches the template or not.\n *\n * @param {boolean} state\n * @return {?boolean} Whether the template is valid or not.\n */\nexport function isValidTemplate( state ) {\n\treturn state.template.isValid;\n}\n\n/**\n * Returns the defined block template\n *\n * @param {boolean} state\n *\n * @return {?Array} Block Template.\n */\nexport function getTemplate( state ) {\n\treturn state.settings.template;\n}\n\n/**\n * Returns the defined block template lock. Optionally accepts a root block\n * client ID as context, otherwise defaulting to the global context.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional block root client ID.\n *\n * @return {?string} Block Template Lock\n */\nexport function getTemplateLock( state, rootClientId ) {\n\tif ( ! rootClientId ) {\n\t\treturn state.settings.templateLock;\n\t}\n\n\tconst blockListSettings = getBlockListSettings( state, rootClientId );\n\tif ( ! blockListSettings ) {\n\t\treturn null;\n\t}\n\n\treturn blockListSettings.templateLock;\n}\n\nconst checkAllowList = ( list, item, defaultResult = null ) => {\n\tif ( isBoolean( list ) ) {\n\t\treturn list;\n\t}\n\tif ( isArray( list ) ) {\n\t\t// TODO: when there is a canonical way to detect that we are editing a post\n\t\t// the following check should be changed to something like:\n\t\t// if ( list.includes( 'core/post-content' ) && getEditorMode() === 'post-content' && item === null )\n\t\tif ( list.includes( 'core/post-content' ) && item === null ) {\n\t\t\treturn true;\n\t\t}\n\t\treturn list.includes( item );\n\t}\n\treturn defaultResult;\n};\n\n/**\n * Determines if the given block type is allowed to be inserted into the block list.\n * This function is not exported and not memoized because using a memoized selector\n * inside another memoized selector is just a waste of time.\n *\n * @param {Object}        state        Editor state.\n * @param {string|Object} blockName    The block type object, e.g., the response\n *                                     from the block directory; or a string name of\n *                                     an installed block type, e.g.' core/paragraph'.\n * @param {?string}       rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Whether the given block type is allowed to be inserted.\n */\nconst canInsertBlockTypeUnmemoized = (\n\tstate,\n\tblockName,\n\trootClientId = null\n) => {\n\tlet blockType;\n\tif ( blockName && 'object' === typeof blockName ) {\n\t\tblockType = blockName;\n\t\tblockName = blockType.name;\n\t} else {\n\t\tblockType = getBlockType( blockName );\n\t}\n\tif ( ! blockType ) {\n\t\treturn false;\n\t}\n\n\tconst { allowedBlockTypes } = getSettings( state );\n\n\tconst isBlockAllowedInEditor = checkAllowList(\n\t\tallowedBlockTypes,\n\t\tblockName,\n\t\ttrue\n\t);\n\tif ( ! isBlockAllowedInEditor ) {\n\t\treturn false;\n\t}\n\n\tconst isLocked = !! getTemplateLock( state, rootClientId );\n\tif ( isLocked ) {\n\t\treturn false;\n\t}\n\n\tconst parentBlockListSettings = getBlockListSettings( state, rootClientId );\n\n\t// The parent block doesn't have settings indicating it doesn't support\n\t// inner blocks, return false.\n\tif ( rootClientId && parentBlockListSettings === undefined ) {\n\t\treturn false;\n\t}\n\n\tconst parentAllowedBlocks = parentBlockListSettings?.allowedBlocks;\n\tconst hasParentAllowedBlock = checkAllowList(\n\t\tparentAllowedBlocks,\n\t\tblockName\n\t);\n\n\tconst blockAllowedParentBlocks = blockType.parent;\n\tconst parentName = getBlockName( state, rootClientId );\n\tconst hasBlockAllowedParent = checkAllowList(\n\t\tblockAllowedParentBlocks,\n\t\tparentName\n\t);\n\n\tif ( hasParentAllowedBlock !== null && hasBlockAllowedParent !== null ) {\n\t\treturn hasParentAllowedBlock || hasBlockAllowedParent;\n\t} else if ( hasParentAllowedBlock !== null ) {\n\t\treturn hasParentAllowedBlock;\n\t} else if ( hasBlockAllowedParent !== null ) {\n\t\treturn hasBlockAllowedParent;\n\t}\n\n\treturn true;\n};\n\n/**\n * Determines if the given block type is allowed to be inserted into the block list.\n *\n * @param {Object}  state        Editor state.\n * @param {string}  blockName    The name of the block type, e.g.' core/paragraph'.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Whether the given block type is allowed to be inserted.\n */\nexport const canInsertBlockType = createSelector(\n\tcanInsertBlockTypeUnmemoized,\n\t( state, blockName, rootClientId ) => [\n\t\tstate.blockListSettings[ rootClientId ],\n\t\tstate.blocks.byClientId[ rootClientId ],\n\t\tstate.settings.allowedBlockTypes,\n\t\tstate.settings.templateLock,\n\t]\n);\n\n/**\n * Determines if the given blocks are allowed to be inserted into the block\n * list.\n *\n * @param {Object}  state        Editor state.\n * @param {string}  clientIds    The block client IDs to be inserted.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Whether the given blocks are allowed to be inserted.\n */\nexport function canInsertBlocks( state, clientIds, rootClientId = null ) {\n\treturn clientIds.every( ( id ) =>\n\t\tcanInsertBlockType( state, getBlockName( state, id ), rootClientId )\n\t);\n}\n\n/**\n * Determines if the given block is allowed to be deleted.\n *\n * @param {Object}  state        Editor state.\n * @param {string}  clientId     The block client Id.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Whether the given block is allowed to be removed.\n */\nexport function canRemoveBlock( state, clientId, rootClientId = null ) {\n\tconst attributes = getBlockAttributes( state, clientId );\n\n\t// attributes can be null if the block is already deleted.\n\tif ( attributes === null ) {\n\t\treturn true;\n\t}\n\n\tconst { lock } = attributes;\n\tconst parentIsLocked = !! getTemplateLock( state, rootClientId );\n\t// If we don't have a lock on the blockType level, we differ to the parent templateLock.\n\tif ( lock === undefined || lock?.remove === undefined ) {\n\t\treturn ! parentIsLocked;\n\t}\n\n\t// when remove is true, it means we cannot remove it.\n\treturn ! lock?.remove;\n}\n\n/**\n * Determines if the given blocks are allowed to be removed.\n *\n * @param {Object}  state        Editor state.\n * @param {string}  clientIds    The block client IDs to be removed.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Whether the given blocks are allowed to be removed.\n */\nexport function canRemoveBlocks( state, clientIds, rootClientId = null ) {\n\treturn clientIds.every( ( clientId ) =>\n\t\tcanRemoveBlock( state, clientId, rootClientId )\n\t);\n}\n\n/**\n * Determines if the given block is allowed to be moved.\n *\n * @param {Object}  state        Editor state.\n * @param {string}  clientId     The block client Id.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Whether the given block is allowed to be moved.\n */\nexport function canMoveBlock( state, clientId, rootClientId = null ) {\n\tconst attributes = getBlockAttributes( state, clientId );\n\tif ( attributes === null ) {\n\t\treturn;\n\t}\n\n\tconst { lock } = attributes;\n\tconst parentIsLocked = getTemplateLock( state, rootClientId ) === 'all';\n\t// If we don't have a lock on the blockType level, we differ to the parent templateLock.\n\tif ( lock === undefined || lock?.move === undefined ) {\n\t\treturn ! parentIsLocked;\n\t}\n\n\t// when move is true, it means we cannot move it.\n\treturn ! lock?.move;\n}\n\n/**\n * Determines if the given blocks are allowed to be moved.\n *\n * @param {Object}  state        Editor state.\n * @param {string}  clientIds    The block client IDs to be moved.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Whether the given blocks are allowed to be moved.\n */\nexport function canMoveBlocks( state, clientIds, rootClientId = null ) {\n\treturn clientIds.every( ( clientId ) =>\n\t\tcanMoveBlock( state, clientId, rootClientId )\n\t);\n}\n\n/**\n * Returns information about how recently and frequently a block has been inserted.\n *\n * @param {Object} state Global application state.\n * @param {string} id    A string which identifies the insert, e.g. 'core/block/12'\n *\n * @return {?{ time: number, count: number }} An object containing `time` which is when the last\n *                                            insert occurred as a UNIX epoch, and `count` which is\n *                                            the number of inserts that have occurred.\n */\nfunction getInsertUsage( state, id ) {\n\treturn state.preferences.insertUsage?.[ id ] ?? null;\n}\n\n/**\n * Returns whether we can show a block type in the inserter\n *\n * @param {Object}  state        Global State\n * @param {Object}  blockType    BlockType\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Whether the given block type is allowed to be shown in the inserter.\n */\nconst canIncludeBlockTypeInInserter = ( state, blockType, rootClientId ) => {\n\tif ( ! hasBlockSupport( blockType, 'inserter', true ) ) {\n\t\treturn false;\n\t}\n\n\treturn canInsertBlockTypeUnmemoized( state, blockType.name, rootClientId );\n};\n\n/**\n * Return a function to be used to tranform a block variation to an inserter item\n *\n * @param {Object} state Global State\n * @param {Object} item  Denormalized inserter item\n * @return {Function} Function to transform a block variation to inserter item\n */\nconst getItemFromVariation = ( state, item ) => ( variation ) => {\n\tconst variationId = `${ item.id }/${ variation.name }`;\n\tconst { time, count = 0 } = getInsertUsage( state, variationId ) || {};\n\treturn {\n\t\t...item,\n\t\tid: variationId,\n\t\ticon: variation.icon || item.icon,\n\t\ttitle: variation.title || item.title,\n\t\tdescription: variation.description || item.description,\n\t\tcategory: variation.category || item.category,\n\t\t// If `example` is explicitly undefined for the variation, the preview will not be shown.\n\t\texample: variation.hasOwnProperty( 'example' )\n\t\t\t? variation.example\n\t\t\t: item.example,\n\t\tinitialAttributes: {\n\t\t\t...item.initialAttributes,\n\t\t\t...variation.attributes,\n\t\t},\n\t\tinnerBlocks: variation.innerBlocks,\n\t\tkeywords: variation.keywords || item.keywords,\n\t\tfrecency: calculateFrecency( time, count ),\n\t};\n};\n\n/**\n * Returns the calculated frecency.\n *\n * 'frecency' is a heuristic (https://en.wikipedia.org/wiki/Frecency)\n * that combines block usage frequenty and recency.\n *\n * @param {number} time  When the last insert occurred as a UNIX epoch\n * @param {number} count The number of inserts that have occurred.\n *\n * @return {number} The calculated frecency.\n */\nconst calculateFrecency = ( time, count ) => {\n\tif ( ! time ) {\n\t\treturn count;\n\t}\n\t// The selector is cached, which means Date.now() is the last time that the\n\t// relevant state changed. This suits our needs.\n\tconst duration = Date.now() - time;\n\tswitch ( true ) {\n\t\tcase duration < MILLISECONDS_PER_HOUR:\n\t\t\treturn count * 4;\n\t\tcase duration < MILLISECONDS_PER_DAY:\n\t\t\treturn count * 2;\n\t\tcase duration < MILLISECONDS_PER_WEEK:\n\t\t\treturn count / 2;\n\t\tdefault:\n\t\t\treturn count / 4;\n\t}\n};\n\n/**\n * Returns a function that accepts a block type and builds an item to be shown\n * in a specific context. It's used for building items for Inserter and available\n * block Transfroms list.\n *\n * @param {Object} state              Editor state.\n * @param {Object} options            Options object for handling the building of a block type.\n * @param {string} options.buildScope The scope for which the item is going to be used.\n * @return {Function} Function returns an item to be shown in a specific context (Inserter|Transforms list).\n */\nconst buildBlockTypeItem = ( state, { buildScope = 'inserter' } ) => (\n\tblockType\n) => {\n\tconst id = blockType.name;\n\n\tlet isDisabled = false;\n\tif ( ! hasBlockSupport( blockType.name, 'multiple', true ) ) {\n\t\tisDisabled = some(\n\t\t\tgetBlocksByClientId( state, getClientIdsWithDescendants( state ) ),\n\t\t\t{ name: blockType.name }\n\t\t);\n\t}\n\n\tconst { time, count = 0 } = getInsertUsage( state, id ) || {};\n\tconst blockItemBase = {\n\t\tid,\n\t\tname: blockType.name,\n\t\ttitle: blockType.title,\n\t\ticon: blockType.icon,\n\t\tisDisabled,\n\t\tfrecency: calculateFrecency( time, count ),\n\t};\n\tif ( buildScope === 'transform' ) return blockItemBase;\n\n\tconst inserterVariations = blockType.variations.filter(\n\t\t( { scope } ) => ! scope || scope.includes( 'inserter' )\n\t);\n\treturn {\n\t\t...blockItemBase,\n\t\tinitialAttributes: {},\n\t\tdescription: blockType.description,\n\t\tcategory: blockType.category,\n\t\tkeywords: blockType.keywords,\n\t\tvariations: inserterVariations,\n\t\texample: blockType.example,\n\t\tutility: 1, // deprecated\n\t};\n};\n\n/**\n * Determines the items that appear in the inserter. Includes both static\n * items (e.g. a regular block type) and dynamic items (e.g. a reusable block).\n *\n * Each item object contains what's necessary to display a button in the\n * inserter and handle its selection.\n *\n * The 'frecency' property is a heuristic (https://en.wikipedia.org/wiki/Frecency)\n * that combines block usage frequenty and recency.\n *\n * Items are returned ordered descendingly by their 'utility' and 'frecency'.\n *\n * @param    {Object}   state             Editor state.\n * @param    {?string}  rootClientId      Optional root client ID of block list.\n *\n * @return {WPEditorInserterItem[]} Items that appear in inserter.\n *\n * @typedef {Object} WPEditorInserterItem\n * @property {string}   id                Unique identifier for the item.\n * @property {string}   name              The type of block to create.\n * @property {Object}   initialAttributes Attributes to pass to the newly created block.\n * @property {string}   title             Title of the item, as it appears in the inserter.\n * @property {string}   icon              Dashicon for the item, as it appears in the inserter.\n * @property {string}   category          Block category that the item is associated with.\n * @property {string[]} keywords          Keywords that can be searched to find this item.\n * @property {boolean}  isDisabled        Whether or not the user should be prevented from inserting\n *                                        this item.\n * @property {number}   frecency          Heuristic that combines frequency and recency.\n */\nexport const getInserterItems = createSelector(\n\t( state, rootClientId = null ) => {\n\t\tconst buildBlockTypeInserterItem = buildBlockTypeItem( state, {\n\t\t\tbuildScope: 'inserter',\n\t\t} );\n\n\t\tconst buildReusableBlockInserterItem = ( reusableBlock ) => {\n\t\t\tconst id = `core/block/${ reusableBlock.id }`;\n\n\t\t\tconst referencedBlocks = __experimentalGetParsedReusableBlock(\n\t\t\t\tstate,\n\t\t\t\treusableBlock.id\n\t\t\t);\n\t\t\tlet referencedBlockType;\n\t\t\tif ( referencedBlocks.length === 1 ) {\n\t\t\t\treferencedBlockType = getBlockType(\n\t\t\t\t\treferencedBlocks[ 0 ].name\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst { time, count = 0 } = getInsertUsage( state, id ) || {};\n\t\t\tconst frecency = calculateFrecency( time, count );\n\n\t\t\treturn {\n\t\t\t\tid,\n\t\t\t\tname: 'core/block',\n\t\t\t\tinitialAttributes: { ref: reusableBlock.id },\n\t\t\t\ttitle: reusableBlock.title.raw,\n\t\t\t\ticon:\n\t\t\t\t\treferencedBlockType && Platform.OS === 'web'\n\t\t\t\t\t\t? referencedBlockType.icon\n\t\t\t\t\t\t: symbol,\n\t\t\t\tcategory: 'reusable',\n\t\t\t\tkeywords: [],\n\t\t\t\tisDisabled: false,\n\t\t\t\tutility: 1, // deprecated\n\t\t\t\tfrecency,\n\t\t\t};\n\t\t};\n\n\t\tconst blockTypeInserterItems = getBlockTypes()\n\t\t\t.filter( ( blockType ) =>\n\t\t\t\tcanIncludeBlockTypeInInserter( state, blockType, rootClientId )\n\t\t\t)\n\t\t\t.map( buildBlockTypeInserterItem );\n\n\t\tconst reusableBlockInserterItems = canInsertBlockTypeUnmemoized(\n\t\t\tstate,\n\t\t\t'core/block',\n\t\t\trootClientId\n\t\t)\n\t\t\t? getReusableBlocks( state ).map( buildReusableBlockInserterItem )\n\t\t\t: [];\n\n\t\t// Exclude any block type item that is to be replaced by a default\n\t\t// variation.\n\t\tconst visibleBlockTypeInserterItems = blockTypeInserterItems.filter(\n\t\t\t( { variations = [] } ) =>\n\t\t\t\t! variations.some( ( { isDefault } ) => isDefault )\n\t\t);\n\n\t\tconst blockVariations = [];\n\t\t// Show all available blocks with variations\n\t\tfor ( const item of blockTypeInserterItems ) {\n\t\t\tconst { variations = [] } = item;\n\t\t\tif ( variations.length ) {\n\t\t\t\tconst variationMapper = getItemFromVariation( state, item );\n\t\t\t\tblockVariations.push( ...variations.map( variationMapper ) );\n\t\t\t}\n\t\t}\n\t\t// Ensure core blocks are prioritized in the returned results,\n\t\t// because third party blocks can be registered earlier than\n\t\t// the core blocks (usually by using the `init` action),\n\t\t// thus affecting the display order.\n\t\t// We don't sort reusable blocks as they are handled differently.\n\t\tconst groupByType = ( blocks, block ) => {\n\t\t\tconst { core, noncore } = blocks;\n\t\t\tconst type = block.name.startsWith( 'core/' ) ? core : noncore;\n\n\t\t\ttype.push( block );\n\t\t\treturn blocks;\n\t\t};\n\t\tconst items = visibleBlockTypeInserterItems.reduce( groupByType, {\n\t\t\tcore: [],\n\t\t\tnoncore: [],\n\t\t} );\n\t\tconst variations = blockVariations.reduce( groupByType, {\n\t\t\tcore: [],\n\t\t\tnoncore: [],\n\t\t} );\n\t\tconst sortedBlockTypes = [\n\t\t\t...items.core,\n\t\t\t...variations.core,\n\t\t\t...items.noncore,\n\t\t\t...variations.noncore,\n\t\t];\n\t\treturn [ ...sortedBlockTypes, ...reusableBlockInserterItems ];\n\t},\n\t( state, rootClientId ) => [\n\t\tstate.blockListSettings[ rootClientId ],\n\t\tstate.blocks.byClientId,\n\t\tstate.blocks.order,\n\t\tstate.preferences.insertUsage,\n\t\tstate.settings.allowedBlockTypes,\n\t\tstate.settings.templateLock,\n\t\tgetReusableBlocks( state ),\n\t\tgetBlockTypes(),\n\t]\n);\n\n/**\n * Determines the items that appear in the available block transforms list.\n *\n * Each item object contains what's necessary to display a menu item in the\n * transform list and handle its selection.\n *\n * The 'frecency' property is a heuristic (https://en.wikipedia.org/wiki/Frecency)\n * that combines block usage frequenty and recency.\n *\n * Items are returned ordered descendingly by their 'frecency'.\n *\n * @param    {Object}  state        Editor state.\n * @param    {?string} rootClientId Optional root client ID of block list.\n *\n * @return {WPEditorTransformItem[]} Items that appear in inserter.\n *\n * @typedef {Object} WPEditorTransformItem\n * @property {string}  id           Unique identifier for the item.\n * @property {string}  name         The type of block to create.\n * @property {string}  title        Title of the item, as it appears in the inserter.\n * @property {string}  icon         Dashicon for the item, as it appears in the inserter.\n * @property {boolean} isDisabled   Whether or not the user should be prevented from inserting\n *                                  this item.\n * @property {number}  frecency     Heuristic that combines frequency and recency.\n */\nexport const getBlockTransformItems = createSelector(\n\t( state, blocks, rootClientId = null ) => {\n\t\tconst buildBlockTypeTransformItem = buildBlockTypeItem( state, {\n\t\t\tbuildScope: 'transform',\n\t\t} );\n\t\tconst blockTypeTransformItems = getBlockTypes()\n\t\t\t.filter( ( blockType ) =>\n\t\t\t\tcanIncludeBlockTypeInInserter( state, blockType, rootClientId )\n\t\t\t)\n\t\t\t.map( buildBlockTypeTransformItem );\n\n\t\tconst itemsByName = mapKeys(\n\t\t\tblockTypeTransformItems,\n\t\t\t( { name } ) => name\n\t\t);\n\t\tconst possibleTransforms = getPossibleBlockTransformations(\n\t\t\tblocks\n\t\t).reduce( ( accumulator, block ) => {\n\t\t\tif ( itemsByName[ block?.name ] ) {\n\t\t\t\taccumulator.push( itemsByName[ block.name ] );\n\t\t\t}\n\t\t\treturn accumulator;\n\t\t}, [] );\n\t\tconst possibleBlockTransformations = orderBy(\n\t\t\tpossibleTransforms,\n\t\t\t( block ) => itemsByName[ block.name ].frecency,\n\t\t\t'desc'\n\t\t);\n\t\treturn possibleBlockTransformations;\n\t},\n\t( state, rootClientId ) => [\n\t\tstate.blockListSettings[ rootClientId ],\n\t\tstate.blocks.byClientId,\n\t\tstate.preferences.insertUsage,\n\t\tstate.settings.allowedBlockTypes,\n\t\tstate.settings.templateLock,\n\t\tgetBlockTypes(),\n\t]\n);\n\n/**\n * Determines whether there are items to show in the inserter.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Items that appear in inserter.\n */\nexport const hasInserterItems = createSelector(\n\t( state, rootClientId = null ) => {\n\t\tconst hasBlockType = some( getBlockTypes(), ( blockType ) =>\n\t\t\tcanIncludeBlockTypeInInserter( state, blockType, rootClientId )\n\t\t);\n\t\tif ( hasBlockType ) {\n\t\t\treturn true;\n\t\t}\n\t\tconst hasReusableBlock =\n\t\t\tcanInsertBlockTypeUnmemoized( state, 'core/block', rootClientId ) &&\n\t\t\tgetReusableBlocks( state ).length > 0;\n\n\t\treturn hasReusableBlock;\n\t},\n\t( state, rootClientId ) => [\n\t\tstate.blockListSettings[ rootClientId ],\n\t\tstate.blocks.byClientId,\n\t\tstate.settings.allowedBlockTypes,\n\t\tstate.settings.templateLock,\n\t\tgetReusableBlocks( state ),\n\t\tgetBlockTypes(),\n\t]\n);\n\n/**\n * Returns the list of allowed inserter blocks for inner blocks children\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {Array?} The list of allowed block types.\n */\nexport const __experimentalGetAllowedBlocks = createSelector(\n\t( state, rootClientId = null ) => {\n\t\tif ( ! rootClientId ) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn filter( getBlockTypes(), ( blockType ) =>\n\t\t\tcanIncludeBlockTypeInInserter( state, blockType, rootClientId )\n\t\t);\n\t},\n\t( state, rootClientId ) => [\n\t\tstate.blockListSettings[ rootClientId ],\n\t\tstate.blocks.byClientId,\n\t\tstate.settings.allowedBlockTypes,\n\t\tstate.settings.templateLock,\n\t\tgetBlockTypes(),\n\t]\n);\n\n/**\n * Returns the block to be directly inserted by the block appender.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {?Array} The block type to be directly inserted.\n */\nexport const __experimentalGetDirectInsertBlock = createSelector(\n\t( state, rootClientId = null ) => {\n\t\tif ( ! rootClientId ) {\n\t\t\treturn;\n\t\t}\n\t\tconst defaultBlock =\n\t\t\tstate.blockListSettings[ rootClientId ]?.__experimentalDefaultBlock;\n\t\tconst directInsert =\n\t\t\tstate.blockListSettings[ rootClientId ]?.__experimentalDirectInsert;\n\t\tif ( ! defaultBlock || ! directInsert ) {\n\t\t\treturn;\n\t\t}\n\t\tif ( typeof directInsert === 'function' ) {\n\t\t\treturn directInsert( getBlock( state, rootClientId ) )\n\t\t\t\t? defaultBlock\n\t\t\t\t: null;\n\t\t}\n\t\treturn defaultBlock;\n\t},\n\t( state, rootClientId ) => [\n\t\tstate.blockListSettings[ rootClientId ],\n\t\tstate.blocks.tree[ rootClientId ],\n\t]\n);\n\nconst checkAllowListRecursive = ( blocks, allowedBlockTypes ) => {\n\tif ( isBoolean( allowedBlockTypes ) ) {\n\t\treturn allowedBlockTypes;\n\t}\n\n\tconst blocksQueue = [ ...blocks ];\n\twhile ( blocksQueue.length > 0 ) {\n\t\tconst block = blocksQueue.shift();\n\n\t\tconst isAllowed = checkAllowList(\n\t\t\tallowedBlockTypes,\n\t\t\tblock.name || block.blockName,\n\t\t\ttrue\n\t\t);\n\t\tif ( ! isAllowed ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tblock.innerBlocks?.forEach( ( innerBlock ) => {\n\t\t\tblocksQueue.push( innerBlock );\n\t\t} );\n\t}\n\n\treturn true;\n};\n\nexport const __experimentalGetParsedPattern = createSelector(\n\t( state, patternName ) => {\n\t\tconst patterns = state.settings.__experimentalBlockPatterns;\n\t\tconst pattern = patterns.find( ( { name } ) => name === patternName );\n\t\tif ( ! pattern ) {\n\t\t\treturn null;\n\t\t}\n\t\treturn {\n\t\t\t...pattern,\n\t\t\tblocks: parse( pattern.content ),\n\t\t};\n\t},\n\t( state ) => [ state.settings.__experimentalBlockPatterns ]\n);\n\nconst getAllAllowedPatterns = createSelector(\n\t( state ) => {\n\t\tconst patterns = state.settings.__experimentalBlockPatterns;\n\t\tconst { allowedBlockTypes } = getSettings( state );\n\t\tconst parsedPatterns = patterns.map( ( { name } ) =>\n\t\t\t__experimentalGetParsedPattern( state, name )\n\t\t);\n\t\tconst allowedPatterns = parsedPatterns.filter( ( { blocks } ) =>\n\t\t\tcheckAllowListRecursive( blocks, allowedBlockTypes )\n\t\t);\n\t\treturn allowedPatterns;\n\t},\n\t( state ) => [\n\t\tstate.settings.__experimentalBlockPatterns,\n\t\tstate.settings.allowedBlockTypes,\n\t]\n);\n\n/**\n * Returns the list of allowed patterns for inner blocks children.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional target root client ID.\n *\n * @return {Array?} The list of allowed patterns.\n */\nexport const __experimentalGetAllowedPatterns = createSelector(\n\t( state, rootClientId = null ) => {\n\t\tconst availableParsedPatterns = getAllAllowedPatterns( state );\n\t\tconst patternsAllowed = filter(\n\t\t\tavailableParsedPatterns,\n\t\t\t( { blocks } ) =>\n\t\t\t\tblocks.every( ( { name } ) =>\n\t\t\t\t\tcanInsertBlockType( state, name, rootClientId )\n\t\t\t\t)\n\t\t);\n\n\t\treturn patternsAllowed;\n\t},\n\t( state, rootClientId ) => [\n\t\tstate.settings.__experimentalBlockPatterns,\n\t\tstate.settings.allowedBlockTypes,\n\t\tstate.settings.templateLock,\n\t\tstate.blockListSettings[ rootClientId ],\n\t\tstate.blocks.byClientId[ rootClientId ],\n\t]\n);\n\n/**\n * Returns the list of patterns based on their declared `blockTypes`\n * and a block's name.\n * Patterns can use `blockTypes` to integrate in work flows like\n * suggesting appropriate patterns in a Placeholder state(during insertion)\n * or blocks transformations.\n *\n * @param {Object}          state        Editor state.\n * @param {string|string[]} blockNames   Block's name or array of block names to find matching pattens.\n * @param {?string}         rootClientId Optional target root client ID.\n *\n * @return {Array} The list of matched block patterns based on declared `blockTypes` and block name.\n */\nexport const __experimentalGetPatternsByBlockTypes = createSelector(\n\t( state, blockNames, rootClientId = null ) => {\n\t\tif ( ! blockNames ) return EMPTY_ARRAY;\n\t\tconst patterns = __experimentalGetAllowedPatterns(\n\t\t\tstate,\n\t\t\trootClientId\n\t\t);\n\t\tconst normalizedBlockNames = Array.isArray( blockNames )\n\t\t\t? blockNames\n\t\t\t: [ blockNames ];\n\t\treturn patterns.filter( ( pattern ) =>\n\t\t\tpattern?.blockTypes?.some?.( ( blockName ) =>\n\t\t\t\tnormalizedBlockNames.includes( blockName )\n\t\t\t)\n\t\t);\n\t},\n\t( state, rootClientId ) => [\n\t\t...__experimentalGetAllowedPatterns.getDependants(\n\t\t\tstate,\n\t\t\trootClientId\n\t\t),\n\t]\n);\n\n/**\n * Determines the items that appear in the available pattern transforms list.\n *\n * For now we only handle blocks without InnerBlocks and take into account\n * the `__experimentalRole` property of blocks' attributes for the transformation.\n *\n * We return the first set of possible eligible block patterns,\n * by checking the `blockTypes` property. We still have to recurse through\n * block pattern's blocks and try to find matches from the selected blocks.\n * Now this happens in the consumer to avoid heavy operations in the selector.\n *\n * @param {Object}   state        Editor state.\n * @param {Object[]} blocks       The selected blocks.\n * @param {?string}  rootClientId Optional root client ID of block list.\n *\n * @return {WPBlockPattern[]} Items that are eligible for a pattern transformation.\n */\nexport const __experimentalGetPatternTransformItems = createSelector(\n\t( state, blocks, rootClientId = null ) => {\n\t\tif ( ! blocks ) return EMPTY_ARRAY;\n\t\t/**\n\t\t * For now we only handle blocks without InnerBlocks and take into account\n\t\t * the `__experimentalRole` property of blocks' attributes for the transformation.\n\t\t * Note that the blocks have been retrieved through `getBlock`, which doesn't\n\t\t * return the inner blocks of an inner block controller, so we still need\n\t\t * to check for this case too.\n\t\t */\n\t\tif (\n\t\t\tblocks.some(\n\t\t\t\t( { clientId, innerBlocks } ) =>\n\t\t\t\t\tinnerBlocks.length ||\n\t\t\t\t\tareInnerBlocksControlled( state, clientId )\n\t\t\t)\n\t\t) {\n\t\t\treturn EMPTY_ARRAY;\n\t\t}\n\n\t\t// Create a Set of the selected block names that is used in patterns filtering.\n\t\tconst selectedBlockNames = Array.from(\n\t\t\tnew Set( blocks.map( ( { name } ) => name ) )\n\t\t);\n\t\t/**\n\t\t * Here we will return first set of possible eligible block patterns,\n\t\t * by checking the `blockTypes` property. We still have to recurse through\n\t\t * block pattern's blocks and try to find matches from the selected blocks.\n\t\t * Now this happens in the consumer to avoid heavy operations in the selector.\n\t\t */\n\t\treturn __experimentalGetPatternsByBlockTypes(\n\t\t\tstate,\n\t\t\tselectedBlockNames,\n\t\t\trootClientId\n\t\t);\n\t},\n\t( state, rootClientId ) => [\n\t\t...__experimentalGetPatternsByBlockTypes.getDependants(\n\t\t\tstate,\n\t\t\trootClientId\n\t\t),\n\t]\n);\n\n/**\n * Returns the Block List settings of a block, if any exist.\n *\n * @param {Object}  state    Editor state.\n * @param {?string} clientId Block client ID.\n *\n * @return {?Object} Block settings of the block if set.\n */\nexport function getBlockListSettings( state, clientId ) {\n\treturn state.blockListSettings[ clientId ];\n}\n\n/**\n * Returns the editor settings.\n *\n * @param {Object} state Editor state.\n *\n * @return {Object} The editor settings object.\n */\nexport function getSettings( state ) {\n\treturn state.settings;\n}\n\n/**\n * Returns true if the most recent block change is be considered persistent, or\n * false otherwise. A persistent change is one committed by BlockEditorProvider\n * via its `onChange` callback, in addition to `onInput`.\n *\n * @param {Object} state Block editor state.\n *\n * @return {boolean} Whether the most recent block change was persistent.\n */\nexport function isLastBlockChangePersistent( state ) {\n\treturn state.blocks.isPersistentChange;\n}\n\n/**\n * Returns the block list settings for an array of blocks, if any exist.\n *\n * @param {Object} state     Editor state.\n * @param {Array}  clientIds Block client IDs.\n *\n * @return {Object} An object where the keys are client ids and the values are\n *                  a block list setting object.\n */\nexport const __experimentalGetBlockListSettingsForBlocks = createSelector(\n\t( state, clientIds = [] ) => {\n\t\treturn clientIds.reduce( ( blockListSettingsForBlocks, clientId ) => {\n\t\t\tif ( ! state.blockListSettings[ clientId ] ) {\n\t\t\t\treturn blockListSettingsForBlocks;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t...blockListSettingsForBlocks,\n\t\t\t\t[ clientId ]: state.blockListSettings[ clientId ],\n\t\t\t};\n\t\t}, {} );\n\t},\n\t( state ) => [ state.blockListSettings ]\n);\n\n/**\n * Returns the parsed block saved as shared block with the given ID.\n *\n * @param {Object}        state Global application state.\n * @param {number|string} ref   The shared block's ID.\n *\n * @return {Object} The parsed block.\n */\nexport const __experimentalGetParsedReusableBlock = createSelector(\n\t( state, ref ) => {\n\t\tconst reusableBlock = find(\n\t\t\tgetReusableBlocks( state ),\n\t\t\t( block ) => block.id === ref\n\t\t);\n\t\tif ( ! reusableBlock ) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// Only reusableBlock.content.raw should be used here, `reusableBlock.content` is a\n\t\t// workaround until #22127 is fixed.\n\t\treturn parse(\n\t\t\ttypeof reusableBlock.content.raw === 'string'\n\t\t\t\t? reusableBlock.content.raw\n\t\t\t\t: reusableBlock.content\n\t\t);\n\t},\n\t( state ) => [ getReusableBlocks( state ) ]\n);\n\n/**\n * Returns the title of a given reusable block\n *\n * @param {Object}        state Global application state.\n * @param {number|string} ref   The shared block's ID.\n *\n * @return {string} The reusable block saved title.\n */\nexport const __experimentalGetReusableBlockTitle = createSelector(\n\t( state, ref ) => {\n\t\tconst reusableBlock = find(\n\t\t\tgetReusableBlocks( state ),\n\t\t\t( block ) => block.id === ref\n\t\t);\n\t\tif ( ! reusableBlock ) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn reusableBlock.title?.raw;\n\t},\n\t( state ) => [ getReusableBlocks( state ) ]\n);\n\n/**\n * Returns true if the most recent block change is be considered ignored, or\n * false otherwise. An ignored change is one not to be committed by\n * BlockEditorProvider, neither via `onChange` nor `onInput`.\n *\n * @param {Object} state Block editor state.\n *\n * @return {boolean} Whether the most recent block change was ignored.\n */\nexport function __unstableIsLastBlockChangeIgnored( state ) {\n\t// TODO: Removal Plan: Changes incurred by RECEIVE_BLOCKS should not be\n\t// ignored if in-fact they result in a change in blocks state. The current\n\t// need to ignore changes not a result of user interaction should be\n\t// accounted for in the refactoring of reusable blocks as occurring within\n\t// their own separate block editor / state (#7119).\n\treturn state.blocks.isIgnoredChange;\n}\n\n/**\n * Returns the block attributes changed as a result of the last dispatched\n * action.\n *\n * @param {Object} state Block editor state.\n *\n * @return {Object<string,Object>} Subsets of block attributes changed, keyed\n *                                 by block client ID.\n */\nexport function __experimentalGetLastBlockAttributeChanges( state ) {\n\treturn state.lastBlockAttributesChange;\n}\n\n/**\n * Returns the available reusable blocks\n *\n * @param {Object} state Global application state.\n *\n * @return {Array} Reusable blocks\n */\nfunction getReusableBlocks( state ) {\n\treturn state?.settings?.__experimentalReusableBlocks ?? EMPTY_ARRAY;\n}\n\n/**\n * Returns whether the navigation mode is enabled.\n *\n * @param {Object} state Editor state.\n *\n * @return {boolean} Is navigation mode enabled.\n */\nexport function isNavigationMode( state ) {\n\treturn state.isNavigationMode;\n}\n\n/**\n * Returns whether block moving mode is enabled.\n *\n * @param {Object} state Editor state.\n *\n * @return {string} Client Id of moving block.\n */\nexport function hasBlockMovingClientId( state ) {\n\treturn state.hasBlockMovingClientId;\n}\n\n/**\n * Returns true if the last change was an automatic change, false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the last change was automatic.\n */\nexport function didAutomaticChange( state ) {\n\treturn !! state.automaticChangeStatus;\n}\n\n/**\n * Returns true if the current highlighted block matches the block clientId.\n *\n * @param {Object} state    Global application state.\n * @param {string} clientId The block to check.\n *\n * @return {boolean} Whether the block is currently highlighted.\n */\nexport function isBlockHighlighted( state, clientId ) {\n\treturn state.highlightedBlock === clientId;\n}\n\n/**\n * Checks if a given block has controlled inner blocks.\n *\n * @param {Object} state    Global application state.\n * @param {string} clientId The block to check.\n *\n * @return {boolean} True if the block has controlled inner blocks.\n */\nexport function areInnerBlocksControlled( state, clientId ) {\n\treturn !! state.blocks.controlledInnerBlocks[ clientId ];\n}\n\n/**\n * Returns the clientId for the first 'active' block of a given array of block names.\n * A block is 'active' if it (or a child) is the selected block.\n * Returns the first match moving up the DOM from the selected block.\n *\n * @param {Object}   state            Global application state.\n * @param {string[]} validBlocksNames The names of block types to check for.\n *\n * @return {string} The matching block's clientId.\n */\nexport const __experimentalGetActiveBlockIdByBlockNames = createSelector(\n\t( state, validBlockNames ) => {\n\t\tif ( ! validBlockNames.length ) {\n\t\t\treturn null;\n\t\t}\n\t\t// Check if selected block is a valid entity area.\n\t\tconst selectedBlockClientId = getSelectedBlockClientId( state );\n\t\tif (\n\t\t\tvalidBlockNames.includes(\n\t\t\t\tgetBlockName( state, selectedBlockClientId )\n\t\t\t)\n\t\t) {\n\t\t\treturn selectedBlockClientId;\n\t\t}\n\t\t// Check if first selected block is a child of a valid entity area.\n\t\tconst multiSelectedBlockClientIds = getMultiSelectedBlockClientIds(\n\t\t\tstate\n\t\t);\n\t\tconst entityAreaParents = getBlockParentsByBlockName(\n\t\t\tstate,\n\t\t\tselectedBlockClientId || multiSelectedBlockClientIds[ 0 ],\n\t\t\tvalidBlockNames\n\t\t);\n\t\tif ( entityAreaParents ) {\n\t\t\t// Last parent closest/most interior.\n\t\t\treturn last( entityAreaParents );\n\t\t}\n\t\treturn null;\n\t},\n\t( state, validBlockNames ) => [\n\t\tstate.selection.selectionStart.clientId,\n\t\tstate.selection.selectionEnd.clientId,\n\t\tvalidBlockNames,\n\t]\n);\n\n/**\n * Tells if the block with the passed clientId was just inserted.\n *\n * @param {Object}  state    Global application state.\n * @param {Object}  clientId Client Id of the block.\n * @param {?string} source   Optional insertion source of the block.\n * @return {boolean} True if the block matches the last block inserted from the specified source.\n */\nexport function wasBlockJustInserted( state, clientId, source ) {\n\tconst { lastBlockInserted } = state;\n\treturn (\n\t\tlastBlockInserted.clientId === clientId &&\n\t\tlastBlockInserted.source === source\n\t);\n}\n"]}
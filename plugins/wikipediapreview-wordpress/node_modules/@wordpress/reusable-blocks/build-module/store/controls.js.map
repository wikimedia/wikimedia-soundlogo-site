{"version":3,"sources":["@wordpress/reusable-blocks/src/store/controls.js"],"names":["isFunction","isReusableBlock","createBlock","parse","serialize","createRegistryControl","__","store","blockEditorStore","reusableBlocksStore","convertBlockToStatic","clientId","type","convertBlocksToReusable","clientIds","title","deleteReusableBlock","id","controls","CONVERT_BLOCK_TO_STATIC","registry","oldBlock","select","getBlock","reusableBlock","getEditedEntityRecord","attributes","ref","newBlocks","content","dispatch","replaceBlocks","CONVERT_BLOCKS_TO_REUSABLE","getBlocksByClientId","status","updatedRecord","saveEntityRecord","newBlock","__experimentalSetEditingReusableBlock","DELETE_REUSABLE_BLOCK","allBlocks","getBlocks","associatedBlocks","filter","block","associatedBlockClientIds","map","length","removeBlocks","deleteEntityRecord"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { isFunction } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport {\n\tisReusableBlock,\n\tcreateBlock,\n\tparse,\n\tserialize,\n} from '@wordpress/blocks';\nimport { createRegistryControl } from '@wordpress/data';\nimport { __ } from '@wordpress/i18n';\nimport { store as blockEditorStore } from '@wordpress/block-editor';\n\n/**\n * Internal dependencies\n */\nimport { store as reusableBlocksStore } from './index.js';\n\n/**\n * Convert a reusable block to a static block effect handler\n *\n * @param {string} clientId Block ID.\n * @return {Object} control descriptor.\n */\nexport function convertBlockToStatic( clientId ) {\n\treturn {\n\t\ttype: 'CONVERT_BLOCK_TO_STATIC',\n\t\tclientId,\n\t};\n}\n\n/**\n * Convert a static block to a reusable block effect handler\n *\n * @param {Array}  clientIds Block IDs.\n * @param {string} title     Reusable block title.\n * @return {Object} control descriptor.\n */\nexport function convertBlocksToReusable( clientIds, title ) {\n\treturn {\n\t\ttype: 'CONVERT_BLOCKS_TO_REUSABLE',\n\t\tclientIds,\n\t\ttitle,\n\t};\n}\n\n/**\n * Deletes a reusable block.\n *\n * @param {string} id Reusable block ID.\n * @return {Object} control descriptor.\n */\nexport function deleteReusableBlock( id ) {\n\treturn {\n\t\ttype: 'DELETE_REUSABLE_BLOCK',\n\t\tid,\n\t};\n}\n\nconst controls = {\n\tCONVERT_BLOCK_TO_STATIC: createRegistryControl(\n\t\t( registry ) => ( { clientId } ) => {\n\t\t\tconst oldBlock = registry\n\t\t\t\t.select( blockEditorStore )\n\t\t\t\t.getBlock( clientId );\n\t\t\tconst reusableBlock = registry\n\t\t\t\t.select( 'core' )\n\t\t\t\t.getEditedEntityRecord(\n\t\t\t\t\t'postType',\n\t\t\t\t\t'wp_block',\n\t\t\t\t\toldBlock.attributes.ref\n\t\t\t\t);\n\n\t\t\tconst newBlocks = parse(\n\t\t\t\tisFunction( reusableBlock.content )\n\t\t\t\t\t? reusableBlock.content( reusableBlock )\n\t\t\t\t\t: reusableBlock.content\n\t\t\t);\n\t\t\tregistry\n\t\t\t\t.dispatch( blockEditorStore )\n\t\t\t\t.replaceBlocks( oldBlock.clientId, newBlocks );\n\t\t}\n\t),\n\n\tCONVERT_BLOCKS_TO_REUSABLE: createRegistryControl(\n\t\t( registry ) =>\n\t\t\tasync function ( { clientIds, title } ) {\n\t\t\t\tconst reusableBlock = {\n\t\t\t\t\ttitle: title || __( 'Untitled Reusable block' ),\n\t\t\t\t\tcontent: serialize(\n\t\t\t\t\t\tregistry\n\t\t\t\t\t\t\t.select( blockEditorStore )\n\t\t\t\t\t\t\t.getBlocksByClientId( clientIds )\n\t\t\t\t\t),\n\t\t\t\t\tstatus: 'publish',\n\t\t\t\t};\n\n\t\t\t\tconst updatedRecord = await registry\n\t\t\t\t\t.dispatch( 'core' )\n\t\t\t\t\t.saveEntityRecord( 'postType', 'wp_block', reusableBlock );\n\n\t\t\t\tconst newBlock = createBlock( 'core/block', {\n\t\t\t\t\tref: updatedRecord.id,\n\t\t\t\t} );\n\t\t\t\tregistry\n\t\t\t\t\t.dispatch( blockEditorStore )\n\t\t\t\t\t.replaceBlocks( clientIds, newBlock );\n\t\t\t\tregistry\n\t\t\t\t\t.dispatch( reusableBlocksStore )\n\t\t\t\t\t.__experimentalSetEditingReusableBlock(\n\t\t\t\t\t\tnewBlock.clientId,\n\t\t\t\t\t\ttrue\n\t\t\t\t\t);\n\t\t\t}\n\t),\n\n\tDELETE_REUSABLE_BLOCK: createRegistryControl(\n\t\t( registry ) =>\n\t\t\tasync function ( { id } ) {\n\t\t\t\tconst reusableBlock = registry\n\t\t\t\t\t.select( 'core' )\n\t\t\t\t\t.getEditedEntityRecord( 'postType', 'wp_block', id );\n\n\t\t\t\t// Don't allow a reusable block with a temporary ID to be deleted\n\t\t\t\tif ( ! reusableBlock ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Remove any other blocks that reference this reusable block\n\t\t\t\tconst allBlocks = registry\n\t\t\t\t\t.select( blockEditorStore )\n\t\t\t\t\t.getBlocks();\n\t\t\t\tconst associatedBlocks = allBlocks.filter(\n\t\t\t\t\t( block ) =>\n\t\t\t\t\t\tisReusableBlock( block ) && block.attributes.ref === id\n\t\t\t\t);\n\t\t\t\tconst associatedBlockClientIds = associatedBlocks.map(\n\t\t\t\t\t( block ) => block.clientId\n\t\t\t\t);\n\n\t\t\t\t// Remove the parsed block.\n\t\t\t\tif ( associatedBlockClientIds.length ) {\n\t\t\t\t\tregistry\n\t\t\t\t\t\t.dispatch( blockEditorStore )\n\t\t\t\t\t\t.removeBlocks( associatedBlockClientIds );\n\t\t\t\t}\n\n\t\t\t\tawait registry\n\t\t\t\t\t.dispatch( 'core' )\n\t\t\t\t\t.deleteEntityRecord( 'postType', 'wp_block', id );\n\t\t\t}\n\t),\n};\n\nexport default controls;\n"]}
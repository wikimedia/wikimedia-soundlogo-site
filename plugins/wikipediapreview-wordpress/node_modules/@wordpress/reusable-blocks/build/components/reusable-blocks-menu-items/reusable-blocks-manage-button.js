"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _components = require("@wordpress/components");

var _i18n = require("@wordpress/i18n");

var _blocks = require("@wordpress/blocks");

var _data = require("@wordpress/data");

var _blockEditor = require("@wordpress/block-editor");

var _url = require("@wordpress/url");

var _coreData = require("@wordpress/core-data");

var _store = require("../../store");

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
function ReusableBlocksManageButton({
  clientId
}) {
  const {
    isVisible
  } = (0, _data.useSelect)(select => {
    const {
      getBlock
    } = select(_blockEditor.store);
    const {
      canUser
    } = select(_coreData.store);
    const reusableBlock = getBlock(clientId);
    return {
      isVisible: !!reusableBlock && (0, _blocks.isReusableBlock)(reusableBlock) && !!canUser('update', 'blocks', reusableBlock.attributes.ref)
    };
  }, [clientId]);
  const {
    __experimentalConvertBlockToStatic: convertBlockToStatic
  } = (0, _data.useDispatch)(_store.store);

  if (!isVisible) {
    return null;
  }

  return (0, _element.createElement)(_blockEditor.BlockSettingsMenuControls, null, (0, _element.createElement)(_components.MenuItem, {
    href: (0, _url.addQueryArgs)('edit.php', {
      post_type: 'wp_block'
    })
  }, (0, _i18n.__)('Manage Reusable blocks')), (0, _element.createElement)(_components.MenuItem, {
    onClick: () => convertBlockToStatic(clientId)
  }, (0, _i18n.__)('Convert to regular blocks')));
}

var _default = ReusableBlocksManageButton;
exports.default = _default;
//# sourceMappingURL=reusable-blocks-manage-button.js.map
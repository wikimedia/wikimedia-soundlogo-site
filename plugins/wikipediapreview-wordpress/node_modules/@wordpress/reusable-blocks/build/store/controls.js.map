{"version":3,"sources":["@wordpress/reusable-blocks/src/store/controls.js"],"names":["convertBlockToStatic","clientId","type","convertBlocksToReusable","clientIds","title","deleteReusableBlock","id","controls","CONVERT_BLOCK_TO_STATIC","registry","oldBlock","select","blockEditorStore","getBlock","reusableBlock","getEditedEntityRecord","attributes","ref","newBlocks","content","dispatch","replaceBlocks","CONVERT_BLOCKS_TO_REUSABLE","getBlocksByClientId","status","updatedRecord","saveEntityRecord","newBlock","reusableBlocksStore","__experimentalSetEditingReusableBlock","DELETE_REUSABLE_BLOCK","allBlocks","getBlocks","associatedBlocks","filter","block","associatedBlockClientIds","map","length","removeBlocks","deleteEntityRecord"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { isFunction } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport {\n\tisReusableBlock,\n\tcreateBlock,\n\tparse,\n\tserialize,\n} from '@wordpress/blocks';\nimport { createRegistryControl } from '@wordpress/data';\nimport { __ } from '@wordpress/i18n';\nimport { store as blockEditorStore } from '@wordpress/block-editor';\n\n/**\n * Internal dependencies\n */\nimport { store as reusableBlocksStore } from './index.js';\n\n/**\n * Convert a reusable block to a static block effect handler\n *\n * @param {string} clientId Block ID.\n * @return {Object} control descriptor.\n */\nexport function convertBlockToStatic( clientId ) {\n\treturn {\n\t\ttype: 'CONVERT_BLOCK_TO_STATIC',\n\t\tclientId,\n\t};\n}\n\n/**\n * Convert a static block to a reusable block effect handler\n *\n * @param {Array}  clientIds Block IDs.\n * @param {string} title     Reusable block title.\n * @return {Object} control descriptor.\n */\nexport function convertBlocksToReusable( clientIds, title ) {\n\treturn {\n\t\ttype: 'CONVERT_BLOCKS_TO_REUSABLE',\n\t\tclientIds,\n\t\ttitle,\n\t};\n}\n\n/**\n * Deletes a reusable block.\n *\n * @param {string} id Reusable block ID.\n * @return {Object} control descriptor.\n */\nexport function deleteReusableBlock( id ) {\n\treturn {\n\t\ttype: 'DELETE_REUSABLE_BLOCK',\n\t\tid,\n\t};\n}\n\nconst controls = {\n\tCONVERT_BLOCK_TO_STATIC: createRegistryControl(\n\t\t( registry ) => ( { clientId } ) => {\n\t\t\tconst oldBlock = registry\n\t\t\t\t.select( blockEditorStore )\n\t\t\t\t.getBlock( clientId );\n\t\t\tconst reusableBlock = registry\n\t\t\t\t.select( 'core' )\n\t\t\t\t.getEditedEntityRecord(\n\t\t\t\t\t'postType',\n\t\t\t\t\t'wp_block',\n\t\t\t\t\toldBlock.attributes.ref\n\t\t\t\t);\n\n\t\t\tconst newBlocks = parse(\n\t\t\t\tisFunction( reusableBlock.content )\n\t\t\t\t\t? reusableBlock.content( reusableBlock )\n\t\t\t\t\t: reusableBlock.content\n\t\t\t);\n\t\t\tregistry\n\t\t\t\t.dispatch( blockEditorStore )\n\t\t\t\t.replaceBlocks( oldBlock.clientId, newBlocks );\n\t\t}\n\t),\n\n\tCONVERT_BLOCKS_TO_REUSABLE: createRegistryControl(\n\t\t( registry ) =>\n\t\t\tasync function ( { clientIds, title } ) {\n\t\t\t\tconst reusableBlock = {\n\t\t\t\t\ttitle: title || __( 'Untitled Reusable block' ),\n\t\t\t\t\tcontent: serialize(\n\t\t\t\t\t\tregistry\n\t\t\t\t\t\t\t.select( blockEditorStore )\n\t\t\t\t\t\t\t.getBlocksByClientId( clientIds )\n\t\t\t\t\t),\n\t\t\t\t\tstatus: 'publish',\n\t\t\t\t};\n\n\t\t\t\tconst updatedRecord = await registry\n\t\t\t\t\t.dispatch( 'core' )\n\t\t\t\t\t.saveEntityRecord( 'postType', 'wp_block', reusableBlock );\n\n\t\t\t\tconst newBlock = createBlock( 'core/block', {\n\t\t\t\t\tref: updatedRecord.id,\n\t\t\t\t} );\n\t\t\t\tregistry\n\t\t\t\t\t.dispatch( blockEditorStore )\n\t\t\t\t\t.replaceBlocks( clientIds, newBlock );\n\t\t\t\tregistry\n\t\t\t\t\t.dispatch( reusableBlocksStore )\n\t\t\t\t\t.__experimentalSetEditingReusableBlock(\n\t\t\t\t\t\tnewBlock.clientId,\n\t\t\t\t\t\ttrue\n\t\t\t\t\t);\n\t\t\t}\n\t),\n\n\tDELETE_REUSABLE_BLOCK: createRegistryControl(\n\t\t( registry ) =>\n\t\t\tasync function ( { id } ) {\n\t\t\t\tconst reusableBlock = registry\n\t\t\t\t\t.select( 'core' )\n\t\t\t\t\t.getEditedEntityRecord( 'postType', 'wp_block', id );\n\n\t\t\t\t// Don't allow a reusable block with a temporary ID to be deleted\n\t\t\t\tif ( ! reusableBlock ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Remove any other blocks that reference this reusable block\n\t\t\t\tconst allBlocks = registry\n\t\t\t\t\t.select( blockEditorStore )\n\t\t\t\t\t.getBlocks();\n\t\t\t\tconst associatedBlocks = allBlocks.filter(\n\t\t\t\t\t( block ) =>\n\t\t\t\t\t\tisReusableBlock( block ) && block.attributes.ref === id\n\t\t\t\t);\n\t\t\t\tconst associatedBlockClientIds = associatedBlocks.map(\n\t\t\t\t\t( block ) => block.clientId\n\t\t\t\t);\n\n\t\t\t\t// Remove the parsed block.\n\t\t\t\tif ( associatedBlockClientIds.length ) {\n\t\t\t\t\tregistry\n\t\t\t\t\t\t.dispatch( blockEditorStore )\n\t\t\t\t\t\t.removeBlocks( associatedBlockClientIds );\n\t\t\t\t}\n\n\t\t\t\tawait registry\n\t\t\t\t\t.dispatch( 'core' )\n\t\t\t\t\t.deleteEntityRecord( 'postType', 'wp_block', id );\n\t\t\t}\n\t),\n};\n\nexport default controls;\n"]}
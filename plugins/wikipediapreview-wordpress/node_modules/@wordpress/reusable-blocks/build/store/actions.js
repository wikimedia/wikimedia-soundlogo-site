"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.__experimentalConvertBlockToStatic = __experimentalConvertBlockToStatic;
exports.__experimentalConvertBlocksToReusable = __experimentalConvertBlocksToReusable;
exports.__experimentalDeleteReusableBlock = __experimentalDeleteReusableBlock;
exports.__experimentalSetEditingReusableBlock = __experimentalSetEditingReusableBlock;

var _controls = require("./controls");

/**
 * Internal dependencies
 */

/**
 * Returns a generator converting a reusable block into a static block.
 *
 * @param {string} clientId The client ID of the block to attach.
 */
function* __experimentalConvertBlockToStatic(clientId) {
  yield (0, _controls.convertBlockToStatic)(clientId);
}
/**
 * Returns a generator converting one or more static blocks into a reusable block.
 *
 * @param {string[]} clientIds The client IDs of the block to detach.
 * @param {string}   title     Reusable block title.
 */


function* __experimentalConvertBlocksToReusable(clientIds, title) {
  yield (0, _controls.convertBlocksToReusable)(clientIds, title);
}
/**
 * Returns a generator deleting a reusable block.
 *
 * @param {string} id The ID of the reusable block to delete.
 */


function* __experimentalDeleteReusableBlock(id) {
  yield (0, _controls.deleteReusableBlock)(id);
}
/**
 * Returns an action descriptor for SET_EDITING_REUSABLE_BLOCK action.
 *
 * @param {string}  clientId  The clientID of the reusable block to target.
 * @param {boolean} isEditing Whether the block should be in editing state.
 * @return {Object} Action descriptor.
 */


function __experimentalSetEditingReusableBlock(clientId, isEditing) {
  return {
    type: 'SET_EDITING_REUSABLE_BLOCK',
    clientId,
    isEditing
  };
}
//# sourceMappingURL=actions.js.map
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ColorDisplay = void 0;

var _element = require("@wordpress/element");

var _tinycolor = _interopRequireDefault(require("tinycolor2"));

var _compose = require("@wordpress/compose");

var _i18n = require("@wordpress/i18n");

var _text = require("../../text");

var _flex = require("../../flex");

var _tooltip = require("../tooltip");

var _space = require("../utils/space");

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
const ValueDisplay = ({
  values
}) => (0, _element.createElement)(_element.Fragment, null, values.map(([value, abbreviation]) => {
  return (0, _element.createElement)(_flex.FlexItem, {
    key: abbreviation,
    isBlock: true,
    display: "flex"
  }, (0, _element.createElement)(_text.Text, {
    color: "blue"
  }, abbreviation), (0, _element.createElement)(_text.Text, null, value));
}));

const HslDisplay = ({
  color,
  enableAlpha
}) => {
  const {
    h,
    s,
    l,
    a
  } = (0, _tinycolor.default)(color).toHsl();
  const values = [[Math.floor(h), 'H'], [Math.round(s * 100), 'S'], [Math.round(l * 100), 'L']];

  if (enableAlpha) {
    values.push([Math.round(a * 100), 'A']);
  }

  return (0, _element.createElement)(ValueDisplay, {
    values: values
  });
};

const RgbDisplay = ({
  color,
  enableAlpha
}) => {
  const {
    r,
    g,
    b,
    a
  } = (0, _tinycolor.default)(color).toRgb();
  const values = [[r, 'R'], [g, 'G'], [b, 'B']];

  if (enableAlpha) {
    values.push([Math.round(a * 100), 'A']);
  }

  return (0, _element.createElement)(ValueDisplay, {
    values: values
  });
};

const HexDisplay = ({
  color,
  enableAlpha
}) => {
  const colorized = (0, _tinycolor.default)(color);
  const colorWithoutHash = (enableAlpha ? colorized.toHex8String() : colorized.toHexString()).slice(1).toUpperCase();
  return (0, _element.createElement)(_flex.FlexItem, null, (0, _element.createElement)(_text.Text, {
    color: "blue"
  }, "#"), (0, _element.createElement)(_text.Text, null, colorWithoutHash));
};

const getComponent = colorType => {
  switch (colorType) {
    case 'hsl':
      return HslDisplay;

    case 'rgb':
      return RgbDisplay;

    default:
    case 'hex':
      return HexDisplay;
  }
};

const ColorDisplay = ({
  color,
  colorType,
  enableAlpha
}) => {
  const [copiedColor, setCopiedColor] = (0, _element.useState)(null);
  const copyTimer = (0, _element.useRef)();
  const props = {
    color,
    enableAlpha
  };
  const Component = getComponent(colorType);
  const copyRef = (0, _compose.useCopyToClipboard)(() => {
    switch (colorType) {
      case 'hsl':
        {
          return (0, _tinycolor.default)(color).toHslString();
        }

      case 'rgb':
        {
          return (0, _tinycolor.default)(color).toRgbString();
        }

      default:
      case 'hex':
        {
          const colorized = (0, _tinycolor.default)(color);
          return enableAlpha ? colorized.toHex8String() : colorized.toHexString();
        }
    }
  }, () => {
    if (copyTimer.current) {
      clearTimeout(copyTimer.current);
    }

    setCopiedColor((0, _tinycolor.default)(color).toHex8String());
    copyTimer.current = setTimeout(() => {
      setCopiedColor(null);
      copyTimer.current = undefined;
    }, 3000);
  });
  (0, _element.useEffect)(() => {
    // clear copyTimer on component unmount.
    return () => {
      if (copyTimer.current) {
        clearTimeout(copyTimer.current);
      }
    };
  }, []);
  return (0, _element.createElement)(_tooltip.Tooltip, {
    content: (0, _element.createElement)(_text.Text, {
      color: "white"
    }, copiedColor === (0, _tinycolor.default)(color).toHex8String() ? (0, _i18n.__)('Copied!') : (0, _i18n.__)('Copy'))
  }, (0, _element.createElement)(_flex.Flex, {
    justify: "flex-start",
    gap: (0, _space.space)(1),
    ref: copyRef,
    style: {
      height: 30
    }
  }, (0, _element.createElement)(Component, props)));
};

exports.ColorDisplay = ColorDisplay;
//# sourceMappingURL=color-display.js.map
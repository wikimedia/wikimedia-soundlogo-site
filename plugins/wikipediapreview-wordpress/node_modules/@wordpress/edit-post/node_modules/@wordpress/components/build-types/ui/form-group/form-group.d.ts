export default ConnectedFormGroup;
/**
 * `FormGroup` is a form component that groups a label with a form element (e.g. `Switch` or `TextInput`).
 *
 * @example
 * ```jsx
 * import { FormGroup, TextInput } from `@wordpress/components/ui`;
 *
 * function Example() {
 * 	return (
 * 		<FormGroup label="First name">
 * 			<TextInput />
 * 		</FormGroup>
 * 	);
 * }
 * ```
 */
declare const ConnectedFormGroup: import("../context").WordPressComponent<import("react").ElementType<any>, import("../../text/types").Props & {
    isBlock?: boolean | undefined;
    size?: "small" | "medium" | "large" | undefined;
} & {
    labelHidden?: boolean | undefined;
    id?: import("react").ReactText | undefined;
} & {
    alignLabel?: import("react/node_modules/csstype").Property.TextAlign | undefined;
    help?: import("react").ReactNode;
    horizontal?: boolean | undefined;
    label?: import("react").ReactNode;
    spacing?: import("react/node_modules/csstype").Property.Width<string | number> | undefined;
    truncate?: boolean | undefined;
} & import("../../grid/types").Props & {
    horizontal: true;
} & Omit<Pick<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "key" | keyof import("react").HTMLAttributes<HTMLDivElement>> & {
    ref?: ((instance: HTMLDivElement | null) => void) | import("react").RefObject<HTMLDivElement> | null | undefined;
}, "children" | "label" | "as" | "color" | "id" | "display" | "letterSpacing" | "spacing" | "size" | "align" | "lineHeight" | "ellipsis" | "help" | "weight" | "horizontal" | "isBlock" | "variant" | "ellipsizeMode" | "limit" | "numberOfLines" | "adjustLineHeightForInnerControls" | "isDestructive" | "highlightEscape" | "highlightCaseSensitive" | "highlightSanitize" | "optimizeReadabilityFor" | "truncate" | "upperCase" | "highlightWords" | "labelHidden" | "alignLabel"> & {
    as?: keyof JSX.IntrinsicElements | undefined;
}, boolean> | import("../context").WordPressComponent<import("react").ElementType<any>, import("../../text/types").Props & {
    isBlock?: boolean | undefined;
    size?: "small" | "medium" | "large" | undefined;
} & {
    labelHidden?: boolean | undefined;
    id?: import("react").ReactText | undefined;
} & {
    alignLabel?: import("react/node_modules/csstype").Property.TextAlign | undefined;
    help?: import("react").ReactNode;
    horizontal?: boolean | undefined;
    label?: import("react").ReactNode;
    spacing?: import("react/node_modules/csstype").Property.Width<string | number> | undefined;
    truncate?: boolean | undefined;
} & {
    horizontal: false;
} & Omit<Pick<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "key" | keyof import("react").HTMLAttributes<HTMLDivElement>> & {
    ref?: ((instance: HTMLDivElement | null) => void) | import("react").RefObject<HTMLDivElement> | null | undefined;
}, "children" | "label" | "as" | "color" | "id" | "display" | "letterSpacing" | "spacing" | "size" | "align" | "lineHeight" | "ellipsis" | "help" | "weight" | "horizontal" | "isBlock" | "variant" | "ellipsizeMode" | "limit" | "numberOfLines" | "adjustLineHeightForInnerControls" | "isDestructive" | "highlightEscape" | "highlightCaseSensitive" | "highlightSanitize" | "optimizeReadabilityFor" | "truncate" | "upperCase" | "highlightWords" | "labelHidden" | "alignLabel"> & {
    as?: keyof JSX.IntrinsicElements | undefined;
}, boolean>;
//# sourceMappingURL=form-group.d.ts.map
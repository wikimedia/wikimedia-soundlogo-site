"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _hook = require("./hook");

var _view = require("../../view");

var _context = require("../../ui/context");

/**
 * External dependencies
 */
// eslint-disable-next-line no-restricted-imports

/**
 * Internal dependencies
 */
// This wraps controls to be conditionally displayed within a tools panel. It
// prevents props being applied to HTML elements that would make them invalid.
const ToolsPanelItem = (props, forwardedRef) => {
  const {
    children,
    isShown,
    ...toolsPanelItemProps
  } = (0, _hook.useToolsPanelItem)(props);

  if (!isShown) {
    return null;
  }

  return (0, _element.createElement)(_view.View, (0, _extends2.default)({}, toolsPanelItemProps, {
    ref: forwardedRef
  }), children);
};

const ConnectedToolsPanelItem = (0, _context.contextConnect)(ToolsPanelItem, 'ToolsPanelItem');
var _default = ConnectedToolsPanelItem;
exports.default = _default;
//# sourceMappingURL=component.js.map
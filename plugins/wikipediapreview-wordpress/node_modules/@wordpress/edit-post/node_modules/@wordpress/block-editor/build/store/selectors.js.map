{"version":3,"sources":["@wordpress/block-editor/src/store/selectors.js"],"names":["MILLISECONDS_PER_HOUR","MILLISECONDS_PER_DAY","MILLISECONDS_PER_WEEK","EMPTY_ARRAY","getBlockName","state","clientId","block","blocks","byClientId","socialLinkName","Platform","OS","name","attributes","service","isBlockValid","isValid","getBlockAttributes","getBlock","tree","__unstableGetBlockWithoutInnerBlocks","getBlocks","rootClientId","treeKey","areInnerBlocksControlled","innerBlocks","__unstableGetClientIdWithClientIdsTree","__unstableGetClientIdsTree","order","getBlockOrder","getClientIdsOfDescendants","clientIds","descendants","getClientIdsWithDescendants","topLevelIds","getGlobalBlockCount","blockName","length","accumulator","getBlocksByClientId","getBlockCount","getSelectionStart","selection","selectionStart","getSelectionEnd","selectionEnd","getBlockSelectionStart","getBlockSelectionEnd","getSelectedBlockCount","multiSelectedBlockCount","getMultiSelectedBlockClientIds","hasSelectedBlock","getSelectedBlockClientId","getSelectedBlock","getBlockRootClientId","parents","undefined","getBlockParents","ascending","current","push","reverse","getBlockParentsByBlockName","id","Array","isArray","includes","getBlockHierarchyRootClientId","parent","getLowestCommonAncestorWithSelectedBlock","selectedId","clientParents","selectedParents","lowestCommonAncestor","maxDepth","Math","min","index","getAdjacentBlockClientId","startClientId","modifier","getFirstMultiSelectedBlockClientId","getLastMultiSelectedBlockClientId","orderSet","indexOf","nextIndex","getPreviousBlockClientId","getNextBlockClientId","getSelectedBlocksInitialCaretPosition","initialPosition","getSelectedBlockClientIds","blockOrder","startIndex","endIndex","slice","getMultiSelectedBlocks","multiSelectedBlockClientIds","map","getDependants","isFirstMultiSelectedBlock","isBlockMultiSelected","isAncestorMultiSelected","ancestorClientId","isMultiSelected","getMultiSelectedBlocksStartClientId","getMultiSelectedBlocksEndClientId","getBlockIndex","isBlockSelected","hasSelectedInnerBlock","deep","innerClientId","isBlockWithinSelection","hasMultiSelection","isMultiSelecting","isSelectionEnabled","getBlockMode","blocksMode","isTyping","isDraggingBlocks","draggedBlocks","getDraggedBlockClientIds","isBlockBeingDragged","isAncestorBeingDragged","parentClientId","isCaretWithinFormattedText","getBlockInsertionPoint","insertionPoint","isBlockInsertionPointVisible","isValidTemplate","template","getTemplate","settings","getTemplateLock","templateLock","blockListSettings","getBlockListSettings","checkAllowList","list","item","defaultResult","canInsertBlockTypeUnmemoized","blockType","allowedBlockTypes","getSettings","isBlockAllowedInEditor","isLocked","parentBlockListSettings","parentAllowedBlocks","allowedBlocks","hasParentAllowedBlock","blockAllowedParentBlocks","parentName","hasBlockAllowedParent","canInsertBlockType","canInsertBlocks","every","canRemoveBlock","lock","parentIsLocked","remove","canRemoveBlocks","canMoveBlock","move","canMoveBlocks","getInsertUsage","preferences","insertUsage","canIncludeBlockTypeInInserter","getItemFromVariation","variation","variationId","time","count","icon","title","description","category","example","hasOwnProperty","initialAttributes","keywords","frecency","calculateFrecency","duration","Date","now","buildBlockTypeItem","buildScope","isDisabled","blockItemBase","inserterVariations","variations","filter","scope","utility","getInserterItems","buildBlockTypeInserterItem","buildReusableBlockInserterItem","reusableBlock","referencedBlocks","__experimentalGetParsedReusableBlock","referencedBlockType","ref","raw","symbol","blockTypeInserterItems","reusableBlockInserterItems","getReusableBlocks","visibleBlockTypeInserterItems","some","isDefault","blockVariations","variationMapper","groupByType","core","noncore","type","startsWith","items","reduce","sortedBlockTypes","getBlockTransformItems","buildBlockTypeTransformItem","blockTypeTransformItems","itemsByName","possibleTransforms","possibleBlockTransformations","hasInserterItems","hasBlockType","hasReusableBlock","__experimentalGetAllowedBlocks","__experimentalGetDirectInsertBlock","defaultBlock","__experimentalDefaultBlock","directInsert","__experimentalDirectInsert","checkAllowListRecursive","blocksQueue","shift","isAllowed","forEach","innerBlock","__experimentalGetParsedPattern","patternName","patterns","__experimentalBlockPatterns","pattern","find","content","getAllAllowedPatterns","parsedPatterns","allowedPatterns","__experimentalGetAllowedPatterns","availableParsedPatterns","patternsAllowed","__experimentalGetPatternsByBlockTypes","blockNames","normalizedBlockNames","blockTypes","__experimentalGetPatternTransformItems","selectedBlockNames","from","Set","isLastBlockChangePersistent","isPersistentChange","__experimentalGetBlockListSettingsForBlocks","blockListSettingsForBlocks","__experimentalGetReusableBlockTitle","__unstableIsLastBlockChangeIgnored","isIgnoredChange","__experimentalGetLastBlockAttributeChanges","lastBlockAttributesChange","__experimentalReusableBlocks","isNavigationMode","hasBlockMovingClientId","didAutomaticChange","automaticChangeStatus","isBlockHighlighted","highlightedBlock","controlledInnerBlocks","__experimentalGetActiveBlockIdByBlockNames","validBlockNames","selectedBlockClientId","entityAreaParents","wasBlockJustInserted","source","lastBlockInserted"],"mappings":"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AC3C,SAAOA,KAAK,CAAC8G,kBAAb;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASC,YAAT,CAAuB/G,KAAvB,EAA8BC,QAA9B,EAAyC;AAC/C,SAAOD,KAAK,CAACgH,UAAN,CAAkB/G,QAAlB,KAAgC,QAAvC;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASgH,QAAT,CAAmBjH,KAAnB,EAA2B;AACjC,SAAOA,KAAK,CAACiH,QAAb;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASC,gBAAT,CAA2BlH,KAA3B,EAAmC;AACzC,SAAO,CAAC,CAAEA,KAAK,CAACmH,aAAN,CAAoBlF,MAA9B;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASmF,wBAAT,CAAmCpH,KAAnC,EAA2C;AACjD,SAAOA,KAAK,CAACmH,aAAb;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASE,mBAAT,CAA8BrH,KAA9B,EAAqCC,QAArC,EAAgD;AACtD,SAAOD,KAAK,CAACmH,aAAN,CAAoBrD,QAApB,CAA8B7D,QAA9B,CAAP;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASqH,sBAAT,CAAiCtH,KAAjC,EAAwCC,QAAxC,EAAmD;AACzD;AACA;AACA,MAAK,CAAEiH,gBAAgB,CAAElH,KAAF,CAAvB,EAAmC;AAClC,WAAO,KAAP;AACA;;AAED,QAAMmD,OAAO,GAAGE,eAAe,CAAErD,KAAF,EAASC,QAAT,CAA/B;AACA,SAAO,kBAAMkD,OAAN,EAAiBoE,cAAF,IACrBF,mBAAmB,CAAErH,KAAF,EAASuH,cAAT,CADb,CAAP;AAGA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASC,0BAAT,CAAqCxH,KAArC,EAA6C;AACnD,SAAOA,KAAK,CAACwH,0BAAb;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A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","sourcesContent":["/**\n * External dependencies\n */\nimport {\n\tcastArray,\n\tflatMap,\n\tfirst,\n\tisArray,\n\tisBoolean,\n\tlast,\n\tmap,\n\treduce,\n\tsome,\n\tfind,\n\tfilter,\n\tmapKeys,\n\torderBy,\n} from 'lodash';\nimport createSelector from 'rememo';\n\n/**\n * WordPress dependencies\n */\nimport {\n\tgetBlockType,\n\tgetBlockTypes,\n\thasBlockSupport,\n\tgetPossibleBlockTransformations,\n\tparse,\n} from '@wordpress/blocks';\nimport { Platform } from '@wordpress/element';\nimport { symbol } from '@wordpress/icons';\n\n/**\n * A block selection object.\n *\n * @typedef {Object} WPBlockSelection\n *\n * @property {string} clientId     A block client ID.\n * @property {string} attributeKey A block attribute key.\n * @property {number} offset       An attribute value offset, based on the rich\n *                                 text value. See `wp.richText.create`.\n */\n\n// Module constants\nconst MILLISECONDS_PER_HOUR = 3600 * 1000;\nconst MILLISECONDS_PER_DAY = 24 * 3600 * 1000;\nconst MILLISECONDS_PER_WEEK = 7 * 24 * 3600 * 1000;\n\n/**\n * Shared reference to an empty array for cases where it is important to avoid\n * returning a new array reference on every invocation, as in a connected or\n * other pure component which performs `shouldComponentUpdate` check on props.\n * This should be used as a last resort, since the normalized data should be\n * maintained by the reducer result in state.\n *\n * @type {Array}\n */\nconst EMPTY_ARRAY = [];\n\n/**\n * Returns a block's name given its client ID, or null if no block exists with\n * the client ID.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {string} Block name.\n */\nexport function getBlockName( state, clientId ) {\n\tconst block = state.blocks.byClientId[ clientId ];\n\tconst socialLinkName = 'core/social-link';\n\n\tif ( Platform.OS !== 'web' && block?.name === socialLinkName ) {\n\t\tconst attributes = state.blocks.attributes[ clientId ];\n\t\tconst { service } = attributes;\n\n\t\treturn service ? `${ socialLinkName }-${ service }` : socialLinkName;\n\t}\n\treturn block ? block.name : null;\n}\n\n/**\n * Returns whether a block is valid or not.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {boolean} Is Valid.\n */\nexport function isBlockValid( state, clientId ) {\n\tconst block = state.blocks.byClientId[ clientId ];\n\treturn !! block && block.isValid;\n}\n\n/**\n * Returns a block's attributes given its client ID, or null if no block exists with\n * the client ID.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {Object?} Block attributes.\n */\nexport function getBlockAttributes( state, clientId ) {\n\tconst block = state.blocks.byClientId[ clientId ];\n\tif ( ! block ) {\n\t\treturn null;\n\t}\n\n\treturn state.blocks.attributes[ clientId ];\n}\n\n/**\n * Returns a block given its client ID. This is a parsed copy of the block,\n * containing its `blockName`, `clientId`, and current `attributes` state. This\n * is not the block's registration settings, which must be retrieved from the\n * blocks module registration store.\n *\n * getBlock recurses through its inner blocks until all its children blocks have\n * been retrieved. Note that getBlock will not return the child inner blocks of\n * an inner block controller. This is because an inner block controller syncs\n * itself with its own entity, and should therefore not be included with the\n * blocks of a different entity. For example, say you call `getBlocks( TP )` to\n * get the blocks of a template part. If another template part is a child of TP,\n * then the nested template part's child blocks will not be returned. This way,\n * the template block itself is considered part of the parent, but the children\n * are not.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {Object} Parsed block object.\n */\nexport function getBlock( state, clientId ) {\n\tconst block = state.blocks.byClientId[ clientId ];\n\tif ( ! block ) {\n\t\treturn null;\n\t}\n\n\treturn state.blocks.tree[ clientId ];\n}\n\nexport const __unstableGetBlockWithoutInnerBlocks = createSelector(\n\t( state, clientId ) => {\n\t\tconst block = state.blocks.byClientId[ clientId ];\n\t\tif ( ! block ) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn {\n\t\t\t...block,\n\t\t\tattributes: getBlockAttributes( state, clientId ),\n\t\t};\n\t},\n\t( state, clientId ) => [\n\t\tstate.blocks.byClientId[ clientId ],\n\t\tstate.blocks.attributes[ clientId ],\n\t]\n);\n\n/**\n * Returns all block objects for the current post being edited as an array in\n * the order they appear in the post. Note that this will exclude child blocks\n * of nested inner block controllers.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {Object[]} Post blocks.\n */\nexport function getBlocks( state, rootClientId ) {\n\tconst treeKey =\n\t\t! rootClientId || ! areInnerBlocksControlled( state, rootClientId )\n\t\t\t? rootClientId || ''\n\t\t\t: 'controlled||' + rootClientId;\n\treturn state.blocks.tree[ treeKey ]?.innerBlocks || EMPTY_ARRAY;\n}\n\n/**\n * Returns a stripped down block object containing only its client ID,\n * and its inner blocks' client IDs.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Client ID of the block to get.\n *\n * @return {Object} Client IDs of the post blocks.\n */\nexport const __unstableGetClientIdWithClientIdsTree = createSelector(\n\t( state, clientId ) => ( {\n\t\tclientId,\n\t\tinnerBlocks: __unstableGetClientIdsTree( state, clientId ),\n\t} ),\n\t( state ) => [ state.blocks.order ]\n);\n\n/**\n * Returns the block tree represented in the block-editor store from the\n * given root, consisting of stripped down block objects containing only\n * their client IDs, and their inner blocks' client IDs.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {Object[]} Client IDs of the post blocks.\n */\nexport const __unstableGetClientIdsTree = createSelector(\n\t( state, rootClientId = '' ) =>\n\t\tmap( getBlockOrder( state, rootClientId ), ( clientId ) =>\n\t\t\t__unstableGetClientIdWithClientIdsTree( state, clientId )\n\t\t),\n\t( state ) => [ state.blocks.order ]\n);\n\n/**\n * Returns an array containing the clientIds of all descendants\n * of the blocks given.\n *\n * @param {Object} state     Global application state.\n * @param {Array}  clientIds Array of blocks to inspect.\n *\n * @return {Array} ids of descendants.\n */\nexport const getClientIdsOfDescendants = ( state, clientIds ) =>\n\tflatMap( clientIds, ( clientId ) => {\n\t\tconst descendants = getBlockOrder( state, clientId );\n\t\treturn [\n\t\t\t...descendants,\n\t\t\t...getClientIdsOfDescendants( state, descendants ),\n\t\t];\n\t} );\n\n/**\n * Returns an array containing the clientIds of the top-level blocks\n * and their descendants of any depth (for nested blocks).\n *\n * @param {Object} state Global application state.\n *\n * @return {Array} ids of top-level and descendant blocks.\n */\nexport const getClientIdsWithDescendants = createSelector(\n\t( state ) => {\n\t\tconst topLevelIds = getBlockOrder( state );\n\t\treturn [\n\t\t\t...topLevelIds,\n\t\t\t...getClientIdsOfDescendants( state, topLevelIds ),\n\t\t];\n\t},\n\t( state ) => [ state.blocks.order ]\n);\n\n/**\n * Returns the total number of blocks, or the total number of blocks with a specific name in a post.\n * The number returned includes nested blocks.\n *\n * @param {Object}  state     Global application state.\n * @param {?string} blockName Optional block name, if specified only blocks of that type will be counted.\n *\n * @return {number} Number of blocks in the post, or number of blocks with name equal to blockName.\n */\nexport const getGlobalBlockCount = createSelector(\n\t( state, blockName ) => {\n\t\tconst clientIds = getClientIdsWithDescendants( state );\n\t\tif ( ! blockName ) {\n\t\t\treturn clientIds.length;\n\t\t}\n\t\treturn reduce(\n\t\t\tclientIds,\n\t\t\t( accumulator, clientId ) => {\n\t\t\t\tconst block = state.blocks.byClientId[ clientId ];\n\t\t\t\treturn block.name === blockName ? accumulator + 1 : accumulator;\n\t\t\t},\n\t\t\t0\n\t\t);\n\t},\n\t( state ) => [ state.blocks.order, state.blocks.byClientId ]\n);\n\n/**\n * Given an array of block client IDs, returns the corresponding array of block\n * objects.\n *\n * @param {Object}   state     Editor state.\n * @param {string[]} clientIds Client IDs for which blocks are to be returned.\n *\n * @return {WPBlock[]} Block objects.\n */\nexport const getBlocksByClientId = createSelector(\n\t( state, clientIds ) =>\n\t\tmap( castArray( clientIds ), ( clientId ) =>\n\t\t\tgetBlock( state, clientId )\n\t\t),\n\t( state, clientIds ) =>\n\t\tmap(\n\t\t\tcastArray( clientIds ),\n\t\t\t( clientId ) => state.blocks.tree[ clientId ]\n\t\t)\n);\n\n/**\n * Returns the number of blocks currently present in the post.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {number} Number of blocks in the post.\n */\nexport function getBlockCount( state, rootClientId ) {\n\treturn getBlockOrder( state, rootClientId ).length;\n}\n\n/**\n * Returns the current selection start block client ID, attribute key and text\n * offset.\n *\n * @param {Object} state Block editor state.\n *\n * @return {WPBlockSelection} Selection start information.\n */\nexport function getSelectionStart( state ) {\n\treturn state.selection.selectionStart;\n}\n\n/**\n * Returns the current selection end block client ID, attribute key and text\n * offset.\n *\n * @param {Object} state Block editor state.\n *\n * @return {WPBlockSelection} Selection end information.\n */\nexport function getSelectionEnd( state ) {\n\treturn state.selection.selectionEnd;\n}\n\n/**\n * Returns the current block selection start. This value may be null, and it\n * may represent either a singular block selection or multi-selection start.\n * A selection is singular if its start and end match.\n *\n * @param {Object} state Global application state.\n *\n * @return {?string} Client ID of block selection start.\n */\nexport function getBlockSelectionStart( state ) {\n\treturn state.selection.selectionStart.clientId;\n}\n\n/**\n * Returns the current block selection end. This value may be null, and it\n * may represent either a singular block selection or multi-selection end.\n * A selection is singular if its start and end match.\n *\n * @param {Object} state Global application state.\n *\n * @return {?string} Client ID of block selection end.\n */\nexport function getBlockSelectionEnd( state ) {\n\treturn state.selection.selectionEnd.clientId;\n}\n\n/**\n * Returns the number of blocks currently selected in the post.\n *\n * @param {Object} state Global application state.\n *\n * @return {number} Number of blocks selected in the post.\n */\nexport function getSelectedBlockCount( state ) {\n\tconst multiSelectedBlockCount = getMultiSelectedBlockClientIds( state )\n\t\t.length;\n\n\tif ( multiSelectedBlockCount ) {\n\t\treturn multiSelectedBlockCount;\n\t}\n\n\treturn state.selection.selectionStart.clientId ? 1 : 0;\n}\n\n/**\n * Returns true if there is a single selected block, or false otherwise.\n *\n * @param {Object} state Editor state.\n *\n * @return {boolean} Whether a single block is selected.\n */\nexport function hasSelectedBlock( state ) {\n\tconst { selectionStart, selectionEnd } = state.selection;\n\treturn (\n\t\t!! selectionStart.clientId &&\n\t\tselectionStart.clientId === selectionEnd.clientId\n\t);\n}\n\n/**\n * Returns the currently selected block client ID, or null if there is no\n * selected block.\n *\n * @param {Object} state Editor state.\n *\n * @return {?string} Selected block client ID.\n */\nexport function getSelectedBlockClientId( state ) {\n\tconst { selectionStart, selectionEnd } = state.selection;\n\tconst { clientId } = selectionStart;\n\n\tif ( ! clientId || clientId !== selectionEnd.clientId ) {\n\t\treturn null;\n\t}\n\n\treturn clientId;\n}\n\n/**\n * Returns the currently selected block, or null if there is no selected block.\n *\n * @param {Object} state Global application state.\n *\n * @return {?Object} Selected block.\n */\nexport function getSelectedBlock( state ) {\n\tconst clientId = getSelectedBlockClientId( state );\n\treturn clientId ? getBlock( state, clientId ) : null;\n}\n\n/**\n * Given a block client ID, returns the root block from which the block is\n * nested, an empty string for top-level blocks, or null if the block does not\n * exist.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block from which to find root client ID.\n *\n * @return {?string} Root client ID, if exists\n */\nexport function getBlockRootClientId( state, clientId ) {\n\treturn state.blocks.parents[ clientId ] !== undefined\n\t\t? state.blocks.parents[ clientId ]\n\t\t: null;\n}\n\n/**\n * Given a block client ID, returns the list of all its parents from top to bottom.\n *\n * @param {Object}  state     Editor state.\n * @param {string}  clientId  Block from which to find root client ID.\n * @param {boolean} ascending Order results from bottom to top (true) or top to bottom (false).\n *\n * @return {Array} ClientIDs of the parent blocks.\n */\nexport const getBlockParents = createSelector(\n\t( state, clientId, ascending = false ) => {\n\t\tconst parents = [];\n\t\tlet current = clientId;\n\t\twhile ( !! state.blocks.parents[ current ] ) {\n\t\t\tcurrent = state.blocks.parents[ current ];\n\t\t\tparents.push( current );\n\t\t}\n\n\t\treturn ascending ? parents : parents.reverse();\n\t},\n\t( state ) => [ state.blocks.parents ]\n);\n\n/**\n * Given a block client ID and a block name, returns the list of all its parents\n * from top to bottom, filtered by the given name(s). For example, if passed\n * 'core/group' as the blockName, it will only return parents which are group\n * blocks. If passed `[ 'core/group', 'core/cover']`, as the blockName, it will\n * return parents which are group blocks and parents which are cover blocks.\n *\n * @param {Object}          state     Editor state.\n * @param {string}          clientId  Block from which to find root client ID.\n * @param {string|string[]} blockName Block name(s) to filter.\n * @param {boolean}         ascending Order results from bottom to top (true) or top to bottom (false).\n *\n * @return {Array} ClientIDs of the parent blocks.\n */\nexport const getBlockParentsByBlockName = createSelector(\n\t( state, clientId, blockName, ascending = false ) => {\n\t\tconst parents = getBlockParents( state, clientId, ascending );\n\t\treturn map(\n\t\t\tfilter(\n\t\t\t\tmap( parents, ( id ) => ( {\n\t\t\t\t\tid,\n\t\t\t\t\tname: getBlockName( state, id ),\n\t\t\t\t} ) ),\n\t\t\t\t( { name } ) => {\n\t\t\t\t\tif ( Array.isArray( blockName ) ) {\n\t\t\t\t\t\treturn blockName.includes( name );\n\t\t\t\t\t}\n\t\t\t\t\treturn name === blockName;\n\t\t\t\t}\n\t\t\t),\n\t\t\t( { id } ) => id\n\t\t);\n\t},\n\t( state ) => [ state.blocks.parents ]\n);\n\n/**\n * Given a block client ID, returns the root of the hierarchy from which the block is nested, return the block itself for root level blocks.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block from which to find root client ID.\n *\n * @return {string} Root client ID\n */\nexport function getBlockHierarchyRootClientId( state, clientId ) {\n\tlet current = clientId;\n\tlet parent;\n\tdo {\n\t\tparent = current;\n\t\tcurrent = state.blocks.parents[ current ];\n\t} while ( current );\n\treturn parent;\n}\n\n/**\n * Given a block client ID, returns the lowest common ancestor with selected client ID.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block from which to find common ancestor client ID.\n *\n * @return {string} Common ancestor client ID or undefined\n */\nexport function getLowestCommonAncestorWithSelectedBlock( state, clientId ) {\n\tconst selectedId = getSelectedBlockClientId( state );\n\tconst clientParents = [ ...getBlockParents( state, clientId ), clientId ];\n\tconst selectedParents = [\n\t\t...getBlockParents( state, selectedId ),\n\t\tselectedId,\n\t];\n\n\tlet lowestCommonAncestor;\n\n\tconst maxDepth = Math.min( clientParents.length, selectedParents.length );\n\tfor ( let index = 0; index < maxDepth; index++ ) {\n\t\tif ( clientParents[ index ] === selectedParents[ index ] ) {\n\t\t\tlowestCommonAncestor = clientParents[ index ];\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn lowestCommonAncestor;\n}\n\n/**\n * Returns the client ID of the block adjacent one at the given reference\n * startClientId and modifier directionality. Defaults start startClientId to\n * the selected block, and direction as next block. Returns null if there is no\n * adjacent block.\n *\n * @param {Object}  state         Editor state.\n * @param {?string} startClientId Optional client ID of block from which to\n *                                search.\n * @param {?number} modifier      Directionality multiplier (1 next, -1\n *                                previous).\n *\n * @return {?string} Return the client ID of the block, or null if none exists.\n */\nexport function getAdjacentBlockClientId( state, startClientId, modifier = 1 ) {\n\t// Default to selected block.\n\tif ( startClientId === undefined ) {\n\t\tstartClientId = getSelectedBlockClientId( state );\n\t}\n\n\t// Try multi-selection starting at extent based on modifier.\n\tif ( startClientId === undefined ) {\n\t\tif ( modifier < 0 ) {\n\t\t\tstartClientId = getFirstMultiSelectedBlockClientId( state );\n\t\t} else {\n\t\t\tstartClientId = getLastMultiSelectedBlockClientId( state );\n\t\t}\n\t}\n\n\t// Validate working start client ID.\n\tif ( ! startClientId ) {\n\t\treturn null;\n\t}\n\n\t// Retrieve start block root client ID, being careful to allow the falsey\n\t// empty string top-level root by explicitly testing against null.\n\tconst rootClientId = getBlockRootClientId( state, startClientId );\n\tif ( rootClientId === null ) {\n\t\treturn null;\n\t}\n\n\tconst { order } = state.blocks;\n\tconst orderSet = order[ rootClientId ];\n\tconst index = orderSet.indexOf( startClientId );\n\tconst nextIndex = index + 1 * modifier;\n\n\t// Block was first in set and we're attempting to get previous.\n\tif ( nextIndex < 0 ) {\n\t\treturn null;\n\t}\n\n\t// Block was last in set and we're attempting to get next.\n\tif ( nextIndex === orderSet.length ) {\n\t\treturn null;\n\t}\n\n\t// Assume incremented index is within the set.\n\treturn orderSet[ nextIndex ];\n}\n\n/**\n * Returns the previous block's client ID from the given reference start ID.\n * Defaults start to the selected block. Returns null if there is no previous\n * block.\n *\n * @param {Object}  state         Editor state.\n * @param {?string} startClientId Optional client ID of block from which to\n *                                search.\n *\n * @return {?string} Adjacent block's client ID, or null if none exists.\n */\nexport function getPreviousBlockClientId( state, startClientId ) {\n\treturn getAdjacentBlockClientId( state, startClientId, -1 );\n}\n\n/**\n * Returns the next block's client ID from the given reference start ID.\n * Defaults start to the selected block. Returns null if there is no next\n * block.\n *\n * @param {Object}  state         Editor state.\n * @param {?string} startClientId Optional client ID of block from which to\n *                                search.\n *\n * @return {?string} Adjacent block's client ID, or null if none exists.\n */\nexport function getNextBlockClientId( state, startClientId ) {\n\treturn getAdjacentBlockClientId( state, startClientId, 1 );\n}\n\n/* eslint-disable jsdoc/valid-types */\n/**\n * Returns the initial caret position for the selected block.\n * This position is to used to position the caret properly when the selected block changes.\n * If the current block is not a RichText, having initial position set to 0 means \"focus block\"\n *\n * @param {Object} state Global application state.\n *\n * @return {0|-1|null} Initial position.\n */\nexport function getSelectedBlocksInitialCaretPosition( state ) {\n\t/* eslint-enable jsdoc/valid-types */\n\treturn state.initialPosition;\n}\n\n/**\n * Returns the current selection set of block client IDs (multiselection or single selection).\n *\n * @param {Object} state Editor state.\n *\n * @return {Array} Multi-selected block client IDs.\n */\nexport const getSelectedBlockClientIds = createSelector(\n\t( state ) => {\n\t\tconst { selectionStart, selectionEnd } = state.selection;\n\n\t\tif (\n\t\t\tselectionStart.clientId === undefined ||\n\t\t\tselectionEnd.clientId === undefined\n\t\t) {\n\t\t\treturn EMPTY_ARRAY;\n\t\t}\n\n\t\tif ( selectionStart.clientId === selectionEnd.clientId ) {\n\t\t\treturn [ selectionStart.clientId ];\n\t\t}\n\n\t\t// Retrieve root client ID to aid in retrieving relevant nested block\n\t\t// order, being careful to allow the falsey empty string top-level root\n\t\t// by explicitly testing against null.\n\t\tconst rootClientId = getBlockRootClientId(\n\t\t\tstate,\n\t\t\tselectionStart.clientId\n\t\t);\n\t\tif ( rootClientId === null ) {\n\t\t\treturn EMPTY_ARRAY;\n\t\t}\n\n\t\tconst blockOrder = getBlockOrder( state, rootClientId );\n\t\tconst startIndex = blockOrder.indexOf( selectionStart.clientId );\n\t\tconst endIndex = blockOrder.indexOf( selectionEnd.clientId );\n\n\t\tif ( startIndex > endIndex ) {\n\t\t\treturn blockOrder.slice( endIndex, startIndex + 1 );\n\t\t}\n\n\t\treturn blockOrder.slice( startIndex, endIndex + 1 );\n\t},\n\t( state ) => [\n\t\tstate.blocks.order,\n\t\tstate.selection.selectionStart.clientId,\n\t\tstate.selection.selectionEnd.clientId,\n\t]\n);\n\n/**\n * Returns the current multi-selection set of block client IDs, or an empty\n * array if there is no multi-selection.\n *\n * @param {Object} state Editor state.\n *\n * @return {Array} Multi-selected block client IDs.\n */\nexport function getMultiSelectedBlockClientIds( state ) {\n\tconst { selectionStart, selectionEnd } = state.selection;\n\n\tif ( selectionStart.clientId === selectionEnd.clientId ) {\n\t\treturn EMPTY_ARRAY;\n\t}\n\n\treturn getSelectedBlockClientIds( state );\n}\n\n/**\n * Returns the current multi-selection set of blocks, or an empty array if\n * there is no multi-selection.\n *\n * @param {Object} state Editor state.\n *\n * @return {Array} Multi-selected block objects.\n */\nexport const getMultiSelectedBlocks = createSelector(\n\t( state ) => {\n\t\tconst multiSelectedBlockClientIds = getMultiSelectedBlockClientIds(\n\t\t\tstate\n\t\t);\n\t\tif ( ! multiSelectedBlockClientIds.length ) {\n\t\t\treturn EMPTY_ARRAY;\n\t\t}\n\n\t\treturn multiSelectedBlockClientIds.map( ( clientId ) =>\n\t\t\tgetBlock( state, clientId )\n\t\t);\n\t},\n\t( state ) => [\n\t\t...getSelectedBlockClientIds.getDependants( state ),\n\t\tstate.blocks.byClientId,\n\t\tstate.blocks.order,\n\t\tstate.blocks.attributes,\n\t]\n);\n\n/**\n * Returns the client ID of the first block in the multi-selection set, or null\n * if there is no multi-selection.\n *\n * @param {Object} state Editor state.\n *\n * @return {?string} First block client ID in the multi-selection set.\n */\nexport function getFirstMultiSelectedBlockClientId( state ) {\n\treturn first( getMultiSelectedBlockClientIds( state ) ) || null;\n}\n\n/**\n * Returns the client ID of the last block in the multi-selection set, or null\n * if there is no multi-selection.\n *\n * @param {Object} state Editor state.\n *\n * @return {?string} Last block client ID in the multi-selection set.\n */\nexport function getLastMultiSelectedBlockClientId( state ) {\n\treturn last( getMultiSelectedBlockClientIds( state ) ) || null;\n}\n\n/**\n * Returns true if a multi-selection exists, and the block corresponding to the\n * specified client ID is the first block of the multi-selection set, or false\n * otherwise.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {boolean} Whether block is first in multi-selection.\n */\nexport function isFirstMultiSelectedBlock( state, clientId ) {\n\treturn getFirstMultiSelectedBlockClientId( state ) === clientId;\n}\n\n/**\n * Returns true if the client ID occurs within the block multi-selection, or\n * false otherwise.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {boolean} Whether block is in multi-selection set.\n */\nexport function isBlockMultiSelected( state, clientId ) {\n\treturn getMultiSelectedBlockClientIds( state ).indexOf( clientId ) !== -1;\n}\n\n/**\n * Returns true if an ancestor of the block is multi-selected, or false\n * otherwise.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {boolean} Whether an ancestor of the block is in multi-selection\n *                   set.\n */\nexport const isAncestorMultiSelected = createSelector(\n\t( state, clientId ) => {\n\t\tlet ancestorClientId = clientId;\n\t\tlet isMultiSelected = false;\n\t\twhile ( ancestorClientId && ! isMultiSelected ) {\n\t\t\tancestorClientId = getBlockRootClientId( state, ancestorClientId );\n\t\t\tisMultiSelected = isBlockMultiSelected( state, ancestorClientId );\n\t\t}\n\t\treturn isMultiSelected;\n\t},\n\t( state ) => [\n\t\tstate.blocks.order,\n\t\tstate.selection.selectionStart.clientId,\n\t\tstate.selection.selectionEnd.clientId,\n\t]\n);\n/**\n * Returns the client ID of the block which begins the multi-selection set, or\n * null if there is no multi-selection.\n *\n * This is not necessarily the first client ID in the selection.\n *\n * @see getFirstMultiSelectedBlockClientId\n *\n * @param {Object} state Editor state.\n *\n * @return {?string} Client ID of block beginning multi-selection.\n */\nexport function getMultiSelectedBlocksStartClientId( state ) {\n\tconst { selectionStart, selectionEnd } = state.selection;\n\n\tif ( selectionStart.clientId === selectionEnd.clientId ) {\n\t\treturn null;\n\t}\n\n\treturn selectionStart.clientId || null;\n}\n\n/**\n * Returns the client ID of the block which ends the multi-selection set, or\n * null if there is no multi-selection.\n *\n * This is not necessarily the last client ID in the selection.\n *\n * @see getLastMultiSelectedBlockClientId\n *\n * @param {Object} state Editor state.\n *\n * @return {?string} Client ID of block ending multi-selection.\n */\nexport function getMultiSelectedBlocksEndClientId( state ) {\n\tconst { selectionStart, selectionEnd } = state.selection;\n\n\tif ( selectionStart.clientId === selectionEnd.clientId ) {\n\t\treturn null;\n\t}\n\n\treturn selectionEnd.clientId || null;\n}\n\n/**\n * Returns an array containing all block client IDs in the editor in the order\n * they appear. Optionally accepts a root client ID of the block list for which\n * the order should be returned, defaulting to the top-level block order.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {Array} Ordered client IDs of editor blocks.\n */\nexport function getBlockOrder( state, rootClientId ) {\n\treturn state.blocks.order[ rootClientId || '' ] || EMPTY_ARRAY;\n}\n\n/**\n * Returns the index at which the block corresponding to the specified client\n * ID occurs within the block order, or `-1` if the block does not exist.\n *\n * @param {Object}  state        Editor state.\n * @param {string}  clientId     Block client ID.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {number} Index at which block exists in order.\n */\nexport function getBlockIndex( state, clientId, rootClientId ) {\n\treturn getBlockOrder( state, rootClientId ).indexOf( clientId );\n}\n\n/**\n * Returns true if the block corresponding to the specified client ID is\n * currently selected and no multi-selection exists, or false otherwise.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {boolean} Whether block is selected and multi-selection exists.\n */\nexport function isBlockSelected( state, clientId ) {\n\tconst { selectionStart, selectionEnd } = state.selection;\n\n\tif ( selectionStart.clientId !== selectionEnd.clientId ) {\n\t\treturn false;\n\t}\n\n\treturn selectionStart.clientId === clientId;\n}\n\n/**\n * Returns true if one of the block's inner blocks is selected.\n *\n * @param {Object}  state    Editor state.\n * @param {string}  clientId Block client ID.\n * @param {boolean} deep     Perform a deep check.\n *\n * @return {boolean} Whether the block as an inner block selected\n */\nexport function hasSelectedInnerBlock( state, clientId, deep = false ) {\n\treturn some(\n\t\tgetBlockOrder( state, clientId ),\n\t\t( innerClientId ) =>\n\t\t\tisBlockSelected( state, innerClientId ) ||\n\t\t\tisBlockMultiSelected( state, innerClientId ) ||\n\t\t\t( deep && hasSelectedInnerBlock( state, innerClientId, deep ) )\n\t);\n}\n\n/**\n * Returns true if the block corresponding to the specified client ID is\n * currently selected but isn't the last of the selected blocks. Here \"last\"\n * refers to the block sequence in the document, _not_ the sequence of\n * multi-selection, which is why `state.selectionEnd` isn't used.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {boolean} Whether block is selected and not the last in the\n *                   selection.\n */\nexport function isBlockWithinSelection( state, clientId ) {\n\tif ( ! clientId ) {\n\t\treturn false;\n\t}\n\n\tconst clientIds = getMultiSelectedBlockClientIds( state );\n\tconst index = clientIds.indexOf( clientId );\n\treturn index > -1 && index < clientIds.length - 1;\n}\n\n/**\n * Returns true if a multi-selection has been made, or false otherwise.\n *\n * @param {Object} state Editor state.\n *\n * @return {boolean} Whether multi-selection has been made.\n */\nexport function hasMultiSelection( state ) {\n\tconst { selectionStart, selectionEnd } = state.selection;\n\treturn selectionStart.clientId !== selectionEnd.clientId;\n}\n\n/**\n * Whether in the process of multi-selecting or not. This flag is only true\n * while the multi-selection is being selected (by mouse move), and is false\n * once the multi-selection has been settled.\n *\n * @see hasMultiSelection\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} True if multi-selecting, false if not.\n */\nexport function isMultiSelecting( state ) {\n\treturn state.isMultiSelecting;\n}\n\n/**\n * Selector that returns if multi-selection is enabled or not.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} True if it should be possible to multi-select blocks, false if multi-selection is disabled.\n */\nexport function isSelectionEnabled( state ) {\n\treturn state.isSelectionEnabled;\n}\n\n/**\n * Returns the block's editing mode, defaulting to \"visual\" if not explicitly\n * assigned.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {Object} Block editing mode.\n */\nexport function getBlockMode( state, clientId ) {\n\treturn state.blocksMode[ clientId ] || 'visual';\n}\n\n/**\n * Returns true if the user is typing, or false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether user is typing.\n */\nexport function isTyping( state ) {\n\treturn state.isTyping;\n}\n\n/**\n * Returns true if the user is dragging blocks, or false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether user is dragging blocks.\n */\nexport function isDraggingBlocks( state ) {\n\treturn !! state.draggedBlocks.length;\n}\n\n/**\n * Returns the client ids of any blocks being directly dragged.\n *\n * This does not include children of a parent being dragged.\n *\n * @param {Object} state Global application state.\n *\n * @return {string[]} Array of dragged block client ids.\n */\nexport function getDraggedBlockClientIds( state ) {\n\treturn state.draggedBlocks;\n}\n\n/**\n * Returns whether the block is being dragged.\n *\n * Only returns true if the block is being directly dragged,\n * not if the block is a child of a parent being dragged.\n * See `isAncestorBeingDragged` for child blocks.\n *\n * @param {Object} state    Global application state.\n * @param {string} clientId Client id for block to check.\n *\n * @return {boolean} Whether the block is being dragged.\n */\nexport function isBlockBeingDragged( state, clientId ) {\n\treturn state.draggedBlocks.includes( clientId );\n}\n\n/**\n * Returns whether a parent/ancestor of the block is being dragged.\n *\n * @param {Object} state    Global application state.\n * @param {string} clientId Client id for block to check.\n *\n * @return {boolean} Whether the block's ancestor is being dragged.\n */\nexport function isAncestorBeingDragged( state, clientId ) {\n\t// Return early if no blocks are being dragged rather than\n\t// the more expensive check for parents.\n\tif ( ! isDraggingBlocks( state ) ) {\n\t\treturn false;\n\t}\n\n\tconst parents = getBlockParents( state, clientId );\n\treturn some( parents, ( parentClientId ) =>\n\t\tisBlockBeingDragged( state, parentClientId )\n\t);\n}\n\n/**\n * Returns true if the caret is within formatted text, or false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the caret is within formatted text.\n */\nexport function isCaretWithinFormattedText( state ) {\n\treturn state.isCaretWithinFormattedText;\n}\n\n/**\n * Returns the insertion point, the index at which the new inserted block would\n * be placed. Defaults to the last index.\n *\n * @param {Object} state Editor state.\n *\n * @return {Object} Insertion point object with `rootClientId`, `index`.\n */\nexport function getBlockInsertionPoint( state ) {\n\tlet rootClientId, index;\n\n\tconst {\n\t\tinsertionPoint,\n\t\tselection: { selectionEnd },\n\t} = state;\n\tif ( insertionPoint !== null ) {\n\t\treturn insertionPoint;\n\t}\n\n\tconst { clientId } = selectionEnd;\n\n\tif ( clientId ) {\n\t\trootClientId = getBlockRootClientId( state, clientId ) || undefined;\n\t\tindex = getBlockIndex( state, selectionEnd.clientId, rootClientId ) + 1;\n\t} else {\n\t\tindex = getBlockOrder( state ).length;\n\t}\n\n\treturn { rootClientId, index };\n}\n\n/**\n * Returns true if we should show the block insertion point.\n *\n * @param {Object} state Global application state.\n *\n * @return {?boolean} Whether the insertion point is visible or not.\n */\nexport function isBlockInsertionPointVisible( state ) {\n\treturn state.insertionPoint !== null;\n}\n\n/**\n * Returns whether the blocks matches the template or not.\n *\n * @param {boolean} state\n * @return {?boolean} Whether the template is valid or not.\n */\nexport function isValidTemplate( state ) {\n\treturn state.template.isValid;\n}\n\n/**\n * Returns the defined block template\n *\n * @param {boolean} state\n *\n * @return {?Array} Block Template.\n */\nexport function getTemplate( state ) {\n\treturn state.settings.template;\n}\n\n/**\n * Returns the defined block template lock. Optionally accepts a root block\n * client ID as context, otherwise defaulting to the global context.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional block root client ID.\n *\n * @return {?string} Block Template Lock\n */\nexport function getTemplateLock( state, rootClientId ) {\n\tif ( ! rootClientId ) {\n\t\treturn state.settings.templateLock;\n\t}\n\n\tconst blockListSettings = getBlockListSettings( state, rootClientId );\n\tif ( ! blockListSettings ) {\n\t\treturn null;\n\t}\n\n\treturn blockListSettings.templateLock;\n}\n\nconst checkAllowList = ( list, item, defaultResult = null ) => {\n\tif ( isBoolean( list ) ) {\n\t\treturn list;\n\t}\n\tif ( isArray( list ) ) {\n\t\t// TODO: when there is a canonical way to detect that we are editing a post\n\t\t// the following check should be changed to something like:\n\t\t// if ( list.includes( 'core/post-content' ) && getEditorMode() === 'post-content' && item === null )\n\t\tif ( list.includes( 'core/post-content' ) && item === null ) {\n\t\t\treturn true;\n\t\t}\n\t\treturn list.includes( item );\n\t}\n\treturn defaultResult;\n};\n\n/**\n * Determines if the given block type is allowed to be inserted into the block list.\n * This function is not exported and not memoized because using a memoized selector\n * inside another memoized selector is just a waste of time.\n *\n * @param {Object}        state        Editor state.\n * @param {string|Object} blockName    The block type object, e.g., the response\n *                                     from the block directory; or a string name of\n *                                     an installed block type, e.g.' core/paragraph'.\n * @param {?string}       rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Whether the given block type is allowed to be inserted.\n */\nconst canInsertBlockTypeUnmemoized = (\n\tstate,\n\tblockName,\n\trootClientId = null\n) => {\n\tlet blockType;\n\tif ( blockName && 'object' === typeof blockName ) {\n\t\tblockType = blockName;\n\t\tblockName = blockType.name;\n\t} else {\n\t\tblockType = getBlockType( blockName );\n\t}\n\tif ( ! blockType ) {\n\t\treturn false;\n\t}\n\n\tconst { allowedBlockTypes } = getSettings( state );\n\n\tconst isBlockAllowedInEditor = checkAllowList(\n\t\tallowedBlockTypes,\n\t\tblockName,\n\t\ttrue\n\t);\n\tif ( ! isBlockAllowedInEditor ) {\n\t\treturn false;\n\t}\n\n\tconst isLocked = !! getTemplateLock( state, rootClientId );\n\tif ( isLocked ) {\n\t\treturn false;\n\t}\n\n\tconst parentBlockListSettings = getBlockListSettings( state, rootClientId );\n\n\t// The parent block doesn't have settings indicating it doesn't support\n\t// inner blocks, return false.\n\tif ( rootClientId && parentBlockListSettings === undefined ) {\n\t\treturn false;\n\t}\n\n\tconst parentAllowedBlocks = parentBlockListSettings?.allowedBlocks;\n\tconst hasParentAllowedBlock = checkAllowList(\n\t\tparentAllowedBlocks,\n\t\tblockName\n\t);\n\n\tconst blockAllowedParentBlocks = blockType.parent;\n\tconst parentName = getBlockName( state, rootClientId );\n\tconst hasBlockAllowedParent = checkAllowList(\n\t\tblockAllowedParentBlocks,\n\t\tparentName\n\t);\n\n\tif ( hasParentAllowedBlock !== null && hasBlockAllowedParent !== null ) {\n\t\treturn hasParentAllowedBlock || hasBlockAllowedParent;\n\t} else if ( hasParentAllowedBlock !== null ) {\n\t\treturn hasParentAllowedBlock;\n\t} else if ( hasBlockAllowedParent !== null ) {\n\t\treturn hasBlockAllowedParent;\n\t}\n\n\treturn true;\n};\n\n/**\n * Determines if the given block type is allowed to be inserted into the block list.\n *\n * @param {Object}  state        Editor state.\n * @param {string}  blockName    The name of the block type, e.g.' core/paragraph'.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Whether the given block type is allowed to be inserted.\n */\nexport const canInsertBlockType = createSelector(\n\tcanInsertBlockTypeUnmemoized,\n\t( state, blockName, rootClientId ) => [\n\t\tstate.blockListSettings[ rootClientId ],\n\t\tstate.blocks.byClientId[ rootClientId ],\n\t\tstate.settings.allowedBlockTypes,\n\t\tstate.settings.templateLock,\n\t]\n);\n\n/**\n * Determines if the given blocks are allowed to be inserted into the block\n * list.\n *\n * @param {Object}  state        Editor state.\n * @param {string}  clientIds    The block client IDs to be inserted.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Whether the given blocks are allowed to be inserted.\n */\nexport function canInsertBlocks( state, clientIds, rootClientId = null ) {\n\treturn clientIds.every( ( id ) =>\n\t\tcanInsertBlockType( state, getBlockName( state, id ), rootClientId )\n\t);\n}\n\n/**\n * Determines if the given block is allowed to be deleted.\n *\n * @param {Object}  state        Editor state.\n * @param {string}  clientId     The block client Id.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Whether the given block is allowed to be removed.\n */\nexport function canRemoveBlock( state, clientId, rootClientId = null ) {\n\tconst attributes = getBlockAttributes( state, clientId );\n\n\t// attributes can be null if the block is already deleted.\n\tif ( attributes === null ) {\n\t\treturn true;\n\t}\n\n\tconst { lock } = attributes;\n\tconst parentIsLocked = !! getTemplateLock( state, rootClientId );\n\t// If we don't have a lock on the blockType level, we differ to the parent templateLock.\n\tif ( lock === undefined || lock?.remove === undefined ) {\n\t\treturn ! parentIsLocked;\n\t}\n\n\t// when remove is true, it means we cannot remove it.\n\treturn ! lock?.remove;\n}\n\n/**\n * Determines if the given blocks are allowed to be removed.\n *\n * @param {Object}  state        Editor state.\n * @param {string}  clientIds    The block client IDs to be removed.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Whether the given blocks are allowed to be removed.\n */\nexport function canRemoveBlocks( state, clientIds, rootClientId = null ) {\n\treturn clientIds.every( ( clientId ) =>\n\t\tcanRemoveBlock( state, clientId, rootClientId )\n\t);\n}\n\n/**\n * Determines if the given block is allowed to be moved.\n *\n * @param {Object}  state        Editor state.\n * @param {string}  clientId     The block client Id.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Whether the given block is allowed to be moved.\n */\nexport function canMoveBlock( state, clientId, rootClientId = null ) {\n\tconst attributes = getBlockAttributes( state, clientId );\n\tif ( attributes === null ) {\n\t\treturn;\n\t}\n\n\tconst { lock } = attributes;\n\tconst parentIsLocked = getTemplateLock( state, rootClientId ) === 'all';\n\t// If we don't have a lock on the blockType level, we differ to the parent templateLock.\n\tif ( lock === undefined || lock?.move === undefined ) {\n\t\treturn ! parentIsLocked;\n\t}\n\n\t// when move is true, it means we cannot move it.\n\treturn ! lock?.move;\n}\n\n/**\n * Determines if the given blocks are allowed to be moved.\n *\n * @param {Object}  state        Editor state.\n * @param {string}  clientIds    The block client IDs to be moved.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Whether the given blocks are allowed to be moved.\n */\nexport function canMoveBlocks( state, clientIds, rootClientId = null ) {\n\treturn clientIds.every( ( clientId ) =>\n\t\tcanMoveBlock( state, clientId, rootClientId )\n\t);\n}\n\n/**\n * Returns information about how recently and frequently a block has been inserted.\n *\n * @param {Object} state Global application state.\n * @param {string} id    A string which identifies the insert, e.g. 'core/block/12'\n *\n * @return {?{ time: number, count: number }} An object containing `time` which is when the last\n *                                            insert occurred as a UNIX epoch, and `count` which is\n *                                            the number of inserts that have occurred.\n */\nfunction getInsertUsage( state, id ) {\n\treturn state.preferences.insertUsage?.[ id ] ?? null;\n}\n\n/**\n * Returns whether we can show a block type in the inserter\n *\n * @param {Object}  state        Global State\n * @param {Object}  blockType    BlockType\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Whether the given block type is allowed to be shown in the inserter.\n */\nconst canIncludeBlockTypeInInserter = ( state, blockType, rootClientId ) => {\n\tif ( ! hasBlockSupport( blockType, 'inserter', true ) ) {\n\t\treturn false;\n\t}\n\n\treturn canInsertBlockTypeUnmemoized( state, blockType.name, rootClientId );\n};\n\n/**\n * Return a function to be used to tranform a block variation to an inserter item\n *\n * @param {Object} state Global State\n * @param {Object} item  Denormalized inserter item\n * @return {Function} Function to transform a block variation to inserter item\n */\nconst getItemFromVariation = ( state, item ) => ( variation ) => {\n\tconst variationId = `${ item.id }/${ variation.name }`;\n\tconst { time, count = 0 } = getInsertUsage( state, variationId ) || {};\n\treturn {\n\t\t...item,\n\t\tid: variationId,\n\t\ticon: variation.icon || item.icon,\n\t\ttitle: variation.title || item.title,\n\t\tdescription: variation.description || item.description,\n\t\tcategory: variation.category || item.category,\n\t\t// If `example` is explicitly undefined for the variation, the preview will not be shown.\n\t\texample: variation.hasOwnProperty( 'example' )\n\t\t\t? variation.example\n\t\t\t: item.example,\n\t\tinitialAttributes: {\n\t\t\t...item.initialAttributes,\n\t\t\t...variation.attributes,\n\t\t},\n\t\tinnerBlocks: variation.innerBlocks,\n\t\tkeywords: variation.keywords || item.keywords,\n\t\tfrecency: calculateFrecency( time, count ),\n\t};\n};\n\n/**\n * Returns the calculated frecency.\n *\n * 'frecency' is a heuristic (https://en.wikipedia.org/wiki/Frecency)\n * that combines block usage frequenty and recency.\n *\n * @param {number} time  When the last insert occurred as a UNIX epoch\n * @param {number} count The number of inserts that have occurred.\n *\n * @return {number} The calculated frecency.\n */\nconst calculateFrecency = ( time, count ) => {\n\tif ( ! time ) {\n\t\treturn count;\n\t}\n\t// The selector is cached, which means Date.now() is the last time that the\n\t// relevant state changed. This suits our needs.\n\tconst duration = Date.now() - time;\n\tswitch ( true ) {\n\t\tcase duration < MILLISECONDS_PER_HOUR:\n\t\t\treturn count * 4;\n\t\tcase duration < MILLISECONDS_PER_DAY:\n\t\t\treturn count * 2;\n\t\tcase duration < MILLISECONDS_PER_WEEK:\n\t\t\treturn count / 2;\n\t\tdefault:\n\t\t\treturn count / 4;\n\t}\n};\n\n/**\n * Returns a function that accepts a block type and builds an item to be shown\n * in a specific context. It's used for building items for Inserter and available\n * block Transfroms list.\n *\n * @param {Object} state              Editor state.\n * @param {Object} options            Options object for handling the building of a block type.\n * @param {string} options.buildScope The scope for which the item is going to be used.\n * @return {Function} Function returns an item to be shown in a specific context (Inserter|Transforms list).\n */\nconst buildBlockTypeItem = ( state, { buildScope = 'inserter' } ) => (\n\tblockType\n) => {\n\tconst id = blockType.name;\n\n\tlet isDisabled = false;\n\tif ( ! hasBlockSupport( blockType.name, 'multiple', true ) ) {\n\t\tisDisabled = some(\n\t\t\tgetBlocksByClientId( state, getClientIdsWithDescendants( state ) ),\n\t\t\t{ name: blockType.name }\n\t\t);\n\t}\n\n\tconst { time, count = 0 } = getInsertUsage( state, id ) || {};\n\tconst blockItemBase = {\n\t\tid,\n\t\tname: blockType.name,\n\t\ttitle: blockType.title,\n\t\ticon: blockType.icon,\n\t\tisDisabled,\n\t\tfrecency: calculateFrecency( time, count ),\n\t};\n\tif ( buildScope === 'transform' ) return blockItemBase;\n\n\tconst inserterVariations = blockType.variations.filter(\n\t\t( { scope } ) => ! scope || scope.includes( 'inserter' )\n\t);\n\treturn {\n\t\t...blockItemBase,\n\t\tinitialAttributes: {},\n\t\tdescription: blockType.description,\n\t\tcategory: blockType.category,\n\t\tkeywords: blockType.keywords,\n\t\tvariations: inserterVariations,\n\t\texample: blockType.example,\n\t\tutility: 1, // deprecated\n\t};\n};\n\n/**\n * Determines the items that appear in the inserter. Includes both static\n * items (e.g. a regular block type) and dynamic items (e.g. a reusable block).\n *\n * Each item object contains what's necessary to display a button in the\n * inserter and handle its selection.\n *\n * The 'frecency' property is a heuristic (https://en.wikipedia.org/wiki/Frecency)\n * that combines block usage frequenty and recency.\n *\n * Items are returned ordered descendingly by their 'utility' and 'frecency'.\n *\n * @param    {Object}   state             Editor state.\n * @param    {?string}  rootClientId      Optional root client ID of block list.\n *\n * @return {WPEditorInserterItem[]} Items that appear in inserter.\n *\n * @typedef {Object} WPEditorInserterItem\n * @property {string}   id                Unique identifier for the item.\n * @property {string}   name              The type of block to create.\n * @property {Object}   initialAttributes Attributes to pass to the newly created block.\n * @property {string}   title             Title of the item, as it appears in the inserter.\n * @property {string}   icon              Dashicon for the item, as it appears in the inserter.\n * @property {string}   category          Block category that the item is associated with.\n * @property {string[]} keywords          Keywords that can be searched to find this item.\n * @property {boolean}  isDisabled        Whether or not the user should be prevented from inserting\n *                                        this item.\n * @property {number}   frecency          Heuristic that combines frequency and recency.\n */\nexport const getInserterItems = createSelector(\n\t( state, rootClientId = null ) => {\n\t\tconst buildBlockTypeInserterItem = buildBlockTypeItem( state, {\n\t\t\tbuildScope: 'inserter',\n\t\t} );\n\n\t\tconst buildReusableBlockInserterItem = ( reusableBlock ) => {\n\t\t\tconst id = `core/block/${ reusableBlock.id }`;\n\n\t\t\tconst referencedBlocks = __experimentalGetParsedReusableBlock(\n\t\t\t\tstate,\n\t\t\t\treusableBlock.id\n\t\t\t);\n\t\t\tlet referencedBlockType;\n\t\t\tif ( referencedBlocks.length === 1 ) {\n\t\t\t\treferencedBlockType = getBlockType(\n\t\t\t\t\treferencedBlocks[ 0 ].name\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst { time, count = 0 } = getInsertUsage( state, id ) || {};\n\t\t\tconst frecency = calculateFrecency( time, count );\n\n\t\t\treturn {\n\t\t\t\tid,\n\t\t\t\tname: 'core/block',\n\t\t\t\tinitialAttributes: { ref: reusableBlock.id },\n\t\t\t\ttitle: reusableBlock.title.raw,\n\t\t\t\ticon:\n\t\t\t\t\treferencedBlockType && Platform.OS === 'web'\n\t\t\t\t\t\t? referencedBlockType.icon\n\t\t\t\t\t\t: symbol,\n\t\t\t\tcategory: 'reusable',\n\t\t\t\tkeywords: [],\n\t\t\t\tisDisabled: false,\n\t\t\t\tutility: 1, // deprecated\n\t\t\t\tfrecency,\n\t\t\t};\n\t\t};\n\n\t\tconst blockTypeInserterItems = getBlockTypes()\n\t\t\t.filter( ( blockType ) =>\n\t\t\t\tcanIncludeBlockTypeInInserter( state, blockType, rootClientId )\n\t\t\t)\n\t\t\t.map( buildBlockTypeInserterItem );\n\n\t\tconst reusableBlockInserterItems = canInsertBlockTypeUnmemoized(\n\t\t\tstate,\n\t\t\t'core/block',\n\t\t\trootClientId\n\t\t)\n\t\t\t? getReusableBlocks( state ).map( buildReusableBlockInserterItem )\n\t\t\t: [];\n\n\t\t// Exclude any block type item that is to be replaced by a default\n\t\t// variation.\n\t\tconst visibleBlockTypeInserterItems = blockTypeInserterItems.filter(\n\t\t\t( { variations = [] } ) =>\n\t\t\t\t! variations.some( ( { isDefault } ) => isDefault )\n\t\t);\n\n\t\tconst blockVariations = [];\n\t\t// Show all available blocks with variations\n\t\tfor ( const item of blockTypeInserterItems ) {\n\t\t\tconst { variations = [] } = item;\n\t\t\tif ( variations.length ) {\n\t\t\t\tconst variationMapper = getItemFromVariation( state, item );\n\t\t\t\tblockVariations.push( ...variations.map( variationMapper ) );\n\t\t\t}\n\t\t}\n\t\t// Ensure core blocks are prioritized in the returned results,\n\t\t// because third party blocks can be registered earlier than\n\t\t// the core blocks (usually by using the `init` action),\n\t\t// thus affecting the display order.\n\t\t// We don't sort reusable blocks as they are handled differently.\n\t\tconst groupByType = ( blocks, block ) => {\n\t\t\tconst { core, noncore } = blocks;\n\t\t\tconst type = block.name.startsWith( 'core/' ) ? core : noncore;\n\n\t\t\ttype.push( block );\n\t\t\treturn blocks;\n\t\t};\n\t\tconst items = visibleBlockTypeInserterItems.reduce( groupByType, {\n\t\t\tcore: [],\n\t\t\tnoncore: [],\n\t\t} );\n\t\tconst variations = blockVariations.reduce( groupByType, {\n\t\t\tcore: [],\n\t\t\tnoncore: [],\n\t\t} );\n\t\tconst sortedBlockTypes = [\n\t\t\t...items.core,\n\t\t\t...variations.core,\n\t\t\t...items.noncore,\n\t\t\t...variations.noncore,\n\t\t];\n\t\treturn [ ...sortedBlockTypes, ...reusableBlockInserterItems ];\n\t},\n\t( state, rootClientId ) => [\n\t\tstate.blockListSettings[ rootClientId ],\n\t\tstate.blocks.byClientId,\n\t\tstate.blocks.order,\n\t\tstate.preferences.insertUsage,\n\t\tstate.settings.allowedBlockTypes,\n\t\tstate.settings.templateLock,\n\t\tgetReusableBlocks( state ),\n\t\tgetBlockTypes(),\n\t]\n);\n\n/**\n * Determines the items that appear in the available block transforms list.\n *\n * Each item object contains what's necessary to display a menu item in the\n * transform list and handle its selection.\n *\n * The 'frecency' property is a heuristic (https://en.wikipedia.org/wiki/Frecency)\n * that combines block usage frequenty and recency.\n *\n * Items are returned ordered descendingly by their 'frecency'.\n *\n * @param    {Object}  state        Editor state.\n * @param    {?string} rootClientId Optional root client ID of block list.\n *\n * @return {WPEditorTransformItem[]} Items that appear in inserter.\n *\n * @typedef {Object} WPEditorTransformItem\n * @property {string}  id           Unique identifier for the item.\n * @property {string}  name         The type of block to create.\n * @property {string}  title        Title of the item, as it appears in the inserter.\n * @property {string}  icon         Dashicon for the item, as it appears in the inserter.\n * @property {boolean} isDisabled   Whether or not the user should be prevented from inserting\n *                                  this item.\n * @property {number}  frecency     Heuristic that combines frequency and recency.\n */\nexport const getBlockTransformItems = createSelector(\n\t( state, blocks, rootClientId = null ) => {\n\t\tconst buildBlockTypeTransformItem = buildBlockTypeItem( state, {\n\t\t\tbuildScope: 'transform',\n\t\t} );\n\t\tconst blockTypeTransformItems = getBlockTypes()\n\t\t\t.filter( ( blockType ) =>\n\t\t\t\tcanIncludeBlockTypeInInserter( state, blockType, rootClientId )\n\t\t\t)\n\t\t\t.map( buildBlockTypeTransformItem );\n\n\t\tconst itemsByName = mapKeys(\n\t\t\tblockTypeTransformItems,\n\t\t\t( { name } ) => name\n\t\t);\n\t\tconst possibleTransforms = getPossibleBlockTransformations(\n\t\t\tblocks\n\t\t).reduce( ( accumulator, block ) => {\n\t\t\tif ( itemsByName[ block?.name ] ) {\n\t\t\t\taccumulator.push( itemsByName[ block.name ] );\n\t\t\t}\n\t\t\treturn accumulator;\n\t\t}, [] );\n\t\tconst possibleBlockTransformations = orderBy(\n\t\t\tpossibleTransforms,\n\t\t\t( block ) => itemsByName[ block.name ].frecency,\n\t\t\t'desc'\n\t\t);\n\t\treturn possibleBlockTransformations;\n\t},\n\t( state, rootClientId ) => [\n\t\tstate.blockListSettings[ rootClientId ],\n\t\tstate.blocks.byClientId,\n\t\tstate.preferences.insertUsage,\n\t\tstate.settings.allowedBlockTypes,\n\t\tstate.settings.templateLock,\n\t\tgetBlockTypes(),\n\t]\n);\n\n/**\n * Determines whether there are items to show in the inserter.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Items that appear in inserter.\n */\nexport const hasInserterItems = createSelector(\n\t( state, rootClientId = null ) => {\n\t\tconst hasBlockType = some( getBlockTypes(), ( blockType ) =>\n\t\t\tcanIncludeBlockTypeInInserter( state, blockType, rootClientId )\n\t\t);\n\t\tif ( hasBlockType ) {\n\t\t\treturn true;\n\t\t}\n\t\tconst hasReusableBlock =\n\t\t\tcanInsertBlockTypeUnmemoized( state, 'core/block', rootClientId ) &&\n\t\t\tgetReusableBlocks( state ).length > 0;\n\n\t\treturn hasReusableBlock;\n\t},\n\t( state, rootClientId ) => [\n\t\tstate.blockListSettings[ rootClientId ],\n\t\tstate.blocks.byClientId,\n\t\tstate.settings.allowedBlockTypes,\n\t\tstate.settings.templateLock,\n\t\tgetReusableBlocks( state ),\n\t\tgetBlockTypes(),\n\t]\n);\n\n/**\n * Returns the list of allowed inserter blocks for inner blocks children\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {Array?} The list of allowed block types.\n */\nexport const __experimentalGetAllowedBlocks = createSelector(\n\t( state, rootClientId = null ) => {\n\t\tif ( ! rootClientId ) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn filter( getBlockTypes(), ( blockType ) =>\n\t\t\tcanIncludeBlockTypeInInserter( state, blockType, rootClientId )\n\t\t);\n\t},\n\t( state, rootClientId ) => [\n\t\tstate.blockListSettings[ rootClientId ],\n\t\tstate.blocks.byClientId,\n\t\tstate.settings.allowedBlockTypes,\n\t\tstate.settings.templateLock,\n\t\tgetBlockTypes(),\n\t]\n);\n\n/**\n * Returns the block to be directly inserted by the block appender.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {?Array} The block type to be directly inserted.\n */\nexport const __experimentalGetDirectInsertBlock = createSelector(\n\t( state, rootClientId = null ) => {\n\t\tif ( ! rootClientId ) {\n\t\t\treturn;\n\t\t}\n\t\tconst defaultBlock =\n\t\t\tstate.blockListSettings[ rootClientId ]?.__experimentalDefaultBlock;\n\t\tconst directInsert =\n\t\t\tstate.blockListSettings[ rootClientId ]?.__experimentalDirectInsert;\n\t\tif ( ! defaultBlock || ! directInsert ) {\n\t\t\treturn;\n\t\t}\n\t\tif ( typeof directInsert === 'function' ) {\n\t\t\treturn directInsert( getBlock( state, rootClientId ) )\n\t\t\t\t? defaultBlock\n\t\t\t\t: null;\n\t\t}\n\t\treturn defaultBlock;\n\t},\n\t( state, rootClientId ) => [\n\t\tstate.blockListSettings[ rootClientId ],\n\t\tstate.blocks.tree[ rootClientId ],\n\t]\n);\n\nconst checkAllowListRecursive = ( blocks, allowedBlockTypes ) => {\n\tif ( isBoolean( allowedBlockTypes ) ) {\n\t\treturn allowedBlockTypes;\n\t}\n\n\tconst blocksQueue = [ ...blocks ];\n\twhile ( blocksQueue.length > 0 ) {\n\t\tconst block = blocksQueue.shift();\n\n\t\tconst isAllowed = checkAllowList(\n\t\t\tallowedBlockTypes,\n\t\t\tblock.name || block.blockName,\n\t\t\ttrue\n\t\t);\n\t\tif ( ! isAllowed ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tblock.innerBlocks?.forEach( ( innerBlock ) => {\n\t\t\tblocksQueue.push( innerBlock );\n\t\t} );\n\t}\n\n\treturn true;\n};\n\nexport const __experimentalGetParsedPattern = createSelector(\n\t( state, patternName ) => {\n\t\tconst patterns = state.settings.__experimentalBlockPatterns;\n\t\tconst pattern = patterns.find( ( { name } ) => name === patternName );\n\t\tif ( ! pattern ) {\n\t\t\treturn null;\n\t\t}\n\t\treturn {\n\t\t\t...pattern,\n\t\t\tblocks: parse( pattern.content ),\n\t\t};\n\t},\n\t( state ) => [ state.settings.__experimentalBlockPatterns ]\n);\n\nconst getAllAllowedPatterns = createSelector(\n\t( state ) => {\n\t\tconst patterns = state.settings.__experimentalBlockPatterns;\n\t\tconst { allowedBlockTypes } = getSettings( state );\n\t\tconst parsedPatterns = patterns.map( ( { name } ) =>\n\t\t\t__experimentalGetParsedPattern( state, name )\n\t\t);\n\t\tconst allowedPatterns = parsedPatterns.filter( ( { blocks } ) =>\n\t\t\tcheckAllowListRecursive( blocks, allowedBlockTypes )\n\t\t);\n\t\treturn allowedPatterns;\n\t},\n\t( state ) => [\n\t\tstate.settings.__experimentalBlockPatterns,\n\t\tstate.settings.allowedBlockTypes,\n\t]\n);\n\n/**\n * Returns the list of allowed patterns for inner blocks children.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional target root client ID.\n *\n * @return {Array?} The list of allowed patterns.\n */\nexport const __experimentalGetAllowedPatterns = createSelector(\n\t( state, rootClientId = null ) => {\n\t\tconst availableParsedPatterns = getAllAllowedPatterns( state );\n\t\tconst patternsAllowed = filter(\n\t\t\tavailableParsedPatterns,\n\t\t\t( { blocks } ) =>\n\t\t\t\tblocks.every( ( { name } ) =>\n\t\t\t\t\tcanInsertBlockType( state, name, rootClientId )\n\t\t\t\t)\n\t\t);\n\n\t\treturn patternsAllowed;\n\t},\n\t( state, rootClientId ) => [\n\t\tstate.settings.__experimentalBlockPatterns,\n\t\tstate.settings.allowedBlockTypes,\n\t\tstate.settings.templateLock,\n\t\tstate.blockListSettings[ rootClientId ],\n\t\tstate.blocks.byClientId[ rootClientId ],\n\t]\n);\n\n/**\n * Returns the list of patterns based on their declared `blockTypes`\n * and a block's name.\n * Patterns can use `blockTypes` to integrate in work flows like\n * suggesting appropriate patterns in a Placeholder state(during insertion)\n * or blocks transformations.\n *\n * @param {Object}          state        Editor state.\n * @param {string|string[]} blockNames   Block's name or array of block names to find matching pattens.\n * @param {?string}         rootClientId Optional target root client ID.\n *\n * @return {Array} The list of matched block patterns based on declared `blockTypes` and block name.\n */\nexport const __experimentalGetPatternsByBlockTypes = createSelector(\n\t( state, blockNames, rootClientId = null ) => {\n\t\tif ( ! blockNames ) return EMPTY_ARRAY;\n\t\tconst patterns = __experimentalGetAllowedPatterns(\n\t\t\tstate,\n\t\t\trootClientId\n\t\t);\n\t\tconst normalizedBlockNames = Array.isArray( blockNames )\n\t\t\t? blockNames\n\t\t\t: [ blockNames ];\n\t\treturn patterns.filter( ( pattern ) =>\n\t\t\tpattern?.blockTypes?.some?.( ( blockName ) =>\n\t\t\t\tnormalizedBlockNames.includes( blockName )\n\t\t\t)\n\t\t);\n\t},\n\t( state, rootClientId ) => [\n\t\t...__experimentalGetAllowedPatterns.getDependants(\n\t\t\tstate,\n\t\t\trootClientId\n\t\t),\n\t]\n);\n\n/**\n * Determines the items that appear in the available pattern transforms list.\n *\n * For now we only handle blocks without InnerBlocks and take into account\n * the `__experimentalRole` property of blocks' attributes for the transformation.\n *\n * We return the first set of possible eligible block patterns,\n * by checking the `blockTypes` property. We still have to recurse through\n * block pattern's blocks and try to find matches from the selected blocks.\n * Now this happens in the consumer to avoid heavy operations in the selector.\n *\n * @param {Object}   state        Editor state.\n * @param {Object[]} blocks       The selected blocks.\n * @param {?string}  rootClientId Optional root client ID of block list.\n *\n * @return {WPBlockPattern[]} Items that are eligible for a pattern transformation.\n */\nexport const __experimentalGetPatternTransformItems = createSelector(\n\t( state, blocks, rootClientId = null ) => {\n\t\tif ( ! blocks ) return EMPTY_ARRAY;\n\t\t/**\n\t\t * For now we only handle blocks without InnerBlocks and take into account\n\t\t * the `__experimentalRole` property of blocks' attributes for the transformation.\n\t\t * Note that the blocks have been retrieved through `getBlock`, which doesn't\n\t\t * return the inner blocks of an inner block controller, so we still need\n\t\t * to check for this case too.\n\t\t */\n\t\tif (\n\t\t\tblocks.some(\n\t\t\t\t( { clientId, innerBlocks } ) =>\n\t\t\t\t\tinnerBlocks.length ||\n\t\t\t\t\tareInnerBlocksControlled( state, clientId )\n\t\t\t)\n\t\t) {\n\t\t\treturn EMPTY_ARRAY;\n\t\t}\n\n\t\t// Create a Set of the selected block names that is used in patterns filtering.\n\t\tconst selectedBlockNames = Array.from(\n\t\t\tnew Set( blocks.map( ( { name } ) => name ) )\n\t\t);\n\t\t/**\n\t\t * Here we will return first set of possible eligible block patterns,\n\t\t * by checking the `blockTypes` property. We still have to recurse through\n\t\t * block pattern's blocks and try to find matches from the selected blocks.\n\t\t * Now this happens in the consumer to avoid heavy operations in the selector.\n\t\t */\n\t\treturn __experimentalGetPatternsByBlockTypes(\n\t\t\tstate,\n\t\t\tselectedBlockNames,\n\t\t\trootClientId\n\t\t);\n\t},\n\t( state, rootClientId ) => [\n\t\t...__experimentalGetPatternsByBlockTypes.getDependants(\n\t\t\tstate,\n\t\t\trootClientId\n\t\t),\n\t]\n);\n\n/**\n * Returns the Block List settings of a block, if any exist.\n *\n * @param {Object}  state    Editor state.\n * @param {?string} clientId Block client ID.\n *\n * @return {?Object} Block settings of the block if set.\n */\nexport function getBlockListSettings( state, clientId ) {\n\treturn state.blockListSettings[ clientId ];\n}\n\n/**\n * Returns the editor settings.\n *\n * @param {Object} state Editor state.\n *\n * @return {Object} The editor settings object.\n */\nexport function getSettings( state ) {\n\treturn state.settings;\n}\n\n/**\n * Returns true if the most recent block change is be considered persistent, or\n * false otherwise. A persistent change is one committed by BlockEditorProvider\n * via its `onChange` callback, in addition to `onInput`.\n *\n * @param {Object} state Block editor state.\n *\n * @return {boolean} Whether the most recent block change was persistent.\n */\nexport function isLastBlockChangePersistent( state ) {\n\treturn state.blocks.isPersistentChange;\n}\n\n/**\n * Returns the block list settings for an array of blocks, if any exist.\n *\n * @param {Object} state     Editor state.\n * @param {Array}  clientIds Block client IDs.\n *\n * @return {Object} An object where the keys are client ids and the values are\n *                  a block list setting object.\n */\nexport const __experimentalGetBlockListSettingsForBlocks = createSelector(\n\t( state, clientIds = [] ) => {\n\t\treturn clientIds.reduce( ( blockListSettingsForBlocks, clientId ) => {\n\t\t\tif ( ! state.blockListSettings[ clientId ] ) {\n\t\t\t\treturn blockListSettingsForBlocks;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t...blockListSettingsForBlocks,\n\t\t\t\t[ clientId ]: state.blockListSettings[ clientId ],\n\t\t\t};\n\t\t}, {} );\n\t},\n\t( state ) => [ state.blockListSettings ]\n);\n\n/**\n * Returns the parsed block saved as shared block with the given ID.\n *\n * @param {Object}        state Global application state.\n * @param {number|string} ref   The shared block's ID.\n *\n * @return {Object} The parsed block.\n */\nexport const __experimentalGetParsedReusableBlock = createSelector(\n\t( state, ref ) => {\n\t\tconst reusableBlock = find(\n\t\t\tgetReusableBlocks( state ),\n\t\t\t( block ) => block.id === ref\n\t\t);\n\t\tif ( ! reusableBlock ) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// Only reusableBlock.content.raw should be used here, `reusableBlock.content` is a\n\t\t// workaround until #22127 is fixed.\n\t\treturn parse(\n\t\t\ttypeof reusableBlock.content.raw === 'string'\n\t\t\t\t? reusableBlock.content.raw\n\t\t\t\t: reusableBlock.content\n\t\t);\n\t},\n\t( state ) => [ getReusableBlocks( state ) ]\n);\n\n/**\n * Returns the title of a given reusable block\n *\n * @param {Object}        state Global application state.\n * @param {number|string} ref   The shared block's ID.\n *\n * @return {string} The reusable block saved title.\n */\nexport const __experimentalGetReusableBlockTitle = createSelector(\n\t( state, ref ) => {\n\t\tconst reusableBlock = find(\n\t\t\tgetReusableBlocks( state ),\n\t\t\t( block ) => block.id === ref\n\t\t);\n\t\tif ( ! reusableBlock ) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn reusableBlock.title?.raw;\n\t},\n\t( state ) => [ getReusableBlocks( state ) ]\n);\n\n/**\n * Returns true if the most recent block change is be considered ignored, or\n * false otherwise. An ignored change is one not to be committed by\n * BlockEditorProvider, neither via `onChange` nor `onInput`.\n *\n * @param {Object} state Block editor state.\n *\n * @return {boolean} Whether the most recent block change was ignored.\n */\nexport function __unstableIsLastBlockChangeIgnored( state ) {\n\t// TODO: Removal Plan: Changes incurred by RECEIVE_BLOCKS should not be\n\t// ignored if in-fact they result in a change in blocks state. The current\n\t// need to ignore changes not a result of user interaction should be\n\t// accounted for in the refactoring of reusable blocks as occurring within\n\t// their own separate block editor / state (#7119).\n\treturn state.blocks.isIgnoredChange;\n}\n\n/**\n * Returns the block attributes changed as a result of the last dispatched\n * action.\n *\n * @param {Object} state Block editor state.\n *\n * @return {Object<string,Object>} Subsets of block attributes changed, keyed\n *                                 by block client ID.\n */\nexport function __experimentalGetLastBlockAttributeChanges( state ) {\n\treturn state.lastBlockAttributesChange;\n}\n\n/**\n * Returns the available reusable blocks\n *\n * @param {Object} state Global application state.\n *\n * @return {Array} Reusable blocks\n */\nfunction getReusableBlocks( state ) {\n\treturn state?.settings?.__experimentalReusableBlocks ?? EMPTY_ARRAY;\n}\n\n/**\n * Returns whether the navigation mode is enabled.\n *\n * @param {Object} state Editor state.\n *\n * @return {boolean} Is navigation mode enabled.\n */\nexport function isNavigationMode( state ) {\n\treturn state.isNavigationMode;\n}\n\n/**\n * Returns whether block moving mode is enabled.\n *\n * @param {Object} state Editor state.\n *\n * @return {string} Client Id of moving block.\n */\nexport function hasBlockMovingClientId( state ) {\n\treturn state.hasBlockMovingClientId;\n}\n\n/**\n * Returns true if the last change was an automatic change, false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the last change was automatic.\n */\nexport function didAutomaticChange( state ) {\n\treturn !! state.automaticChangeStatus;\n}\n\n/**\n * Returns true if the current highlighted block matches the block clientId.\n *\n * @param {Object} state    Global application state.\n * @param {string} clientId The block to check.\n *\n * @return {boolean} Whether the block is currently highlighted.\n */\nexport function isBlockHighlighted( state, clientId ) {\n\treturn state.highlightedBlock === clientId;\n}\n\n/**\n * Checks if a given block has controlled inner blocks.\n *\n * @param {Object} state    Global application state.\n * @param {string} clientId The block to check.\n *\n * @return {boolean} True if the block has controlled inner blocks.\n */\nexport function areInnerBlocksControlled( state, clientId ) {\n\treturn !! state.blocks.controlledInnerBlocks[ clientId ];\n}\n\n/**\n * Returns the clientId for the first 'active' block of a given array of block names.\n * A block is 'active' if it (or a child) is the selected block.\n * Returns the first match moving up the DOM from the selected block.\n *\n * @param {Object}   state            Global application state.\n * @param {string[]} validBlocksNames The names of block types to check for.\n *\n * @return {string} The matching block's clientId.\n */\nexport const __experimentalGetActiveBlockIdByBlockNames = createSelector(\n\t( state, validBlockNames ) => {\n\t\tif ( ! validBlockNames.length ) {\n\t\t\treturn null;\n\t\t}\n\t\t// Check if selected block is a valid entity area.\n\t\tconst selectedBlockClientId = getSelectedBlockClientId( state );\n\t\tif (\n\t\t\tvalidBlockNames.includes(\n\t\t\t\tgetBlockName( state, selectedBlockClientId )\n\t\t\t)\n\t\t) {\n\t\t\treturn selectedBlockClientId;\n\t\t}\n\t\t// Check if first selected block is a child of a valid entity area.\n\t\tconst multiSelectedBlockClientIds = getMultiSelectedBlockClientIds(\n\t\t\tstate\n\t\t);\n\t\tconst entityAreaParents = getBlockParentsByBlockName(\n\t\t\tstate,\n\t\t\tselectedBlockClientId || multiSelectedBlockClientIds[ 0 ],\n\t\t\tvalidBlockNames\n\t\t);\n\t\tif ( entityAreaParents ) {\n\t\t\t// Last parent closest/most interior.\n\t\t\treturn last( entityAreaParents );\n\t\t}\n\t\treturn null;\n\t},\n\t( state, validBlockNames ) => [\n\t\tstate.selection.selectionStart.clientId,\n\t\tstate.selection.selectionEnd.clientId,\n\t\tvalidBlockNames,\n\t]\n);\n\n/**\n * Tells if the block with the passed clientId was just inserted.\n *\n * @param {Object}  state    Global application state.\n * @param {Object}  clientId Client Id of the block.\n * @param {?string} source   Optional insertion source of the block.\n * @return {boolean} True if the block matches the last block inserted from the specified source.\n */\nexport function wasBlockJustInserted( state, clientId, source ) {\n\tconst { lastBlockInserted } = state;\n\treturn (\n\t\tlastBlockInserted.clientId === clientId &&\n\t\tlastBlockInserted.source === source\n\t);\n}\n"]}
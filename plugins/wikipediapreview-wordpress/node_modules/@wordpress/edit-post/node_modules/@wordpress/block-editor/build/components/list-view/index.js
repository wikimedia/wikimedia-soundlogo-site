"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _compose = require("@wordpress/compose");

var _components = require("@wordpress/components");

var _data = require("@wordpress/data");

var _i18n = require("@wordpress/i18n");

var _branch = _interopRequireDefault(require("./branch"));

var _context = require("./context");

var _dropIndicator = _interopRequireDefault(require("./drop-indicator"));

var _useListViewClientIds = _interopRequireDefault(require("./use-list-view-client-ids"));

var _useListViewDropZone = _interopRequireDefault(require("./use-list-view-drop-zone"));

var _store = require("../../store");

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
const noop = () => {};

const expanded = (state, action) => {
  switch (action.type) {
    case 'expand':
      return { ...state,
        ...{
          [action.clientId]: true
        }
      };

    case 'collapse':
      return { ...state,
        ...{
          [action.clientId]: false
        }
      };

    default:
      return state;
  }
};
/**
 * Wrap `ListViewRows` with `TreeGrid`. ListViewRows is a
 * recursive component (it renders itself), so this ensures TreeGrid is only
 * present at the very top of the navigation grid.
 *
 * @param {Object}   props                                          Components props.
 * @param {Array}    props.blocks                                   Custom subset of block client IDs to be used instead of the default hierarchy.
 * @param {Function} props.onSelect                                 Block selection callback.
 * @param {boolean}  props.showNestedBlocks                         Flag to enable displaying nested blocks.
 * @param {boolean}  props.showOnlyCurrentHierarchy                 Flag to limit the list to the current hierarchy of blocks.
 * @param {boolean}  props.__experimentalFeatures                   Flag to enable experimental features.
 * @param {boolean}  props.__experimentalPersistentListViewFeatures Flag to enable features for the Persistent List View experiment.
 * @param {Object}   ref                                            Forwarded ref
 */


function ListView({
  blocks,
  showOnlyCurrentHierarchy,
  onSelect = noop,
  __experimentalFeatures,
  __experimentalPersistentListViewFeatures,
  ...props
}, ref) {
  const {
    clientIdsTree,
    selectedClientIds,
    draggedClientIds
  } = (0, _useListViewClientIds.default)(blocks, showOnlyCurrentHierarchy, __experimentalPersistentListViewFeatures);
  const {
    selectBlock
  } = (0, _data.useDispatch)(_store.store);
  const selectEditorBlock = (0, _element.useCallback)(clientId => {
    selectBlock(clientId);
    onSelect(clientId);
  }, [selectBlock, onSelect]);
  const [expandedState, setExpandedState] = (0, _element.useReducer)(expanded, {});
  const {
    ref: dropZoneRef,
    target: blockDropTarget
  } = (0, _useListViewDropZone.default)();
  const elementRef = (0, _element.useRef)();
  const treeGridRef = (0, _compose.useMergeRefs)([elementRef, dropZoneRef, ref]);
  const isMounted = (0, _element.useRef)(false);
  (0, _element.useEffect)(() => {
    isMounted.current = true;
  }, []);
  const expand = (0, _element.useCallback)(clientId => {
    if (!clientId) {
      return;
    }

    setExpandedState({
      type: 'expand',
      clientId
    });
  }, [setExpandedState]);
  const collapse = (0, _element.useCallback)(clientId => {
    if (!clientId) {
      return;
    }

    setExpandedState({
      type: 'collapse',
      clientId
    });
  }, [setExpandedState]);

  const expandRow = row => {
    var _row$dataset;

    expand(row === null || row === void 0 ? void 0 : (_row$dataset = row.dataset) === null || _row$dataset === void 0 ? void 0 : _row$dataset.block);
  };

  const collapseRow = row => {
    var _row$dataset2;

    collapse(row === null || row === void 0 ? void 0 : (_row$dataset2 = row.dataset) === null || _row$dataset2 === void 0 ? void 0 : _row$dataset2.block);
  };

  const contextValue = (0, _element.useMemo)(() => ({
    __experimentalFeatures,
    __experimentalPersistentListViewFeatures,
    isTreeGridMounted: isMounted.current,
    draggedClientIds,
    selectedClientIds,
    expandedState,
    expand,
    collapse
  }), [__experimentalFeatures, __experimentalPersistentListViewFeatures, isMounted.current, draggedClientIds, selectedClientIds, expandedState, expand, collapse]);
  return (0, _element.createElement)(_data.AsyncModeProvider, {
    value: true
  }, (0, _element.createElement)(_dropIndicator.default, {
    listViewRef: elementRef,
    blockDropTarget: blockDropTarget
  }), (0, _element.createElement)(_components.__experimentalTreeGrid, {
    className: "block-editor-list-view-tree",
    "aria-label": (0, _i18n.__)('Block navigation structure'),
    ref: treeGridRef,
    onCollapseRow: collapseRow,
    onExpandRow: expandRow
  }, (0, _element.createElement)(_context.ListViewContext.Provider, {
    value: contextValue
  }, (0, _element.createElement)(_branch.default, (0, _extends2.default)({
    blocks: clientIdsTree,
    selectBlock: selectEditorBlock
  }, props)))));
}

var _default = (0, _element.forwardRef)(ListView);

exports.default = _default;
//# sourceMappingURL=index.js.map
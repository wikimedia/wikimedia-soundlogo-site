{"version":3,"sources":["@wordpress/block-editor/src/store/actions.js"],"names":["ensureDefaultBlock","count","controls","select","blockEditorStoreName","__unstableHasCustomAppender","insertDefaultBlock","resetBlocks","blocks","type","validateBlocksToTemplate","template","templateLock","isBlocksValidToTemplate","isValidTemplate","setTemplateValidity","resetSelection","selectionStart","selectionEnd","initialPosition","receiveBlocks","since","alternative","updateBlockAttributes","clientIds","attributes","uniqueByBlock","updateBlock","clientId","updates","selectBlock","selectPreviousBlock","previousBlockClientId","selectNextBlock","nextBlockClientId","startMultiSelect","stopMultiSelect","multiSelect","start","end","startBlockRootClientId","endBlockRootClientId","blockCount","clearSelectedBlock","toggleSelection","isSelectionEnabled","getBlocksWithDefaultStylesApplied","blockEditorSettings","preferredStyleVariations","__experimentalPreferredStyleVariations","value","map","block","blockName","name","className","includes","blockStyle","trim","replaceBlocks","indexToSelect","meta","rootClientId","index","length","canInsertBlock","time","Date","now","replaceBlock","createOnMove","canMoveBlocks","moveBlocksDown","moveBlocksUp","moveBlocksToPosition","fromRootClientId","toRootClientId","canRemoveBlocks","action","canInsertBlocks","moveBlockToPosition","insertBlock","updateSelection","insertBlocks","plugin","hint","allowedBlocks","isValid","push","showInsertionPoint","__unstableOptions","__unstableWithInserter","hideInsertionPoint","synchronizeTemplate","updatedBlockList","mergeBlocks","firstBlockClientId","secondBlockClientId","clientIdA","clientIdB","blockA","blockAType","merge","blockB","blockBType","attributeKey","offset","selectedBlockType","attributeDefinition","canRestoreTextSelection","undefined","window","console","error","START_OF_SELECTED_AREA","cloneA","cloneB","selectedBlock","html","multiline","multilineTag","__unstableMultilineWrapperTags","multilineWrapperTags","__unstablePreserveWhiteSpace","preserveWhiteSpace","blocksWithTheSameType","updatedAttributes","newAttributeKey","v","indexOf","convertedHtml","convertedValue","newOffset","text","newValue","newHtml","selectionChange","slice","removeBlocks","selectPrevious","previousBlockId","defaultBlockId","removeBlock","replaceInnerBlocks","toggleBlockMode","startTyping","stopTyping","startDraggingBlocks","stopDraggingBlocks","enterFormattedText","exitFormattedText","startOffset","endOffset","defaultBlockName","updateBlockListSettings","settings","updateSettings","__unstableSaveReusableBlock","id","updatedId","__unstableMarkLastChangeAsPersistent","__unstableMarkNextChangeAsNotPersistent","__unstableMarkAutomaticChange","__unstableMarkAutomaticChangeFinal","setNavigationMode","isNavigationMode","setBlockMovingClientId","hasBlockMovingClientId","duplicateBlocks","blockNames","lastSelectedIndex","clonedBlocks","insertBeforeBlock","isLocked","firstSelectedIndex","insertAfterBlock","toggleBlockHighlight","isHighlighted","flashBlock","duration","setHasControlledInnerBlocks","hasControlledInnerBlocks"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;AAKA;;AAWA;;AACA;;AACA;;AACA;;AACA;;AAKA;;AACA;;AA7BA;AACA;AACA;;AAGA;AACA;AACA;;AAkBA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA,UAAUA,kBAAV,GAA+B;AAC9B,QAAMC,KAAK,GAAG,MAAMC,eAASC,MAAT,CACnBC,qBADmB,EAEnB,eAFmB,CAApB,CAD8B,CAM9B;AACA;;AACA,MAAKH,KAAK,KAAK,CAAf,EAAmB;AAClB,UAAM;AAAEI,MAAAA;AAAF,QAAkC,MAAMH,eAASC,MAAT,CAC7CC,qBAD6C,EAE7C,aAF6C,CAA9C,CADkB,CAMlB;AACA;AACA;;AACA,QAAKC,2BAAL,EAAmC;AAClC;AACA;;AAED,WAAO,MAAMC,kBAAkB,EAA/B;AACA;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,UAAUC,WAAV,CAAuBC,MAAvB,EAAgC;AACtC,QAAM;AACLC,IAAAA,IAAI,EAAE,cADD;AAELD,IAAAA;AAFK,GAAN;AAIA,SAAO,OAAOE,wBAAwB,CAAEF,MAAF,CAAtC;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,UAAUE,wBAAV,CAAoCF,MAApC,EAA6C;AACnD,QAAMG,QAAQ,GAAG,MAAMT,eAASC,MAAT,CACtBC,qBADsB,EAEtB,aAFsB,CAAvB;AAIA,QAAMQ,YAAY,GAAG,MAAMV,eAASC,MAAT,CAC1BC,qBAD0B,EAE1B,iBAF0B,CAA3B,CALmD,CAUnD;AACA;;AACA,QAAMS,uBAAuB,GAC5B,CAAEF,QAAF,IACAC,YAAY,KAAK,KADjB,IAEA,mCAAuBJ,MAAvB,EAA+BG,QAA/B,CAHD,CAZmD,CAiBnD;;AACA,QAAMG,eAAe,GAAG,MAAMZ,eAASC,MAAT,CAC7BC,qBAD6B,EAE7B,iBAF6B,CAA9B;;AAKA,MAAKS,uBAAuB,KAAKC,eAAjC,EAAmD;AAClD,UAAMC,mBAAmB,CAAEF,uBAAF,CAAzB;AACA,WAAOA,uBAAP;AACA;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASG,cAAT,CACNC,cADM,EAENC,YAFM,EAGNC,eAHM,EAIL;AACD;AACA,SAAO;AACNV,IAAAA,IAAI,EAAE,iBADA;AAENQ,IAAAA,cAFM;AAGNC,IAAAA,YAHM;AAINC,IAAAA;AAJM,GAAP;AAMA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASC,aAAT,CAAwBZ,MAAxB,EAAiC;AACvC,2BAAY,uDAAZ,EAAqE;AACpEa,IAAAA,KAAK,EAAE,KAD6D;AAEpEC,IAAAA,WAAW,EAAE;AAFuD,GAArE;AAKA,SAAO;AACNb,IAAAA,IAAI,EAAE,gBADA;AAEND,IAAAA;AAFM,GAAP;AAIA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASe,qBAAT,CACNC,SADM,EAENC,UAFM,EAGNC,aAAa,GAAG,KAHV,EAIL;AACD,SAAO;AACNjB,IAAAA,IAAI,EAAE,yBADA;AAENe,IAAAA,SAAS,EAAE,uBAAWA,SAAX,CAFL;AAGNC,IAAAA,UAHM;AAINC,IAAAA;AAJM,GAAP;AAMA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASC,WAAT,CAAsBC,QAAtB,EAAgCC,OAAhC,EAA0C;AAChD,SAAO;AACNpB,IAAAA,IAAI,EAAE,cADA;AAENmB,IAAAA,QAFM;AAGNC,IAAAA;AAHM,GAAP;AAKA;AAED;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASC,WAAT,CAAsBF,QAAtB,EAAgCT,eAAe,GAAG,CAAlD,EAAsD;AAC5D;AACA,SAAO;AACNV,IAAAA,IAAI,EAAE,cADA;AAENU,IAAAA,eAFM;AAGNS,IAAAA;AAHM,GAAP;AAKA;AAED;AACA;AACA;AACA;AACA;AACA;;;AACO,UAAUG,mBAAV,CAA+BH,QAA/B,EAA0C;AAChD,QAAMI,qBAAqB,GAAG,MAAM9B,eAASC,MAAT,CACnCC,qBADmC,EAEnC,0BAFmC,EAGnCwB,QAHmC,CAApC;;AAMA,MAAKI,qBAAL,EAA6B;AAC5B,UAAMF,WAAW,CAAEE,qBAAF,EAAyB,CAAC,CAA1B,CAAjB;AACA,WAAO,CAAEA,qBAAF,CAAP;AACA;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACO,UAAUC,eAAV,CAA2BL,QAA3B,EAAsC;AAC5C,QAAMM,iBAAiB,GAAG,MAAMhC,eAASC,MAAT,CAC/BC,qBAD+B,EAE/B,sBAF+B,EAG/BwB,QAH+B,CAAhC;;AAMA,MAAKM,iBAAL,EAAyB;AACxB,UAAMJ,WAAW,CAAEI,iBAAF,CAAjB;AACA,WAAO,CAAEA,iBAAF,CAAP;AACA;AACD;AAED;AACA;AACA;AACA;AACA;;;AACO,SAASC,gBAAT,GAA4B;AAClC,SAAO;AACN1B,IAAAA,IAAI,EAAE;AADA,GAAP;AAGA;AAED;AACA;AACA;AACA;AACA;;;AACO,SAAS2B,eAAT,GAA2B;AACjC,SAAO;AACN3B,IAAAA,IAAI,EAAE;AADA,GAAP;AAGA;AAED;AACA;AACA;AACA;AACA;AACA;;;AACO,UAAU4B,WAAV,CAAuBC,KAAvB,EAA8BC,GAA9B,EAAoC;AAC1C,QAAMC,sBAAsB,GAAG,MAAMtC,eAASC,MAAT,CACpCC,qBADoC,EAEpC,sBAFoC,EAGpCkC,KAHoC,CAArC;AAKA,QAAMG,oBAAoB,GAAG,MAAMvC,eAASC,MAAT,CAClCC,qBADkC,EAElC,sBAFkC,EAGlCmC,GAHkC,CAAnC,CAN0C,CAY1C;;AACA,MAAKC,sBAAsB,KAAKC,oBAAhC,EAAuD;AACtD;AACA;;AAED,QAAM;AACLhC,IAAAA,IAAI,EAAE,cADD;AAEL6B,IAAAA,KAFK;AAGLC,IAAAA;AAHK,GAAN;AAMA,QAAMG,UAAU,GAAG,MAAMxC,eAASC,MAAT,CACxBC,qBADwB,EAExB,uBAFwB,CAAzB;AAKA,mBACC;AACC;AACA,gBAAI,oBAAJ,EAA0B,qBAA1B,EAAiDsC,UAAjD,CAFD,EAGCA,UAHD,CADD,EAMC,WAND;AAQA;AAED;AACA;AACA;AACA;AACA;;;AACO,SAASC,kBAAT,GAA8B;AACpC,SAAO;AACNlC,IAAAA,IAAI,EAAE;AADA,GAAP;AAGA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASmC,eAAT,CAA0BC,kBAAkB,GAAG,IAA/C,EAAsD;AAC5D,SAAO;AACNpC,IAAAA,IAAI,EAAE,kBADA;AAENoC,IAAAA;AAFM,GAAP;AAIA;;AAED,SAASC,iCAAT,CAA4CtC,MAA5C,EAAoDuC,mBAApD,EAA0E;AAAA;;AACzE,QAAMC,wBAAwB,4BAC7BD,mBAD6B,aAC7BA,mBAD6B,iDAC7BA,mBAAmB,CAAEE,sCADQ,2DAC7B,uBAA6DC,KADhC,yEAE7B,EAFD;AAGA,SAAO1C,MAAM,CAAC2C,GAAP,CAAcC,KAAF,IAAa;AAAA;;AAC/B,UAAMC,SAAS,GAAGD,KAAK,CAACE,IAAxB;;AACA,QAAK,CAAE,6BAAiBD,SAAjB,EAA4B,oBAA5B,EAAkD,IAAlD,CAAP,EAAkE;AACjE,aAAOD,KAAP;AACA;;AACD,QAAK,CAAEJ,wBAAwB,CAAEK,SAAF,CAA/B,EAA+C;AAC9C,aAAOD,KAAP;AACA;;AACD,UAAMG,SAAS,wBAAGH,KAAK,CAAC3B,UAAT,sDAAG,kBAAkB8B,SAApC;;AACA,QAAKA,SAAL,aAAKA,SAAL,eAAKA,SAAS,CAAEC,QAAX,CAAqB,WAArB,CAAL,EAA0C;AACzC,aAAOJ,KAAP;AACA;;AACD,UAAM;AAAE3B,MAAAA,UAAU,GAAG;AAAf,QAAsB2B,KAA5B;AACA,UAAMK,UAAU,GAAGT,wBAAwB,CAAEK,SAAF,CAA3C;AACA,WAAO,EACN,GAAGD,KADG;AAEN3B,MAAAA,UAAU,EAAE,EACX,GAAGA,UADQ;AAEX8B,QAAAA,SAAS,EAAG,GACXA,SAAS,IAAI,EACb,aAAaE,UAAY,EAFf,CAEiBC,IAFjB;AAFA;AAFN,KAAP;AASA,GAvBM,CAAP;AAwBA;AAED;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,UAAUC,aAAV,CACNnC,SADM,EAENhB,MAFM,EAGNoD,aAHM,EAINzC,eAAe,GAAG,CAJZ,EAKN0C,IALM,EAML;AACD;AACArC,EAAAA,SAAS,GAAG,uBAAWA,SAAX,CAAZ;AACAhB,EAAAA,MAAM,GAAGsC,iCAAiC,CACzC,uBAAWtC,MAAX,CADyC,EAEzC,MAAMN,eAASC,MAAT,CAAiBC,qBAAjB,EAAuC,aAAvC,CAFmC,CAA1C;AAIA,QAAM0D,YAAY,GAAG,MAAM5D,eAASC,MAAT,CAC1BC,qBAD0B,EAE1B,sBAF0B,EAG1B,mBAAOoB,SAAP,CAH0B,CAA3B,CAPC,CAYD;;AACA,OAAM,IAAIuC,KAAK,GAAG,CAAlB,EAAqBA,KAAK,GAAGvD,MAAM,CAACwD,MAApC,EAA4CD,KAAK,EAAjD,EAAsD;AACrD,UAAMX,KAAK,GAAG5C,MAAM,CAAEuD,KAAF,CAApB;AACA,UAAME,cAAc,GAAG,MAAM/D,eAASC,MAAT,CAC5BC,qBAD4B,EAE5B,oBAF4B,EAG5BgD,KAAK,CAACE,IAHsB,EAI5BQ,YAJ4B,CAA7B;;AAMA,QAAK,CAAEG,cAAP,EAAwB;AACvB;AACA;AACD;;AACD,QAAM;AACLxD,IAAAA,IAAI,EAAE,gBADD;AAELe,IAAAA,SAFK;AAGLhB,IAAAA,MAHK;AAIL0D,IAAAA,IAAI,EAAEC,IAAI,CAACC,GAAL,EAJD;AAKLR,IAAAA,aALK;AAMLzC,IAAAA,eANK;AAOL0C,IAAAA;AAPK,GAAN;AASA,SAAO7D,kBAAkB,EAAzB;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASqE,YAAT,CAAuBzC,QAAvB,EAAiCwB,KAAjC,EAAyC;AAC/C,SAAOO,aAAa,CAAE/B,QAAF,EAAYwB,KAAZ,CAApB;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASkB,YAAT,CAAuB7D,IAAvB,EAA8B;AAC7B,SAAO,WAAYe,SAAZ,EAAuBsC,YAAvB,EAAsC;AAC5C,UAAMS,aAAa,GAAG,MAAMrE,eAASC,MAAT,CAC3BC,qBAD2B,EAE3B,eAF2B,EAG3BoB,SAH2B,EAI3BsC,YAJ2B,CAA5B,CAD4C,CAQ5C;;AACA,QAAK,CAAES,aAAP,EAAuB;AACtB;AACA;;AAED,UAAM;AACL/C,MAAAA,SAAS,EAAE,uBAAWA,SAAX,CADN;AAELf,MAAAA,IAFK;AAGLqD,MAAAA;AAHK,KAAN;AAKA,GAlBD;AAmBA;;AAEM,MAAMU,cAAc,GAAGF,YAAY,CAAE,kBAAF,CAAnC;;AACA,MAAMG,YAAY,GAAGH,YAAY,CAAE,gBAAF,CAAjC;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACO,UAAUI,oBAAV,CACNlD,SADM,EAENmD,gBAAgB,GAAG,EAFb,EAGNC,cAAc,GAAG,EAHX,EAINb,KAJM,EAKL;AACD,QAAMQ,aAAa,GAAG,MAAMrE,eAASC,MAAT,CAC3BC,qBAD2B,EAE3B,eAF2B,EAG3BoB,SAH2B,EAI3BmD,gBAJ2B,CAA5B;AAOA,QAAME,eAAe,GAAG,MAAM3E,eAASC,MAAT,CAC7BC,qBAD6B,EAE7B,iBAF6B,EAG7BoB,SAH6B,EAI7BmD,gBAJ6B,CAA9B,CARC,CAeD;;AACA,MAAK,CAAEJ,aAAP,EAAuB;AACtB;AACA;;AAED,QAAMO,MAAM,GAAG;AACdrE,IAAAA,IAAI,EAAE,yBADQ;AAEdkE,IAAAA,gBAFc;AAGdC,IAAAA,cAHc;AAIdpD,IAAAA,SAJc;AAKduC,IAAAA;AALc,GAAf,CApBC,CA4BD;;AACA,MAAKY,gBAAgB,KAAKC,cAA1B,EAA2C;AAC1C,UAAME,MAAN;AACA;AACA,GAhCA,CAkCD;AACA;;;AACA,MAAK,CAAED,eAAP,EAAyB;AACxB;AACA;;AAED,QAAME,eAAe,GAAG,MAAM7E,eAASC,MAAT,CAC7BC,qBAD6B,EAE7B,iBAF6B,EAG7BoB,SAH6B,EAI7BoD,cAJ6B,CAA9B,CAxCC,CA+CD;;AACA,MAAKG,eAAL,EAAuB;AACtB,UAAMD,MAAN;AACA;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,UAAUE,mBAAV,CACNpD,QADM,EAEN+C,gBAAgB,GAAG,EAFb,EAGNC,cAAc,GAAG,EAHX,EAINb,KAJM,EAKL;AACD,QAAMW,oBAAoB,CACzB,CAAE9C,QAAF,CADyB,EAEzB+C,gBAFyB,EAGzBC,cAHyB,EAIzBb,KAJyB,CAA1B;AAMA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASkB,WAAT,CACN7B,KADM,EAENW,KAFM,EAGND,YAHM,EAINoB,eAAe,GAAG,IAJZ,EAKNrB,IALM,EAML;AACD,SAAOsB,YAAY,CAClB,CAAE/B,KAAF,CADkB,EAElBW,KAFkB,EAGlBD,YAHkB,EAIlBoB,eAJkB,EAKlB,CALkB,EAMlBrB,IANkB,CAAnB;AAQA;AAED;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,UAAUsB,YAAV,CACN3E,MADM,EAENuD,KAFM,EAGND,YAHM,EAINoB,eAAe,GAAG,IAJZ,EAKN/D,eAAe,GAAG,CALZ,EAMN0C,IANM,EAOL;AACD;AACA,MAAK,sBAAU1C,eAAV,CAAL,EAAmC;AAClC0C,IAAAA,IAAI,GAAG1C,eAAP;AACAA,IAAAA,eAAe,GAAG,CAAlB;AACA,6BAAY,wDAAZ,EAAsE;AACrEE,MAAAA,KAAK,EAAE,MAD8D;AAErE+D,MAAAA,MAAM,EAAE,WAF6D;AAGrEC,MAAAA,IAAI,EAAE;AAH+D,KAAtE;AAKA;;AAED7E,EAAAA,MAAM,GAAGsC,iCAAiC,CACzC,uBAAWtC,MAAX,CADyC,EAEzC,MAAMN,eAASC,MAAT,CAAiBC,qBAAjB,EAAuC,aAAvC,CAFmC,CAA1C;AAIA,QAAMkF,aAAa,GAAG,EAAtB;;AACA,OAAM,MAAMlC,KAAZ,IAAqB5C,MAArB,EAA8B;AAC7B,UAAM+E,OAAO,GAAG,MAAMrF,eAASC,MAAT,CACrBC,qBADqB,EAErB,oBAFqB,EAGrBgD,KAAK,CAACE,IAHe,EAIrBQ,YAJqB,CAAtB;;AAMA,QAAKyB,OAAL,EAAe;AACdD,MAAAA,aAAa,CAACE,IAAd,CAAoBpC,KAApB;AACA;AACD;;AACD,MAAKkC,aAAa,CAACtB,MAAnB,EAA4B;AAC3B,WAAO;AACNvD,MAAAA,IAAI,EAAE,eADA;AAEND,MAAAA,MAAM,EAAE8E,aAFF;AAGNvB,MAAAA,KAHM;AAIND,MAAAA,YAJM;AAKNI,MAAAA,IAAI,EAAEC,IAAI,CAACC,GAAL,EALA;AAMNc,MAAAA,eANM;AAON/D,MAAAA,eAAe,EAAE+D,eAAe,GAAG/D,eAAH,GAAqB,IAP/C;AAQN0C,MAAAA;AARM,KAAP;AAUA;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAAS4B,kBAAT,CACN3B,YADM,EAENC,KAFM,EAGN2B,iBAAiB,GAAG,EAHd,EAIL;AACD,QAAM;AAAEC,IAAAA;AAAF,MAA6BD,iBAAnC;AACA,SAAO;AACNjF,IAAAA,IAAI,EAAE,sBADA;AAENqD,IAAAA,YAFM;AAGNC,IAAAA,KAHM;AAIN4B,IAAAA;AAJM,GAAP;AAMA;AAED;AACA;AACA;AACA;AACA;;;AACO,SAASC,kBAAT,GAA8B;AACpC,SAAO;AACNnF,IAAAA,IAAI,EAAE;AADA,GAAP;AAGA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASM,mBAAT,CAA8BwE,OAA9B,EAAwC;AAC9C,SAAO;AACN9E,IAAAA,IAAI,EAAE,uBADA;AAEN8E,IAAAA;AAFM,GAAP;AAIA;AAED;AACA;AACA;AACA;AACA;;;AACO,UAAUM,mBAAV,GAAgC;AACtC,QAAM;AACLpF,IAAAA,IAAI,EAAE;AADD,GAAN;AAGA,QAAMD,MAAM,GAAG,MAAMN,eAASC,MAAT,CAAiBC,qBAAjB,EAAuC,WAAvC,CAArB;AACA,QAAMO,QAAQ,GAAG,MAAMT,eAASC,MAAT,CACtBC,qBADsB,EAEtB,aAFsB,CAAvB;AAIA,QAAM0F,gBAAgB,GAAG,2CAA+BtF,MAA/B,EAAuCG,QAAvC,CAAzB;AAEA,SAAO,MAAMJ,WAAW,CAAEuF,gBAAF,CAAxB;AACA;AAED;AACA;AACA;AACA;AACA;AACA;;;AACO,UAAUC,WAAV,CAAuBC,kBAAvB,EAA2CC,mBAA3C,EAAiE;AACvE,QAAMzF,MAAM,GAAG,CAAEwF,kBAAF,EAAsBC,mBAAtB,CAAf;AACA,QAAM;AACLxF,IAAAA,IAAI,EAAE,cADD;AAELD,IAAAA;AAFK,GAAN;AAKA,QAAM,CAAE0F,SAAF,EAAaC,SAAb,IAA2B3F,MAAjC;AACA,QAAM4F,MAAM,GAAG,MAAMlG,eAASC,MAAT,CACpBC,qBADoB,EAEpB,UAFoB,EAGpB8F,SAHoB,CAArB;AAKA,QAAMG,UAAU,GAAG,0BAAcD,MAAM,CAAC9C,IAArB,CAAnB,CAbuE,CAevE;;AACA,MAAK+C,UAAU,IAAI,CAAEA,UAAU,CAACC,KAAhC,EAAwC;AACvC,UAAMxE,WAAW,CAAEsE,MAAM,CAACxE,QAAT,CAAjB;AACA;AACA;;AAED,QAAM2E,MAAM,GAAG,MAAMrG,eAASC,MAAT,CACpBC,qBADoB,EAEpB,UAFoB,EAGpB+F,SAHoB,CAArB;AAKA,QAAMK,UAAU,GAAG,0BAAcD,MAAM,CAACjD,IAArB,CAAnB;AACA,QAAM;AAAE1B,IAAAA,QAAF;AAAY6E,IAAAA,YAAZ;AAA0BC,IAAAA;AAA1B,MAAqC,MAAMxG,eAASC,MAAT,CAChDC,qBADgD,EAEhD,mBAFgD,CAAjD;AAIA,QAAMuG,iBAAiB,GAAG/E,QAAQ,KAAKsE,SAAb,GAAyBG,UAAzB,GAAsCG,UAAhE;AACA,QAAMI,mBAAmB,GAAGD,iBAAiB,CAAClF,UAAlB,CAA8BgF,YAA9B,CAA5B;AACA,QAAMI,uBAAuB,GAC5B,CAAEjF,QAAQ,KAAKsE,SAAb,IAA0BtE,QAAQ,KAAKuE,SAAzC,KACAM,YAAY,KAAKK,SADjB,IAEAJ,MAAM,KAAKI,SAFX,IAGA;AACA;AACA;AACA;AACA,GAAC,CAAEF,mBARJ;;AAUA,MAAK,CAAEA,mBAAP,EAA6B;AAC5B,QAAK,OAAOH,YAAP,KAAwB,QAA7B,EAAwC;AACvCM,MAAAA,MAAM,CAACC,OAAP,CAAeC,KAAf,CACE,gJAAgJ,OAAOR,YAAc,EADvK;AAGA,KAJD,MAIO;AACNM,MAAAA,MAAM,CAACC,OAAP,CAAeC,KAAf,CACC,kFADD;AAGA;AACD,GArDsE,CAuDvE;AACA;;;AACA,QAAMC,sBAAsB,GAAG,QAA/B,CAzDuE,CA2DvE;;AACA,QAAMC,MAAM,GAAG,wBAAYf,MAAZ,CAAf;AACA,QAAMgB,MAAM,GAAG,wBAAYb,MAAZ,CAAf;;AAEA,MAAKM,uBAAL,EAA+B;AAC9B,UAAMQ,aAAa,GAAGzF,QAAQ,KAAKsE,SAAb,GAAyBiB,MAAzB,GAAkCC,MAAxD;AACA,UAAME,IAAI,GAAGD,aAAa,CAAC5F,UAAd,CAA0BgF,YAA1B,CAAb;AACA,UAAM;AACLc,MAAAA,SAAS,EAAEC,YADN;AAELC,MAAAA,8BAA8B,EAAEC,oBAF3B;AAGLC,MAAAA,4BAA4B,EAAEC;AAHzB,QAIFhB,mBAJJ;AAKA,UAAM1D,KAAK,GAAG,sBACb,sBAAQ;AACPoE,MAAAA,IADO;AAEPE,MAAAA,YAFO;AAGPE,MAAAA,oBAHO;AAIPE,MAAAA;AAJO,KAAR,CADa,EAObV,sBAPa,EAQbR,MARa,EASbA,MATa,CAAd;AAYAW,IAAAA,aAAa,CAAC5F,UAAd,CAA0BgF,YAA1B,IAA2C,4BAAc;AACxDvD,MAAAA,KADwD;AAExDsE,MAAAA,YAFwD;AAGxDI,MAAAA;AAHwD,KAAd,CAA3C;AAKA,GAxFsE,CA0FvE;AACA;;;AACA,QAAMC,qBAAqB,GAC1BzB,MAAM,CAAC9C,IAAP,KAAgBiD,MAAM,CAACjD,IAAvB,GACG,CAAE8D,MAAF,CADH,GAEG,+BAAmBA,MAAnB,EAA2BhB,MAAM,CAAC9C,IAAlC,CAHJ,CA5FuE,CAiGvE;;AACA,MAAK,CAAEuE,qBAAF,IAA2B,CAAEA,qBAAqB,CAAC7D,MAAxD,EAAiE;AAChE;AACA,GApGsE,CAsGvE;;;AACA,QAAM8D,iBAAiB,GAAGzB,UAAU,CAACC,KAAX,CACzBa,MAAM,CAAC1F,UADkB,EAEzBoG,qBAAqB,CAAE,CAAF,CAArB,CAA2BpG,UAFF,CAA1B;;AAKA,MAAKoF,uBAAL,EAA+B;AAC9B,UAAMkB,eAAe,GAAG,qBACvBD,iBADuB,EAErBE,CAAF,IACC,OAAOA,CAAP,KAAa,QAAb,IACAA,CAAC,CAACC,OAAF,CAAWf,sBAAX,MAAwC,CAAC,CAJnB,CAAxB;AAMA,UAAMgB,aAAa,GAAGJ,iBAAiB,CAAEC,eAAF,CAAvC;AACA,UAAM;AACLR,MAAAA,SAAS,EAAEC,YADN;AAELC,MAAAA,8BAA8B,EAAEC,oBAF3B;AAGLC,MAAAA,4BAA4B,EAAEC;AAHzB,QAIFvB,UAAU,CAAC5E,UAAX,CAAuBsG,eAAvB,CAJJ;AAKA,UAAMI,cAAc,GAAG,sBAAQ;AAC9Bb,MAAAA,IAAI,EAAEY,aADwB;AAE9BV,MAAAA,YAF8B;AAG9BE,MAAAA,oBAH8B;AAI9BE,MAAAA;AAJ8B,KAAR,CAAvB;AAMA,UAAMQ,SAAS,GAAGD,cAAc,CAACE,IAAf,CAAoBJ,OAApB,CAA6Bf,sBAA7B,CAAlB;AACA,UAAMoB,QAAQ,GAAG,sBAAQH,cAAR,EAAwBC,SAAxB,EAAmCA,SAAS,GAAG,CAA/C,CAAjB;AACA,UAAMG,OAAO,GAAG,4BAAc;AAC7BrF,MAAAA,KAAK,EAAEoF,QADsB;AAE7Bd,MAAAA,YAF6B;AAG7BI,MAAAA;AAH6B,KAAd,CAAhB;AAMAE,IAAAA,iBAAiB,CAAEC,eAAF,CAAjB,GAAuCQ,OAAvC;AAEA,UAAMC,eAAe,CACpBpC,MAAM,CAACxE,QADa,EAEpBmG,eAFoB,EAGpBK,SAHoB,EAIpBA,SAJoB,CAArB;AAMA;;AAED,SAAOzE,aAAa,CACnB,CAAEyC,MAAM,CAACxE,QAAT,EAAmB2E,MAAM,CAAC3E,QAA1B,CADmB,EAEnB,CACC,EACC,GAAGwE,MADJ;AAEC3E,IAAAA,UAAU,EAAE,EACX,GAAG2E,MAAM,CAAC3E,UADC;AAEX,SAAGqG;AAFQ;AAFb,GADD,EAQC,GAAGD,qBAAqB,CAACY,KAAtB,CAA6B,CAA7B,CARJ,CAFmB,EAYnB,CAZmB,CAYjB;AAZiB,GAApB;AAcA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,UAAUC,YAAV,CAAwBlH,SAAxB,EAAmCmH,cAAc,GAAG,IAApD,EAA2D;AACjE,MAAK,CAAEnH,SAAF,IAAe,CAAEA,SAAS,CAACwC,MAAhC,EAAyC;AACxC;AACA;;AAEDxC,EAAAA,SAAS,GAAG,uBAAWA,SAAX,CAAZ;AACA,QAAMsC,YAAY,GAAG,MAAM5D,eAASC,MAAT,CAC1BC,qBAD0B,EAE1B,sBAF0B,EAG1BoB,SAAS,CAAE,CAAF,CAHiB,CAA3B;AAKA,QAAMqD,eAAe,GAAG,MAAM3E,eAASC,MAAT,CAC7BC,qBAD6B,EAE7B,iBAF6B,EAG7BoB,SAH6B,EAI7BsC,YAJ6B,CAA9B;;AAOA,MAAK,CAAEe,eAAP,EAAyB;AACxB;AACA;;AAED,MAAI+D,eAAJ;;AACA,MAAKD,cAAL,EAAsB;AACrBC,IAAAA,eAAe,GAAG,MAAM7G,mBAAmB,CAAEP,SAAS,CAAE,CAAF,CAAX,CAA3C;AACA,GAFD,MAEO;AACNoH,IAAAA,eAAe,GAAG,MAAM1I,eAASC,MAAT,CACvBC,qBADuB,EAEvB,0BAFuB,EAGvBoB,SAAS,CAAE,CAAF,CAHc,CAAxB;AAKA;;AAED,QAAM;AACLf,IAAAA,IAAI,EAAE,eADD;AAELe,IAAAA;AAFK,GAAN,CAjCiE,CAsCjE;AACA;;AACA,QAAMqH,cAAc,GAAG,OAAO7I,kBAAkB,EAAhD;AACA,SAAO,CAAE4I,eAAe,IAAIC,cAArB,CAAP;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASC,WAAT,CAAsBlH,QAAtB,EAAgC+G,cAAhC,EAAiD;AACvD,SAAOD,YAAY,CAAE,CAAE9G,QAAF,CAAF,EAAgB+G,cAAhB,CAAnB;AACA;AAED;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASI,kBAAT,CACNjF,YADM,EAENtD,MAFM,EAGN0E,eAAe,GAAG,KAHZ,EAIN/D,eAAe,GAAG,CAJZ,EAKL;AACD;AACA,SAAO;AACNV,IAAAA,IAAI,EAAE,sBADA;AAENqD,IAAAA,YAFM;AAGNtD,IAAAA,MAHM;AAIN0E,IAAAA,eAJM;AAKN/D,IAAAA,eAAe,EAAE+D,eAAe,GAAG/D,eAAH,GAAqB,IAL/C;AAMN+C,IAAAA,IAAI,EAAEC,IAAI,CAACC,GAAL;AANA,GAAP;AAQA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAAS4E,eAAT,CAA0BpH,QAA1B,EAAqC;AAC3C,SAAO;AACNnB,IAAAA,IAAI,EAAE,mBADA;AAENmB,IAAAA;AAFM,GAAP;AAIA;AAED;AACA;AACA;AACA;AACA;;;AACO,SAASqH,WAAT,GAAuB;AAC7B,SAAO;AACNxI,IAAAA,IAAI,EAAE;AADA,GAAP;AAGA;AAED;AACA;AACA;AACA;AACA;;;AACO,SAASyI,UAAT,GAAsB;AAC5B,SAAO;AACNzI,IAAAA,IAAI,EAAE;AADA,GAAP;AAGA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAAS0I,mBAAT,CAA8B3H,SAAS,GAAG,EAA1C,EAA+C;AACrD,SAAO;AACNf,IAAAA,IAAI,EAAE,uBADA;AAENe,IAAAA;AAFM,GAAP;AAIA;AAED;AACA;AACA;AACA;AACA;;;AACO,SAAS4H,kBAAT,GAA8B;AACpC,SAAO;AACN3I,IAAAA,IAAI,EAAE;AADA,GAAP;AAGA;AAED;AACA;AACA;AACA;AACA;;;AACO,SAAS4I,kBAAT,GAA8B;AACpC,SAAO;AACN5I,IAAAA,IAAI,EAAE;AADA,GAAP;AAGA;AAED;AACA;AACA;AACA;AACA;;;AACO,SAAS6I,iBAAT,GAA6B;AACnC,SAAO;AACN7I,IAAAA,IAAI,EAAE;AADA,GAAP;AAGA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAAS+H,eAAT,CACN5G,QADM,EAEN6E,YAFM,EAGN8C,WAHM,EAINC,SAJM,EAKL;AACD,SAAO;AACN/I,IAAAA,IAAI,EAAE,kBADA;AAENmB,IAAAA,QAFM;AAGN6E,IAAAA,YAHM;AAIN8C,IAAAA,WAJM;AAKNC,IAAAA;AALM,GAAP;AAOA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASlJ,kBAAT,CAA6BmB,UAA7B,EAAyCqC,YAAzC,EAAuDC,KAAvD,EAA+D;AACrE;AACA,QAAM0F,gBAAgB,GAAG,kCAAzB;;AACA,MAAK,CAAEA,gBAAP,EAA0B;AACzB;AACA;;AAED,QAAMrG,KAAK,GAAG,yBAAaqG,gBAAb,EAA+BhI,UAA/B,CAAd;AAEA,SAAOwD,WAAW,CAAE7B,KAAF,EAASW,KAAT,EAAgBD,YAAhB,CAAlB;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAAS4F,uBAAT,CAAkC9H,QAAlC,EAA4C+H,QAA5C,EAAuD;AAC7D,SAAO;AACNlJ,IAAAA,IAAI,EAAE,4BADA;AAENmB,IAAAA,QAFM;AAGN+H,IAAAA;AAHM,GAAP;AAKA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASC,cAAT,CAAyBD,QAAzB,EAAoC;AAC1C,SAAO;AACNlJ,IAAAA,IAAI,EAAE,iBADA;AAENkJ,IAAAA;AAFM,GAAP;AAIA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASE,2BAAT,CAAsCC,EAAtC,EAA0CC,SAA1C,EAAsD;AAC5D,SAAO;AACNtJ,IAAAA,IAAI,EAAE,6BADA;AAENqJ,IAAAA,EAFM;AAGNC,IAAAA;AAHM,GAAP;AAKA;AAED;AACA;AACA;AACA;AACA;;;AACO,SAASC,oCAAT,GAAgD;AACtD,SAAO;AAAEvJ,IAAAA,IAAI,EAAE;AAAR,GAAP;AACA;AAED;AACA;AACA;AACA;AACA;;;AACO,SAASwJ,uCAAT,GAAmD;AACzD,SAAO;AAAExJ,IAAAA,IAAI,EAAE;AAAR,GAAP;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,UAAUyJ,6BAAV,GAA0C;AAChD,QAAM;AAAEzJ,IAAAA,IAAI,EAAE;AAAR,GAAN;AACA,QAAM,0DAAN;AACA;;AAEM,SAAS0J,kCAAT,GAA8C;AACpD,SAAO;AACN1J,IAAAA,IAAI,EAAE;AADA,GAAP;AAGA;AAED;AACA;AACA;AACA;AACA;;;AACO,UAAU2J,iBAAV,CAA6BC,gBAAgB,GAAG,IAAhD,EAAuD;AAC7D,QAAM;AACL5J,IAAAA,IAAI,EAAE,qBADD;AAEL4J,IAAAA;AAFK,GAAN;;AAKA,MAAKA,gBAAL,EAAwB;AACvB,qBACC,cACC,yNADD,CADD;AAKA,GAND,MAMO;AACN,qBACC,cACC,iFADD,CADD;AAKA;AACD;AAED;AACA;AACA;AACA;AACA;;;AACO,UAAUC,sBAAV,CAAkCC,sBAAsB,GAAG,IAA3D,EAAkE;AACxE,QAAM;AACL9J,IAAAA,IAAI,EAAE,uBADD;AAEL8J,IAAAA;AAFK,GAAN;;AAKA,MAAKA,sBAAL,EAA8B;AAC7B,qBACC,cACC,8LADD,CADD;AAKA;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACO,UAAUC,eAAV,CAA2BhJ,SAA3B,EAAsC0D,eAAe,GAAG,IAAxD,EAA+D;AACrE,MAAK,CAAE1D,SAAF,IAAe,CAAEA,SAAS,CAACwC,MAAhC,EAAyC;AACxC;AACA;;AACD,QAAMxD,MAAM,GAAG,MAAMN,eAASC,MAAT,CACpBC,qBADoB,EAEpB,qBAFoB,EAGpBoB,SAHoB,CAArB;AAKA,QAAMsC,YAAY,GAAG,MAAM5D,eAASC,MAAT,CAC1BC,qBAD0B,EAE1B,sBAF0B,EAG1BoB,SAAS,CAAE,CAAF,CAHiB,CAA3B,CATqE,CAcrE;;AACA,MAAK,kBAAMhB,MAAN,EAAgB4C,KAAF,IAAa,CAAEA,KAA7B,CAAL,EAA4C;AAC3C;AACA;;AACD,QAAMqH,UAAU,GAAGjK,MAAM,CAAC2C,GAAP,CAAcC,KAAF,IAAaA,KAAK,CAACE,IAA/B,CAAnB,CAlBqE,CAmBrE;;AACA,MACC,kBACCmH,UADD,EAEGpH,SAAF,IAAiB,CAAE,6BAAiBA,SAAjB,EAA4B,UAA5B,EAAwC,IAAxC,CAFpB,CADD,EAKE;AACD;AACA;;AAED,QAAMqH,iBAAiB,GAAG,MAAMxK,eAASC,MAAT,CAC/BC,qBAD+B,EAE/B,eAF+B,EAG/B,kBAAM,uBAAWoB,SAAX,CAAN,CAH+B,EAI/BsC,YAJ+B,CAAhC;AAMA,QAAM6G,YAAY,GAAGnK,MAAM,CAAC2C,GAAP,CAAcC,KAAF,IAChC,+CAAmCA,KAAnC,CADoB,CAArB;AAGA,QAAM+B,YAAY,CACjBwF,YADiB,EAEjBD,iBAAiB,GAAG,CAFH,EAGjB5G,YAHiB,EAIjBoB,eAJiB,CAAlB;;AAMA,MAAKyF,YAAY,CAAC3G,MAAb,GAAsB,CAAtB,IAA2BkB,eAAhC,EAAkD;AACjD,UAAM7C,WAAW,CAChB,mBAAOsI,YAAP,EAAsB/I,QADN,EAEhB,kBAAM+I,YAAN,EAAqB/I,QAFL,CAAjB;AAIA;;AACD,SAAO+I,YAAY,CAACxH,GAAb,CAAoBC,KAAF,IAAaA,KAAK,CAACxB,QAArC,CAAP;AACA;AAED;AACA;AACA;AACA;AACA;;;AACO,UAAUgJ,iBAAV,CAA6BhJ,QAA7B,EAAwC;AAC9C,MAAK,CAAEA,QAAP,EAAkB;AACjB;AACA;;AACD,QAAMkC,YAAY,GAAG,MAAM5D,eAASC,MAAT,CAC1BC,qBAD0B,EAE1B,sBAF0B,EAG1BwB,QAH0B,CAA3B;AAKA,QAAMiJ,QAAQ,GAAG,MAAM3K,eAASC,MAAT,CACtBC,qBADsB,EAEtB,iBAFsB,EAGtB0D,YAHsB,CAAvB;;AAKA,MAAK+G,QAAL,EAAgB;AACf;AACA;;AAED,QAAMC,kBAAkB,GAAG,MAAM5K,eAASC,MAAT,CAChCC,qBADgC,EAEhC,eAFgC,EAGhCwB,QAHgC,EAIhCkC,YAJgC,CAAjC;AAMA,SAAO,MAAMxD,kBAAkB,CAAE,EAAF,EAAMwD,YAAN,EAAoBgH,kBAApB,CAA/B;AACA;AAED;AACA;AACA;AACA;AACA;;;AACO,UAAUC,gBAAV,CAA4BnJ,QAA5B,EAAuC;AAC7C,MAAK,CAAEA,QAAP,EAAkB;AACjB;AACA;;AACD,QAAMkC,YAAY,GAAG,MAAM5D,eAASC,MAAT,CAC1BC,qBAD0B,EAE1B,sBAF0B,EAG1BwB,QAH0B,CAA3B;AAKA,QAAMiJ,QAAQ,GAAG,MAAM3K,eAASC,MAAT,CACtBC,qBADsB,EAEtB,iBAFsB,EAGtB0D,YAHsB,CAAvB;;AAKA,MAAK+G,QAAL,EAAgB;AACf;AACA;;AAED,QAAMC,kBAAkB,GAAG,MAAM5K,eAASC,MAAT,CAChCC,qBADgC,EAEhC,eAFgC,EAGhCwB,QAHgC,EAIhCkC,YAJgC,CAAjC;AAMA,SAAO,MAAMxD,kBAAkB,CAAE,EAAF,EAAMwD,YAAN,EAAoBgH,kBAAkB,GAAG,CAAzC,CAA/B;AACA;AAED;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASE,oBAAT,CAA+BpJ,QAA/B,EAAyCqJ,aAAzC,EAAyD;AAC/D,SAAO;AACNxK,IAAAA,IAAI,EAAE,wBADA;AAENmB,IAAAA,QAFM;AAGNqJ,IAAAA;AAHM,GAAP;AAKA;AAED;AACA;AACA;AACA;AACA;AACA;;;AACO,UAAUC,UAAV,CAAsBtJ,QAAtB,EAAiC;AACvC,QAAMoJ,oBAAoB,CAAEpJ,QAAF,EAAY,IAAZ,CAA1B;AACA,QAAM;AACLnB,IAAAA,IAAI,EAAE,OADD;AAEL0K,IAAAA,QAAQ,EAAE;AAFL,GAAN;AAIA,QAAMH,oBAAoB,CAAEpJ,QAAF,EAAY,KAAZ,CAA1B;AACA;AAED;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASwJ,2BAAT,CACNxJ,QADM,EAENyJ,wBAFM,EAGL;AACD,SAAO;AACN5K,IAAAA,IAAI,EAAE,iCADA;AAEN4K,IAAAA,wBAFM;AAGNzJ,IAAAA;AAHM,GAAP;AAKA","sourcesContent":["/**\n * External dependencies\n */\nimport { castArray, findKey, first, isObject, last, some } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport {\n\tcloneBlock,\n\t__experimentalCloneSanitizedBlock,\n\tcreateBlock,\n\tdoBlocksMatchTemplate,\n\tgetBlockType,\n\tgetDefaultBlockName,\n\thasBlockSupport,\n\tswitchToBlockType,\n\tsynchronizeBlocksWithTemplate,\n} from '@wordpress/blocks';\nimport { speak } from '@wordpress/a11y';\nimport { __, _n, sprintf } from '@wordpress/i18n';\nimport { controls } from '@wordpress/data';\nimport { create, insert, remove, toHTMLString } from '@wordpress/rich-text';\nimport deprecated from '@wordpress/deprecated';\n\n/**\n * Internal dependencies\n */\nimport { __unstableMarkAutomaticChangeFinalControl } from '../store/controls';\nimport { STORE_NAME as blockEditorStoreName } from './constants';\n\n/**\n * Generator which will yield a default block insert action if there\n * are no other blocks at the root of the editor. This generator should be used\n * in actions which may result in no blocks remaining in the editor (removal,\n * replacement, etc).\n */\nfunction* ensureDefaultBlock() {\n\tconst count = yield controls.select(\n\t\tblockEditorStoreName,\n\t\t'getBlockCount'\n\t);\n\n\t// To avoid a focus loss when removing the last block, assure there is\n\t// always a default block if the last of the blocks have been removed.\n\tif ( count === 0 ) {\n\t\tconst { __unstableHasCustomAppender } = yield controls.select(\n\t\t\tblockEditorStoreName,\n\t\t\t'getSettings'\n\t\t);\n\n\t\t// If there's an custom appender, don't insert default block.\n\t\t// We have to remember to manually move the focus elsewhere to\n\t\t// prevent it from being lost though.\n\t\tif ( __unstableHasCustomAppender ) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn yield insertDefaultBlock();\n\t}\n}\n\n/**\n * Returns an action object used in signalling that blocks state should be\n * reset to the specified array of blocks, taking precedence over any other\n * content reflected as an edit in state.\n *\n * @param {Array} blocks Array of blocks.\n */\nexport function* resetBlocks( blocks ) {\n\tyield {\n\t\ttype: 'RESET_BLOCKS',\n\t\tblocks,\n\t};\n\treturn yield* validateBlocksToTemplate( blocks );\n}\n\n/**\n * Block validity is a function of blocks state (at the point of a\n * reset) and the template setting. As a compromise to its placement\n * across distinct parts of state, it is implemented here as a side-\n * effect of the block reset action.\n *\n * @param {Array} blocks Array of blocks.\n */\nexport function* validateBlocksToTemplate( blocks ) {\n\tconst template = yield controls.select(\n\t\tblockEditorStoreName,\n\t\t'getTemplate'\n\t);\n\tconst templateLock = yield controls.select(\n\t\tblockEditorStoreName,\n\t\t'getTemplateLock'\n\t);\n\n\t// Unlocked templates are considered always valid because they act\n\t// as default values only.\n\tconst isBlocksValidToTemplate =\n\t\t! template ||\n\t\ttemplateLock !== 'all' ||\n\t\tdoBlocksMatchTemplate( blocks, template );\n\n\t// Update if validity has changed.\n\tconst isValidTemplate = yield controls.select(\n\t\tblockEditorStoreName,\n\t\t'isValidTemplate'\n\t);\n\n\tif ( isBlocksValidToTemplate !== isValidTemplate ) {\n\t\tyield setTemplateValidity( isBlocksValidToTemplate );\n\t\treturn isBlocksValidToTemplate;\n\t}\n}\n\n/**\n * A block selection object.\n *\n * @typedef {Object} WPBlockSelection\n *\n * @property {string} clientId     A block client ID.\n * @property {string} attributeKey A block attribute key.\n * @property {number} offset       An attribute value offset, based on the rich\n *                                 text value. See `wp.richText.create`.\n */\n\n/* eslint-disable jsdoc/valid-types */\n/**\n * Returns an action object used in signalling that selection state should be\n * reset to the specified selection.\n *\n * @param {WPBlockSelection} selectionStart  The selection start.\n * @param {WPBlockSelection} selectionEnd    The selection end.\n * @param {0|-1|null}        initialPosition Initial block position.\n *\n * @return {Object} Action object.\n */\nexport function resetSelection(\n\tselectionStart,\n\tselectionEnd,\n\tinitialPosition\n) {\n\t/* eslint-enable jsdoc/valid-types */\n\treturn {\n\t\ttype: 'RESET_SELECTION',\n\t\tselectionStart,\n\t\tselectionEnd,\n\t\tinitialPosition,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that blocks have been received.\n * Unlike resetBlocks, these should be appended to the existing known set, not\n * replacing.\n *\n * @deprecated\n *\n * @param {Object[]} blocks Array of block objects.\n *\n * @return {Object} Action object.\n */\nexport function receiveBlocks( blocks ) {\n\tdeprecated( 'wp.data.dispatch( \"core/block-editor\" ).receiveBlocks', {\n\t\tsince: '5.9',\n\t\talternative: 'resetBlocks or insertBlocks',\n\t} );\n\n\treturn {\n\t\ttype: 'RECEIVE_BLOCKS',\n\t\tblocks,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the multiple blocks'\n * attributes with the specified client IDs have been updated.\n *\n * @param {string|string[]} clientIds     Block client IDs.\n * @param {Object}          attributes    Block attributes to be merged. Should be keyed by clientIds if\n *                                        uniqueByBlock is true.\n * @param {boolean}         uniqueByBlock true if each block in clientIds array has a unique set of attributes\n * @return {Object} Action object.\n */\nexport function updateBlockAttributes(\n\tclientIds,\n\tattributes,\n\tuniqueByBlock = false\n) {\n\treturn {\n\t\ttype: 'UPDATE_BLOCK_ATTRIBUTES',\n\t\tclientIds: castArray( clientIds ),\n\t\tattributes,\n\t\tuniqueByBlock,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the block with the\n * specified client ID has been updated.\n *\n * @param {string} clientId Block client ID.\n * @param {Object} updates  Block attributes to be merged.\n *\n * @return {Object} Action object.\n */\nexport function updateBlock( clientId, updates ) {\n\treturn {\n\t\ttype: 'UPDATE_BLOCK',\n\t\tclientId,\n\t\tupdates,\n\t};\n}\n\n/* eslint-disable jsdoc/valid-types */\n/**\n * Returns an action object used in signalling that the block with the\n * specified client ID has been selected, optionally accepting a position\n * value reflecting its selection directionality. An initialPosition of -1\n * reflects a reverse selection.\n *\n * @param {string}    clientId        Block client ID.\n * @param {0|-1|null} initialPosition Optional initial position. Pass as -1 to\n *                                    reflect reverse selection.\n *\n * @return {Object} Action object.\n */\nexport function selectBlock( clientId, initialPosition = 0 ) {\n\t/* eslint-enable jsdoc/valid-types */\n\treturn {\n\t\ttype: 'SELECT_BLOCK',\n\t\tinitialPosition,\n\t\tclientId,\n\t};\n}\n\n/**\n * Yields action objects used in signalling that the block preceding the given\n * clientId should be selected.\n *\n * @param {string} clientId Block client ID.\n */\nexport function* selectPreviousBlock( clientId ) {\n\tconst previousBlockClientId = yield controls.select(\n\t\tblockEditorStoreName,\n\t\t'getPreviousBlockClientId',\n\t\tclientId\n\t);\n\n\tif ( previousBlockClientId ) {\n\t\tyield selectBlock( previousBlockClientId, -1 );\n\t\treturn [ previousBlockClientId ];\n\t}\n}\n\n/**\n * Yields action objects used in signalling that the block following the given\n * clientId should be selected.\n *\n * @param {string} clientId Block client ID.\n */\nexport function* selectNextBlock( clientId ) {\n\tconst nextBlockClientId = yield controls.select(\n\t\tblockEditorStoreName,\n\t\t'getNextBlockClientId',\n\t\tclientId\n\t);\n\n\tif ( nextBlockClientId ) {\n\t\tyield selectBlock( nextBlockClientId );\n\t\treturn [ nextBlockClientId ];\n\t}\n}\n\n/**\n * Returns an action object used in signalling that a block multi-selection has started.\n *\n * @return {Object} Action object.\n */\nexport function startMultiSelect() {\n\treturn {\n\t\ttype: 'START_MULTI_SELECT',\n\t};\n}\n\n/**\n * Returns an action object used in signalling that block multi-selection stopped.\n *\n * @return {Object} Action object.\n */\nexport function stopMultiSelect() {\n\treturn {\n\t\ttype: 'STOP_MULTI_SELECT',\n\t};\n}\n\n/**\n * Returns an action object used in signalling that block multi-selection changed.\n *\n * @param {string} start First block of the multi selection.\n * @param {string} end   Last block of the multiselection.\n */\nexport function* multiSelect( start, end ) {\n\tconst startBlockRootClientId = yield controls.select(\n\t\tblockEditorStoreName,\n\t\t'getBlockRootClientId',\n\t\tstart\n\t);\n\tconst endBlockRootClientId = yield controls.select(\n\t\tblockEditorStoreName,\n\t\t'getBlockRootClientId',\n\t\tend\n\t);\n\n\t// Only allow block multi-selections at the same level.\n\tif ( startBlockRootClientId !== endBlockRootClientId ) {\n\t\treturn;\n\t}\n\n\tyield {\n\t\ttype: 'MULTI_SELECT',\n\t\tstart,\n\t\tend,\n\t};\n\n\tconst blockCount = yield controls.select(\n\t\tblockEditorStoreName,\n\t\t'getSelectedBlockCount'\n\t);\n\n\tspeak(\n\t\tsprintf(\n\t\t\t/* translators: %s: number of selected blocks */\n\t\t\t_n( '%s block selected.', '%s blocks selected.', blockCount ),\n\t\t\tblockCount\n\t\t),\n\t\t'assertive'\n\t);\n}\n\n/**\n * Returns an action object used in signalling that the block selection is cleared.\n *\n * @return {Object} Action object.\n */\nexport function clearSelectedBlock() {\n\treturn {\n\t\ttype: 'CLEAR_SELECTED_BLOCK',\n\t};\n}\n\n/**\n * Returns an action object that enables or disables block selection.\n *\n * @param {boolean} [isSelectionEnabled=true] Whether block selection should\n *                                            be enabled.\n *\n * @return {Object} Action object.\n */\nexport function toggleSelection( isSelectionEnabled = true ) {\n\treturn {\n\t\ttype: 'TOGGLE_SELECTION',\n\t\tisSelectionEnabled,\n\t};\n}\n\nfunction getBlocksWithDefaultStylesApplied( blocks, blockEditorSettings ) {\n\tconst preferredStyleVariations =\n\t\tblockEditorSettings?.__experimentalPreferredStyleVariations?.value ??\n\t\t{};\n\treturn blocks.map( ( block ) => {\n\t\tconst blockName = block.name;\n\t\tif ( ! hasBlockSupport( blockName, 'defaultStylePicker', true ) ) {\n\t\t\treturn block;\n\t\t}\n\t\tif ( ! preferredStyleVariations[ blockName ] ) {\n\t\t\treturn block;\n\t\t}\n\t\tconst className = block.attributes?.className;\n\t\tif ( className?.includes( 'is-style-' ) ) {\n\t\t\treturn block;\n\t\t}\n\t\tconst { attributes = {} } = block;\n\t\tconst blockStyle = preferredStyleVariations[ blockName ];\n\t\treturn {\n\t\t\t...block,\n\t\t\tattributes: {\n\t\t\t\t...attributes,\n\t\t\t\tclassName: `${\n\t\t\t\t\tclassName || ''\n\t\t\t\t} is-style-${ blockStyle }`.trim(),\n\t\t\t},\n\t\t};\n\t} );\n}\n\n/* eslint-disable jsdoc/valid-types */\n/**\n * Returns an action object signalling that a blocks should be replaced with\n * one or more replacement blocks.\n *\n * @param {(string|string[])} clientIds       Block client ID(s) to replace.\n * @param {(Object|Object[])} blocks          Replacement block(s).\n * @param {number}            indexToSelect   Index of replacement block to select.\n * @param {0|-1|null}         initialPosition Index of caret after in the selected block after the operation.\n * @param {?Object}           meta            Optional Meta values to be passed to the action object.\n *\n * @yield {Object} Action object.\n */\nexport function* replaceBlocks(\n\tclientIds,\n\tblocks,\n\tindexToSelect,\n\tinitialPosition = 0,\n\tmeta\n) {\n\t/* eslint-enable jsdoc/valid-types */\n\tclientIds = castArray( clientIds );\n\tblocks = getBlocksWithDefaultStylesApplied(\n\t\tcastArray( blocks ),\n\t\tyield controls.select( blockEditorStoreName, 'getSettings' )\n\t);\n\tconst rootClientId = yield controls.select(\n\t\tblockEditorStoreName,\n\t\t'getBlockRootClientId',\n\t\tfirst( clientIds )\n\t);\n\t// Replace is valid if the new blocks can be inserted in the root block.\n\tfor ( let index = 0; index < blocks.length; index++ ) {\n\t\tconst block = blocks[ index ];\n\t\tconst canInsertBlock = yield controls.select(\n\t\t\tblockEditorStoreName,\n\t\t\t'canInsertBlockType',\n\t\t\tblock.name,\n\t\t\trootClientId\n\t\t);\n\t\tif ( ! canInsertBlock ) {\n\t\t\treturn;\n\t\t}\n\t}\n\tyield {\n\t\ttype: 'REPLACE_BLOCKS',\n\t\tclientIds,\n\t\tblocks,\n\t\ttime: Date.now(),\n\t\tindexToSelect,\n\t\tinitialPosition,\n\t\tmeta,\n\t};\n\tyield* ensureDefaultBlock();\n}\n\n/**\n * Returns an action object signalling that a single block should be replaced\n * with one or more replacement blocks.\n *\n * @param {(string|string[])} clientId Block client ID to replace.\n * @param {(Object|Object[])} block    Replacement block(s).\n *\n * @return {Object} Action object.\n */\nexport function replaceBlock( clientId, block ) {\n\treturn replaceBlocks( clientId, block );\n}\n\n/**\n * Higher-order action creator which, given the action type to dispatch creates\n * an action creator for managing block movement.\n *\n * @param {string} type Action type to dispatch.\n *\n * @return {Function} Action creator.\n */\nfunction createOnMove( type ) {\n\treturn function* ( clientIds, rootClientId ) {\n\t\tconst canMoveBlocks = yield controls.select(\n\t\t\tblockEditorStoreName,\n\t\t\t'canMoveBlocks',\n\t\t\tclientIds,\n\t\t\trootClientId\n\t\t);\n\n\t\t// If one of the blocks is locked or the parent is locked, we cannot move any block.\n\t\tif ( ! canMoveBlocks ) {\n\t\t\treturn;\n\t\t}\n\n\t\tyield {\n\t\t\tclientIds: castArray( clientIds ),\n\t\t\ttype,\n\t\t\trootClientId,\n\t\t};\n\t};\n}\n\nexport const moveBlocksDown = createOnMove( 'MOVE_BLOCKS_DOWN' );\nexport const moveBlocksUp = createOnMove( 'MOVE_BLOCKS_UP' );\n\n/**\n * Returns an action object signalling that the given blocks should be moved to\n * a new position.\n *\n * @param {?string} clientIds        The client IDs of the blocks.\n * @param {?string} fromRootClientId Root client ID source.\n * @param {?string} toRootClientId   Root client ID destination.\n * @param {number}  index            The index to move the blocks to.\n *\n * @yield {Object} Action object.\n */\nexport function* moveBlocksToPosition(\n\tclientIds,\n\tfromRootClientId = '',\n\ttoRootClientId = '',\n\tindex\n) {\n\tconst canMoveBlocks = yield controls.select(\n\t\tblockEditorStoreName,\n\t\t'canMoveBlocks',\n\t\tclientIds,\n\t\tfromRootClientId\n\t);\n\n\tconst canRemoveBlocks = yield controls.select(\n\t\tblockEditorStoreName,\n\t\t'canRemoveBlocks',\n\t\tclientIds,\n\t\tfromRootClientId\n\t);\n\n\t// If one of the blocks is locked or the parent is locked, we cannot move any block.\n\tif ( ! canMoveBlocks ) {\n\t\treturn;\n\t}\n\n\tconst action = {\n\t\ttype: 'MOVE_BLOCKS_TO_POSITION',\n\t\tfromRootClientId,\n\t\ttoRootClientId,\n\t\tclientIds,\n\t\tindex,\n\t};\n\n\t// If moving inside the same root block the move is always possible.\n\tif ( fromRootClientId === toRootClientId ) {\n\t\tyield action;\n\t\treturn;\n\t}\n\n\t// If we're moving to another block, it means we're deleting blocks from\n\t// the original block, so we need to check if removing is possible.\n\tif ( ! canRemoveBlocks ) {\n\t\treturn;\n\t}\n\n\tconst canInsertBlocks = yield controls.select(\n\t\tblockEditorStoreName,\n\t\t'canInsertBlocks',\n\t\tclientIds,\n\t\ttoRootClientId\n\t);\n\n\t// If moving to other parent block, the move is possible if we can insert a block of the same type inside the new parent block.\n\tif ( canInsertBlocks ) {\n\t\tyield action;\n\t}\n}\n\n/**\n * Returns an action object signalling that the given block should be moved to a\n * new position.\n *\n * @param {?string} clientId         The client ID of the block.\n * @param {?string} fromRootClientId Root client ID source.\n * @param {?string} toRootClientId   Root client ID destination.\n * @param {number}  index            The index to move the block to.\n *\n * @yield {Object} Action object.\n */\nexport function* moveBlockToPosition(\n\tclientId,\n\tfromRootClientId = '',\n\ttoRootClientId = '',\n\tindex\n) {\n\tyield moveBlocksToPosition(\n\t\t[ clientId ],\n\t\tfromRootClientId,\n\t\ttoRootClientId,\n\t\tindex\n\t);\n}\n\n/**\n * Returns an action object used in signalling that a single block should be\n * inserted, optionally at a specific index respective a root block list.\n *\n * @param {Object}   block           Block object to insert.\n * @param {?number}  index           Index at which block should be inserted.\n * @param {?string}  rootClientId    Optional root client ID of block list on which to insert.\n * @param {?boolean} updateSelection If true block selection will be updated. If false, block selection will not change. Defaults to true.\n * @param {?Object}  meta            Optional Meta values to be passed to the action object.\n *\n * @return {Object} Action object.\n */\nexport function insertBlock(\n\tblock,\n\tindex,\n\trootClientId,\n\tupdateSelection = true,\n\tmeta\n) {\n\treturn insertBlocks(\n\t\t[ block ],\n\t\tindex,\n\t\trootClientId,\n\t\tupdateSelection,\n\t\t0,\n\t\tmeta\n\t);\n}\n\n/* eslint-disable jsdoc/valid-types */\n/**\n * Returns an action object used in signalling that an array of blocks should\n * be inserted, optionally at a specific index respective a root block list.\n *\n * @param {Object[]}  blocks          Block objects to insert.\n * @param {?number}   index           Index at which block should be inserted.\n * @param {?string}   rootClientId    Optional root client ID of block list on which to insert.\n * @param {?boolean}  updateSelection If true block selection will be updated.  If false, block selection will not change. Defaults to true.\n * @param {0|-1|null} initialPosition Initial focus position. Setting it to null prevent focusing the inserted block.\n * @param {?Object}   meta            Optional Meta values to be passed to the action object.\n * @return {Object} Action object.\n */\nexport function* insertBlocks(\n\tblocks,\n\tindex,\n\trootClientId,\n\tupdateSelection = true,\n\tinitialPosition = 0,\n\tmeta\n) {\n\t/* eslint-enable jsdoc/valid-types */\n\tif ( isObject( initialPosition ) ) {\n\t\tmeta = initialPosition;\n\t\tinitialPosition = 0;\n\t\tdeprecated( \"meta argument in wp.data.dispatch('core/block-editor')\", {\n\t\t\tsince: '10.1',\n\t\t\tplugin: 'Gutenberg',\n\t\t\thint: 'The meta argument is now the 6th argument of the function',\n\t\t} );\n\t}\n\n\tblocks = getBlocksWithDefaultStylesApplied(\n\t\tcastArray( blocks ),\n\t\tyield controls.select( blockEditorStoreName, 'getSettings' )\n\t);\n\tconst allowedBlocks = [];\n\tfor ( const block of blocks ) {\n\t\tconst isValid = yield controls.select(\n\t\t\tblockEditorStoreName,\n\t\t\t'canInsertBlockType',\n\t\t\tblock.name,\n\t\t\trootClientId\n\t\t);\n\t\tif ( isValid ) {\n\t\t\tallowedBlocks.push( block );\n\t\t}\n\t}\n\tif ( allowedBlocks.length ) {\n\t\treturn {\n\t\t\ttype: 'INSERT_BLOCKS',\n\t\t\tblocks: allowedBlocks,\n\t\t\tindex,\n\t\t\trootClientId,\n\t\t\ttime: Date.now(),\n\t\t\tupdateSelection,\n\t\t\tinitialPosition: updateSelection ? initialPosition : null,\n\t\t\tmeta,\n\t\t};\n\t}\n}\n\n/**\n * Returns an action object used in signalling that the insertion point should\n * be shown.\n *\n * @param {?string} rootClientId      Optional root client ID of block list on\n *                                    which to insert.\n * @param {?number} index             Index at which block should be inserted.\n * @param {Object}  __unstableOptions Wether or not to show an inserter button.\n *\n * @return {Object} Action object.\n */\nexport function showInsertionPoint(\n\trootClientId,\n\tindex,\n\t__unstableOptions = {}\n) {\n\tconst { __unstableWithInserter } = __unstableOptions;\n\treturn {\n\t\ttype: 'SHOW_INSERTION_POINT',\n\t\trootClientId,\n\t\tindex,\n\t\t__unstableWithInserter,\n\t};\n}\n\n/**\n * Returns an action object hiding the insertion point.\n *\n * @return {Object} Action object.\n */\nexport function hideInsertionPoint() {\n\treturn {\n\t\ttype: 'HIDE_INSERTION_POINT',\n\t};\n}\n\n/**\n * Returns an action object resetting the template validity.\n *\n * @param {boolean} isValid template validity flag.\n *\n * @return {Object} Action object.\n */\nexport function setTemplateValidity( isValid ) {\n\treturn {\n\t\ttype: 'SET_TEMPLATE_VALIDITY',\n\t\tisValid,\n\t};\n}\n\n/**\n * Returns an action object synchronize the template with the list of blocks\n *\n * @return {Object} Action object.\n */\nexport function* synchronizeTemplate() {\n\tyield {\n\t\ttype: 'SYNCHRONIZE_TEMPLATE',\n\t};\n\tconst blocks = yield controls.select( blockEditorStoreName, 'getBlocks' );\n\tconst template = yield controls.select(\n\t\tblockEditorStoreName,\n\t\t'getTemplate'\n\t);\n\tconst updatedBlockList = synchronizeBlocksWithTemplate( blocks, template );\n\n\treturn yield resetBlocks( updatedBlockList );\n}\n\n/**\n * Returns an action object used in signalling that two blocks should be merged\n *\n * @param {string} firstBlockClientId  Client ID of the first block to merge.\n * @param {string} secondBlockClientId Client ID of the second block to merge.\n */\nexport function* mergeBlocks( firstBlockClientId, secondBlockClientId ) {\n\tconst blocks = [ firstBlockClientId, secondBlockClientId ];\n\tyield {\n\t\ttype: 'MERGE_BLOCKS',\n\t\tblocks,\n\t};\n\n\tconst [ clientIdA, clientIdB ] = blocks;\n\tconst blockA = yield controls.select(\n\t\tblockEditorStoreName,\n\t\t'getBlock',\n\t\tclientIdA\n\t);\n\tconst blockAType = getBlockType( blockA.name );\n\n\t// Only focus the previous block if it's not mergeable\n\tif ( blockAType && ! blockAType.merge ) {\n\t\tyield selectBlock( blockA.clientId );\n\t\treturn;\n\t}\n\n\tconst blockB = yield controls.select(\n\t\tblockEditorStoreName,\n\t\t'getBlock',\n\t\tclientIdB\n\t);\n\tconst blockBType = getBlockType( blockB.name );\n\tconst { clientId, attributeKey, offset } = yield controls.select(\n\t\tblockEditorStoreName,\n\t\t'getSelectionStart'\n\t);\n\tconst selectedBlockType = clientId === clientIdA ? blockAType : blockBType;\n\tconst attributeDefinition = selectedBlockType.attributes[ attributeKey ];\n\tconst canRestoreTextSelection =\n\t\t( clientId === clientIdA || clientId === clientIdB ) &&\n\t\tattributeKey !== undefined &&\n\t\toffset !== undefined &&\n\t\t// We cannot restore text selection if the RichText identifier\n\t\t// is not a defined block attribute key. This can be the case if the\n\t\t// fallback intance ID is used to store selection (and no RichText\n\t\t// identifier is set), or when the identifier is wrong.\n\t\t!! attributeDefinition;\n\n\tif ( ! attributeDefinition ) {\n\t\tif ( typeof attributeKey === 'number' ) {\n\t\t\twindow.console.error(\n\t\t\t\t`RichText needs an identifier prop that is the block attribute key of the attribute it controls. Its type is expected to be a string, but was ${ typeof attributeKey }`\n\t\t\t);\n\t\t} else {\n\t\t\twindow.console.error(\n\t\t\t\t'The RichText identifier prop does not match any attributes defined by the block.'\n\t\t\t);\n\t\t}\n\t}\n\n\t// A robust way to retain selection position through various transforms\n\t// is to insert a special character at the position and then recover it.\n\tconst START_OF_SELECTED_AREA = '\\u0086';\n\n\t// Clone the blocks so we don't insert the character in a \"live\" block.\n\tconst cloneA = cloneBlock( blockA );\n\tconst cloneB = cloneBlock( blockB );\n\n\tif ( canRestoreTextSelection ) {\n\t\tconst selectedBlock = clientId === clientIdA ? cloneA : cloneB;\n\t\tconst html = selectedBlock.attributes[ attributeKey ];\n\t\tconst {\n\t\t\tmultiline: multilineTag,\n\t\t\t__unstableMultilineWrapperTags: multilineWrapperTags,\n\t\t\t__unstablePreserveWhiteSpace: preserveWhiteSpace,\n\t\t} = attributeDefinition;\n\t\tconst value = insert(\n\t\t\tcreate( {\n\t\t\t\thtml,\n\t\t\t\tmultilineTag,\n\t\t\t\tmultilineWrapperTags,\n\t\t\t\tpreserveWhiteSpace,\n\t\t\t} ),\n\t\t\tSTART_OF_SELECTED_AREA,\n\t\t\toffset,\n\t\t\toffset\n\t\t);\n\n\t\tselectedBlock.attributes[ attributeKey ] = toHTMLString( {\n\t\t\tvalue,\n\t\t\tmultilineTag,\n\t\t\tpreserveWhiteSpace,\n\t\t} );\n\t}\n\n\t// We can only merge blocks with similar types\n\t// thus, we transform the block to merge first\n\tconst blocksWithTheSameType =\n\t\tblockA.name === blockB.name\n\t\t\t? [ cloneB ]\n\t\t\t: switchToBlockType( cloneB, blockA.name );\n\n\t// If the block types can not match, do nothing\n\tif ( ! blocksWithTheSameType || ! blocksWithTheSameType.length ) {\n\t\treturn;\n\t}\n\n\t// Calling the merge to update the attributes and remove the block to be merged\n\tconst updatedAttributes = blockAType.merge(\n\t\tcloneA.attributes,\n\t\tblocksWithTheSameType[ 0 ].attributes\n\t);\n\n\tif ( canRestoreTextSelection ) {\n\t\tconst newAttributeKey = findKey(\n\t\t\tupdatedAttributes,\n\t\t\t( v ) =>\n\t\t\t\ttypeof v === 'string' &&\n\t\t\t\tv.indexOf( START_OF_SELECTED_AREA ) !== -1\n\t\t);\n\t\tconst convertedHtml = updatedAttributes[ newAttributeKey ];\n\t\tconst {\n\t\t\tmultiline: multilineTag,\n\t\t\t__unstableMultilineWrapperTags: multilineWrapperTags,\n\t\t\t__unstablePreserveWhiteSpace: preserveWhiteSpace,\n\t\t} = blockAType.attributes[ newAttributeKey ];\n\t\tconst convertedValue = create( {\n\t\t\thtml: convertedHtml,\n\t\t\tmultilineTag,\n\t\t\tmultilineWrapperTags,\n\t\t\tpreserveWhiteSpace,\n\t\t} );\n\t\tconst newOffset = convertedValue.text.indexOf( START_OF_SELECTED_AREA );\n\t\tconst newValue = remove( convertedValue, newOffset, newOffset + 1 );\n\t\tconst newHtml = toHTMLString( {\n\t\t\tvalue: newValue,\n\t\t\tmultilineTag,\n\t\t\tpreserveWhiteSpace,\n\t\t} );\n\n\t\tupdatedAttributes[ newAttributeKey ] = newHtml;\n\n\t\tyield selectionChange(\n\t\t\tblockA.clientId,\n\t\t\tnewAttributeKey,\n\t\t\tnewOffset,\n\t\t\tnewOffset\n\t\t);\n\t}\n\n\tyield* replaceBlocks(\n\t\t[ blockA.clientId, blockB.clientId ],\n\t\t[\n\t\t\t{\n\t\t\t\t...blockA,\n\t\t\t\tattributes: {\n\t\t\t\t\t...blockA.attributes,\n\t\t\t\t\t...updatedAttributes,\n\t\t\t\t},\n\t\t\t},\n\t\t\t...blocksWithTheSameType.slice( 1 ),\n\t\t],\n\t\t0 // If we don't pass the `indexToSelect` it will default to the last block.\n\t);\n}\n\n/**\n * Yields action objects used in signalling that the blocks corresponding to\n * the set of specified client IDs are to be removed.\n *\n * @param {string|string[]} clientIds      Client IDs of blocks to remove.\n * @param {boolean}         selectPrevious True if the previous block should be\n *                                         selected when a block is removed.\n */\nexport function* removeBlocks( clientIds, selectPrevious = true ) {\n\tif ( ! clientIds || ! clientIds.length ) {\n\t\treturn;\n\t}\n\n\tclientIds = castArray( clientIds );\n\tconst rootClientId = yield controls.select(\n\t\tblockEditorStoreName,\n\t\t'getBlockRootClientId',\n\t\tclientIds[ 0 ]\n\t);\n\tconst canRemoveBlocks = yield controls.select(\n\t\tblockEditorStoreName,\n\t\t'canRemoveBlocks',\n\t\tclientIds,\n\t\trootClientId\n\t);\n\n\tif ( ! canRemoveBlocks ) {\n\t\treturn;\n\t}\n\n\tlet previousBlockId;\n\tif ( selectPrevious ) {\n\t\tpreviousBlockId = yield selectPreviousBlock( clientIds[ 0 ] );\n\t} else {\n\t\tpreviousBlockId = yield controls.select(\n\t\t\tblockEditorStoreName,\n\t\t\t'getPreviousBlockClientId',\n\t\t\tclientIds[ 0 ]\n\t\t);\n\t}\n\n\tyield {\n\t\ttype: 'REMOVE_BLOCKS',\n\t\tclientIds,\n\t};\n\n\t// To avoid a focus loss when removing the last block, assure there is\n\t// always a default block if the last of the blocks have been removed.\n\tconst defaultBlockId = yield* ensureDefaultBlock();\n\treturn [ previousBlockId || defaultBlockId ];\n}\n\n/**\n * Returns an action object used in signalling that the block with the\n * specified client ID is to be removed.\n *\n * @param {string}  clientId       Client ID of block to remove.\n * @param {boolean} selectPrevious True if the previous block should be\n *                                 selected when a block is removed.\n *\n * @return {Object} Action object.\n */\nexport function removeBlock( clientId, selectPrevious ) {\n\treturn removeBlocks( [ clientId ], selectPrevious );\n}\n\n/* eslint-disable jsdoc/valid-types */\n/**\n * Returns an action object used in signalling that the inner blocks with the\n * specified client ID should be replaced.\n *\n * @param {string}    rootClientId    Client ID of the block whose InnerBlocks will re replaced.\n * @param {Object[]}  blocks          Block objects to insert as new InnerBlocks\n * @param {?boolean}  updateSelection If true block selection will be updated. If false, block selection will not change. Defaults to false.\n * @param {0|-1|null} initialPosition Initial block position.\n * @return {Object} Action object.\n */\nexport function replaceInnerBlocks(\n\trootClientId,\n\tblocks,\n\tupdateSelection = false,\n\tinitialPosition = 0\n) {\n\t/* eslint-enable jsdoc/valid-types */\n\treturn {\n\t\ttype: 'REPLACE_INNER_BLOCKS',\n\t\trootClientId,\n\t\tblocks,\n\t\tupdateSelection,\n\t\tinitialPosition: updateSelection ? initialPosition : null,\n\t\ttime: Date.now(),\n\t};\n}\n\n/**\n * Returns an action object used to toggle the block editing mode between\n * visual and HTML modes.\n *\n * @param {string} clientId Block client ID.\n *\n * @return {Object} Action object.\n */\nexport function toggleBlockMode( clientId ) {\n\treturn {\n\t\ttype: 'TOGGLE_BLOCK_MODE',\n\t\tclientId,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the user has begun to type.\n *\n * @return {Object} Action object.\n */\nexport function startTyping() {\n\treturn {\n\t\ttype: 'START_TYPING',\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the user has stopped typing.\n *\n * @return {Object} Action object.\n */\nexport function stopTyping() {\n\treturn {\n\t\ttype: 'STOP_TYPING',\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the user has begun to drag blocks.\n *\n * @param {string[]} clientIds An array of client ids being dragged\n *\n * @return {Object} Action object.\n */\nexport function startDraggingBlocks( clientIds = [] ) {\n\treturn {\n\t\ttype: 'START_DRAGGING_BLOCKS',\n\t\tclientIds,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the user has stopped dragging blocks.\n *\n * @return {Object} Action object.\n */\nexport function stopDraggingBlocks() {\n\treturn {\n\t\ttype: 'STOP_DRAGGING_BLOCKS',\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the caret has entered formatted text.\n *\n * @return {Object} Action object.\n */\nexport function enterFormattedText() {\n\treturn {\n\t\ttype: 'ENTER_FORMATTED_TEXT',\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the user caret has exited formatted text.\n *\n * @return {Object} Action object.\n */\nexport function exitFormattedText() {\n\treturn {\n\t\ttype: 'EXIT_FORMATTED_TEXT',\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the user caret has changed\n * position.\n *\n * @param {string} clientId     The selected block client ID.\n * @param {string} attributeKey The selected block attribute key.\n * @param {number} startOffset  The start offset.\n * @param {number} endOffset    The end offset.\n *\n * @return {Object} Action object.\n */\nexport function selectionChange(\n\tclientId,\n\tattributeKey,\n\tstartOffset,\n\tendOffset\n) {\n\treturn {\n\t\ttype: 'SELECTION_CHANGE',\n\t\tclientId,\n\t\tattributeKey,\n\t\tstartOffset,\n\t\tendOffset,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that a new block of the default\n * type should be added to the block list.\n *\n * @param {?Object} attributes   Optional attributes of the block to assign.\n * @param {?string} rootClientId Optional root client ID of block list on which\n *                               to append.\n * @param {?number} index        Optional index where to insert the default block\n *\n * @return {Object} Action object\n */\nexport function insertDefaultBlock( attributes, rootClientId, index ) {\n\t// Abort if there is no default block type (if it has been unregistered).\n\tconst defaultBlockName = getDefaultBlockName();\n\tif ( ! defaultBlockName ) {\n\t\treturn;\n\t}\n\n\tconst block = createBlock( defaultBlockName, attributes );\n\n\treturn insertBlock( block, index, rootClientId );\n}\n\n/**\n * Returns an action object that changes the nested settings of a given block.\n *\n * @param {string} clientId Client ID of the block whose nested setting are\n *                          being received.\n * @param {Object} settings Object with the new settings for the nested block.\n *\n * @return {Object} Action object\n */\nexport function updateBlockListSettings( clientId, settings ) {\n\treturn {\n\t\ttype: 'UPDATE_BLOCK_LIST_SETTINGS',\n\t\tclientId,\n\t\tsettings,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the block editor settings have been updated.\n *\n * @param {Object} settings Updated settings\n *\n * @return {Object} Action object\n */\nexport function updateSettings( settings ) {\n\treturn {\n\t\ttype: 'UPDATE_SETTINGS',\n\t\tsettings,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that a temporary reusable blocks have been saved\n * in order to switch its temporary id with the real id.\n *\n * @param {string} id        Reusable block's id.\n * @param {string} updatedId Updated block's id.\n *\n * @return {Object} Action object.\n */\nexport function __unstableSaveReusableBlock( id, updatedId ) {\n\treturn {\n\t\ttype: 'SAVE_REUSABLE_BLOCK_SUCCESS',\n\t\tid,\n\t\tupdatedId,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the last block change should be marked explicitly as persistent.\n *\n * @return {Object} Action object.\n */\nexport function __unstableMarkLastChangeAsPersistent() {\n\treturn { type: 'MARK_LAST_CHANGE_AS_PERSISTENT' };\n}\n\n/**\n * Returns an action object used in signalling that the next block change should be marked explicitly as not persistent.\n *\n * @return {Object} Action object.\n */\nexport function __unstableMarkNextChangeAsNotPersistent() {\n\treturn { type: 'MARK_NEXT_CHANGE_AS_NOT_PERSISTENT' };\n}\n\n/**\n * Returns an action object used in signalling that the last block change is\n * an automatic change, meaning it was not performed by the user, and can be\n * undone using the `Escape` and `Backspace` keys. This action must be called\n * after the change was made, and any actions that are a consequence of it, so\n * it is recommended to be called at the next idle period to ensure all\n * selection changes have been recorded.\n */\nexport function* __unstableMarkAutomaticChange() {\n\tyield { type: 'MARK_AUTOMATIC_CHANGE' };\n\tyield __unstableMarkAutomaticChangeFinalControl();\n}\n\nexport function __unstableMarkAutomaticChangeFinal() {\n\treturn {\n\t\ttype: 'MARK_AUTOMATIC_CHANGE_FINAL',\n\t};\n}\n\n/**\n * Generators that triggers an action used to enable or disable the navigation mode.\n *\n * @param {string} isNavigationMode Enable/Disable navigation mode.\n */\nexport function* setNavigationMode( isNavigationMode = true ) {\n\tyield {\n\t\ttype: 'SET_NAVIGATION_MODE',\n\t\tisNavigationMode,\n\t};\n\n\tif ( isNavigationMode ) {\n\t\tspeak(\n\t\t\t__(\n\t\t\t\t'You are currently in navigation mode. Navigate blocks using the Tab key and Arrow keys. Use Left and Right Arrow keys to move between nesting levels. To exit navigation mode and edit the selected block, press Enter.'\n\t\t\t)\n\t\t);\n\t} else {\n\t\tspeak(\n\t\t\t__(\n\t\t\t\t'You are currently in edit mode. To return to the navigation mode, press Escape.'\n\t\t\t)\n\t\t);\n\t}\n}\n\n/**\n * Generator that triggers an action used to enable or disable the block moving mode.\n *\n * @param {string|null} hasBlockMovingClientId Enable/Disable block moving mode.\n */\nexport function* setBlockMovingClientId( hasBlockMovingClientId = null ) {\n\tyield {\n\t\ttype: 'SET_BLOCK_MOVING_MODE',\n\t\thasBlockMovingClientId,\n\t};\n\n\tif ( hasBlockMovingClientId ) {\n\t\tspeak(\n\t\t\t__(\n\t\t\t\t'Use the Tab key and Arrow keys to choose new block location. Use Left and Right Arrow keys to move between nesting levels. Once location is selected press Enter or Space to move the block.'\n\t\t\t)\n\t\t);\n\t}\n}\n\n/**\n * Generator that triggers an action used to duplicate a list of blocks.\n *\n * @param {string[]} clientIds\n * @param {boolean}  updateSelection\n */\nexport function* duplicateBlocks( clientIds, updateSelection = true ) {\n\tif ( ! clientIds && ! clientIds.length ) {\n\t\treturn;\n\t}\n\tconst blocks = yield controls.select(\n\t\tblockEditorStoreName,\n\t\t'getBlocksByClientId',\n\t\tclientIds\n\t);\n\tconst rootClientId = yield controls.select(\n\t\tblockEditorStoreName,\n\t\t'getBlockRootClientId',\n\t\tclientIds[ 0 ]\n\t);\n\t// Return early if blocks don't exist.\n\tif ( some( blocks, ( block ) => ! block ) ) {\n\t\treturn;\n\t}\n\tconst blockNames = blocks.map( ( block ) => block.name );\n\t// Return early if blocks don't support multiple usage.\n\tif (\n\t\tsome(\n\t\t\tblockNames,\n\t\t\t( blockName ) => ! hasBlockSupport( blockName, 'multiple', true )\n\t\t)\n\t) {\n\t\treturn;\n\t}\n\n\tconst lastSelectedIndex = yield controls.select(\n\t\tblockEditorStoreName,\n\t\t'getBlockIndex',\n\t\tlast( castArray( clientIds ) ),\n\t\trootClientId\n\t);\n\tconst clonedBlocks = blocks.map( ( block ) =>\n\t\t__experimentalCloneSanitizedBlock( block )\n\t);\n\tyield insertBlocks(\n\t\tclonedBlocks,\n\t\tlastSelectedIndex + 1,\n\t\trootClientId,\n\t\tupdateSelection\n\t);\n\tif ( clonedBlocks.length > 1 && updateSelection ) {\n\t\tyield multiSelect(\n\t\t\tfirst( clonedBlocks ).clientId,\n\t\t\tlast( clonedBlocks ).clientId\n\t\t);\n\t}\n\treturn clonedBlocks.map( ( block ) => block.clientId );\n}\n\n/**\n * Generator used to insert an empty block after a given block.\n *\n * @param {string} clientId\n */\nexport function* insertBeforeBlock( clientId ) {\n\tif ( ! clientId ) {\n\t\treturn;\n\t}\n\tconst rootClientId = yield controls.select(\n\t\tblockEditorStoreName,\n\t\t'getBlockRootClientId',\n\t\tclientId\n\t);\n\tconst isLocked = yield controls.select(\n\t\tblockEditorStoreName,\n\t\t'getTemplateLock',\n\t\trootClientId\n\t);\n\tif ( isLocked ) {\n\t\treturn;\n\t}\n\n\tconst firstSelectedIndex = yield controls.select(\n\t\tblockEditorStoreName,\n\t\t'getBlockIndex',\n\t\tclientId,\n\t\trootClientId\n\t);\n\treturn yield insertDefaultBlock( {}, rootClientId, firstSelectedIndex );\n}\n\n/**\n * Generator used to insert an empty block before a given block.\n *\n * @param {string} clientId\n */\nexport function* insertAfterBlock( clientId ) {\n\tif ( ! clientId ) {\n\t\treturn;\n\t}\n\tconst rootClientId = yield controls.select(\n\t\tblockEditorStoreName,\n\t\t'getBlockRootClientId',\n\t\tclientId\n\t);\n\tconst isLocked = yield controls.select(\n\t\tblockEditorStoreName,\n\t\t'getTemplateLock',\n\t\trootClientId\n\t);\n\tif ( isLocked ) {\n\t\treturn;\n\t}\n\n\tconst firstSelectedIndex = yield controls.select(\n\t\tblockEditorStoreName,\n\t\t'getBlockIndex',\n\t\tclientId,\n\t\trootClientId\n\t);\n\treturn yield insertDefaultBlock( {}, rootClientId, firstSelectedIndex + 1 );\n}\n\n/**\n * Returns an action object that toggles the highlighted block state.\n *\n * @param {string}  clientId      The block's clientId.\n * @param {boolean} isHighlighted The highlight state.\n */\nexport function toggleBlockHighlight( clientId, isHighlighted ) {\n\treturn {\n\t\ttype: 'TOGGLE_BLOCK_HIGHLIGHT',\n\t\tclientId,\n\t\tisHighlighted,\n\t};\n}\n\n/**\n * Yields action objects used in signalling that the block corresponding to the\n * given clientId should appear to \"flash\" by rhythmically highlighting it.\n *\n * @param {string} clientId Target block client ID.\n */\nexport function* flashBlock( clientId ) {\n\tyield toggleBlockHighlight( clientId, true );\n\tyield {\n\t\ttype: 'SLEEP',\n\t\tduration: 150,\n\t};\n\tyield toggleBlockHighlight( clientId, false );\n}\n\n/**\n * Returns an action object that sets whether the block has controlled innerblocks.\n *\n * @param {string}  clientId                 The block's clientId.\n * @param {boolean} hasControlledInnerBlocks True if the block's inner blocks are controlled.\n */\nexport function setHasControlledInnerBlocks(\n\tclientId,\n\thasControlledInnerBlocks\n) {\n\treturn {\n\t\ttype: 'SET_HAS_CONTROLLED_INNER_BLOCKS',\n\t\thasControlledInnerBlocks,\n\t\tclientId,\n\t};\n}\n"]}
{"version":3,"sources":["@wordpress/edit-post/src/components/header/header-toolbar/index.native.js"],"names":["Platform","ScrollView","View","useRef","compose","withPreferredColorScheme","withSelect","withDispatch","withViewportMatch","__","Inserter","BlockToolbar","store","blockEditorStore","ToolbarGroup","ToolbarButton","keyboardClose","undo","undoIcon","redo","redoIcon","editorStore","styles","editPostStore","HeaderToolbar","hasRedo","hasUndo","showInserter","showKeyboardHideButton","getStylesFromColorScheme","onHideKeyboard","isRTL","scrollViewRef","scrollToStart","isAndroid","OS","current","scrollToEnd","scrollTo","x","renderHistoryButtons","buttons","hint","reverse","container","containerDark","scrollableContent","keyboardHideContainer","select","getBlockRootClientId","getBlockSelectionEnd","hasInserterItems","getEditorSettings","hasEditorRedo","hasEditorUndo","getEditorMode","richEditingEnabled","isTextModeEnabled","getSettings","dispatch","clearSelectedBlock","togglePostTitleSelection","isLargeViewport"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { Platform, ScrollView, View } from 'react-native';\n\n/**\n * WordPress dependencies\n */\nimport { useRef } from '@wordpress/element';\nimport { compose, withPreferredColorScheme } from '@wordpress/compose';\nimport { withSelect, withDispatch } from '@wordpress/data';\nimport { withViewportMatch } from '@wordpress/viewport';\nimport { __ } from '@wordpress/i18n';\nimport {\n\tInserter,\n\tBlockToolbar,\n\tstore as blockEditorStore,\n} from '@wordpress/block-editor';\nimport { ToolbarGroup, ToolbarButton } from '@wordpress/components';\nimport {\n\tkeyboardClose,\n\tundo as undoIcon,\n\tredo as redoIcon,\n} from '@wordpress/icons';\nimport { store as editorStore } from '@wordpress/editor';\n\n/**\n * Internal dependencies\n */\nimport styles from './style.scss';\nimport { store as editPostStore } from '../../../store';\n\nfunction HeaderToolbar( {\n\thasRedo,\n\thasUndo,\n\tredo,\n\tundo,\n\tshowInserter,\n\tshowKeyboardHideButton,\n\tgetStylesFromColorScheme,\n\tonHideKeyboard,\n\tisRTL,\n} ) {\n\tconst scrollViewRef = useRef( null );\n\tconst scrollToStart = () => {\n\t\t// scrollview doesn't seem to automatically adjust to RTL on Android so, scroll to end when Android\n\t\tconst isAndroid = Platform.OS === 'android';\n\t\tif ( isAndroid && isRTL ) {\n\t\t\tscrollViewRef.current.scrollToEnd();\n\t\t} else {\n\t\t\tscrollViewRef.current.scrollTo( { x: 0 } );\n\t\t}\n\t};\n\tconst renderHistoryButtons = () => {\n\t\tconst buttons = [\n\t\t\t/* TODO: replace with EditorHistoryRedo and EditorHistoryUndo */\n\t\t\t<ToolbarButton\n\t\t\t\tkey=\"undoButton\"\n\t\t\t\ttitle={ __( 'Undo' ) }\n\t\t\t\ticon={ ! isRTL ? undoIcon : redoIcon }\n\t\t\t\tisDisabled={ ! hasUndo }\n\t\t\t\tonClick={ undo }\n\t\t\t\textraProps={ {\n\t\t\t\t\thint: __( 'Double tap to undo last change' ),\n\t\t\t\t} }\n\t\t\t/>,\n\t\t\t<ToolbarButton\n\t\t\t\tkey=\"redoButton\"\n\t\t\t\ttitle={ __( 'Redo' ) }\n\t\t\t\ticon={ ! isRTL ? redoIcon : undoIcon }\n\t\t\t\tisDisabled={ ! hasRedo }\n\t\t\t\tonClick={ redo }\n\t\t\t\textraProps={ {\n\t\t\t\t\thint: __( 'Double tap to redo last change' ),\n\t\t\t\t} }\n\t\t\t/>,\n\t\t];\n\n\t\treturn isRTL ? buttons.reverse() : buttons;\n\t};\n\n\treturn (\n\t\t<View\n\t\t\tstyle={ getStylesFromColorScheme(\n\t\t\t\tstyles.container,\n\t\t\t\tstyles.containerDark\n\t\t\t) }\n\t\t>\n\t\t\t<ScrollView\n\t\t\t\tref={ scrollViewRef }\n\t\t\t\tonContentSizeChange={ scrollToStart }\n\t\t\t\thorizontal={ true }\n\t\t\t\tshowsHorizontalScrollIndicator={ false }\n\t\t\t\tkeyboardShouldPersistTaps=\"always\"\n\t\t\t\talwaysBounceHorizontal={ false }\n\t\t\t\tcontentContainerStyle={ styles.scrollableContent }\n\t\t\t>\n\t\t\t\t<Inserter disabled={ ! showInserter } />\n\t\t\t\t{ renderHistoryButtons() }\n\t\t\t\t<BlockToolbar />\n\t\t\t</ScrollView>\n\t\t\t{ showKeyboardHideButton && (\n\t\t\t\t<ToolbarGroup passedStyle={ styles.keyboardHideContainer }>\n\t\t\t\t\t<ToolbarButton\n\t\t\t\t\t\ttitle={ __( 'Hide keyboard' ) }\n\t\t\t\t\t\ticon={ keyboardClose }\n\t\t\t\t\t\tonClick={ onHideKeyboard }\n\t\t\t\t\t\textraProps={ {\n\t\t\t\t\t\t\thint: __( 'Tap to hide the keyboard' ),\n\t\t\t\t\t\t} }\n\t\t\t\t\t/>\n\t\t\t\t</ToolbarGroup>\n\t\t\t) }\n\t\t</View>\n\t);\n}\n\nexport default compose( [\n\twithSelect( ( select ) => {\n\t\tconst {\n\t\t\tgetBlockRootClientId,\n\t\t\tgetBlockSelectionEnd,\n\t\t\thasInserterItems,\n\t\t} = select( blockEditorStore );\n\t\tconst { getEditorSettings } = select( editorStore );\n\t\treturn {\n\t\t\thasRedo: select( editorStore ).hasEditorRedo(),\n\t\t\thasUndo: select( editorStore ).hasEditorUndo(),\n\t\t\t// This setting (richEditingEnabled) should not live in the block editor's setting.\n\t\t\tshowInserter:\n\t\t\t\tselect( editPostStore ).getEditorMode() === 'visual' &&\n\t\t\t\tgetEditorSettings().richEditingEnabled &&\n\t\t\t\thasInserterItems(\n\t\t\t\t\tgetBlockRootClientId( getBlockSelectionEnd() )\n\t\t\t\t),\n\t\t\tisTextModeEnabled:\n\t\t\t\tselect( editPostStore ).getEditorMode() === 'text',\n\t\t\tisRTL: select( blockEditorStore ).getSettings().isRTL,\n\t\t};\n\t} ),\n\twithDispatch( ( dispatch ) => {\n\t\tconst { clearSelectedBlock } = dispatch( blockEditorStore );\n\t\tconst { togglePostTitleSelection } = dispatch( editorStore );\n\n\t\treturn {\n\t\t\tredo: dispatch( editorStore ).redo,\n\t\t\tundo: dispatch( editorStore ).undo,\n\t\t\tonHideKeyboard() {\n\t\t\t\tclearSelectedBlock();\n\t\t\t\ttogglePostTitleSelection( false );\n\t\t\t},\n\t\t};\n\t} ),\n\twithViewportMatch( { isLargeViewport: 'medium' } ),\n\twithPreferredColorScheme,\n] )( HeaderToolbar );\n"]}
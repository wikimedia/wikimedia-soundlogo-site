import { createElement, Fragment } from "@wordpress/element";

/**
 * External dependencies
 */
import { map } from 'lodash';
/**
 * WordPress dependencies
 */

import { useSelect, useRegistry } from '@wordpress/data';
import { useEffect } from '@wordpress/element';
import { store as editorStore } from '@wordpress/editor';
/**
 * Internal dependencies
 */

import MetaBoxesArea from './meta-boxes-area';
import MetaBoxVisibility from './meta-box-visibility';
import { store as editPostStore } from '../../store';
export default function MetaBoxes({
  location
}) {
  const registry = useRegistry();
  const {
    metaBoxes,
    isVisible,
    areMetaBoxesInitialized,
    isEditorReady
  } = useSelect(select => {
    const {
      __unstableIsEditorReady
    } = select(editorStore);
    const {
      isMetaBoxLocationVisible,
      getMetaBoxesPerLocation,
      areMetaBoxesInitialized: _areMetaBoxesInitialized
    } = select(editPostStore);
    return {
      metaBoxes: getMetaBoxesPerLocation(location),
      isVisible: isMetaBoxLocationVisible(location),
      areMetaBoxesInitialized: _areMetaBoxesInitialized(),
      isEditorReady: __unstableIsEditorReady()
    };
  }, [location]); // When editor is ready, initialize postboxes (wp core script) and metabox
  // saving. This initializes all meta box locations, not just this specific
  // one.

  useEffect(() => {
    if (isEditorReady && !areMetaBoxesInitialized) {
      registry.dispatch(editPostStore).initializeMetaBoxes();
    }
  }, [isEditorReady, areMetaBoxesInitialized]);

  if (!areMetaBoxesInitialized) {
    return null;
  }

  return createElement(Fragment, null, map(metaBoxes, ({
    id
  }) => createElement(MetaBoxVisibility, {
    key: id,
    id: id
  })), isVisible && createElement(MetaBoxesArea, {
    location: location
  }));
}
//# sourceMappingURL=index.js.map
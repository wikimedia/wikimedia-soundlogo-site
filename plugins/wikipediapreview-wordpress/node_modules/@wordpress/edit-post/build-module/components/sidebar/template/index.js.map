{"version":3,"sources":["@wordpress/edit-post/src/components/sidebar/template/index.js"],"names":["partial","isEmpty","map","fromPairs","__","sprintf","useMemo","PanelBody","SelectControl","store","editorStore","useSelect","useDispatch","coreStore","PostTemplateActions","editPostStore","PANEL_NAME","TemplatePanel","isEnabled","isOpened","selectedTemplate","availableTemplates","fetchedTemplates","isViewable","template","supportsTemplateMode","canUserCreate","select","isEditorPanelEnabled","isEditorPanelOpened","getEditedPostTemplate","getEditedPostAttribute","getEditorSettings","getCurrentPostType","getPostType","getEntityRecords","canUser","_isViewable","viewable","_supportsTemplateMode","wpTemplates","newAvailableTemplates","slug","title","rendered","templates","toggleEditorPanelOpened","editPost","onTogglePanel","panelTitle","Object","keys","includes","templateSlug","templateName","value","label"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { partial, isEmpty, map, fromPairs } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { __, sprintf } from '@wordpress/i18n';\nimport { useMemo } from '@wordpress/element';\nimport { PanelBody, SelectControl } from '@wordpress/components';\nimport { store as editorStore } from '@wordpress/editor';\nimport { useSelect, useDispatch } from '@wordpress/data';\nimport { store as coreStore } from '@wordpress/core-data';\n\n/**\n * Internal dependencies\n */\nimport PostTemplateActions from './actions';\nimport { store as editPostStore } from '../../../store';\n\n/**\n * Module Constants\n */\nconst PANEL_NAME = 'template';\n\nexport function TemplatePanel() {\n\tconst {\n\t\tisEnabled,\n\t\tisOpened,\n\t\tselectedTemplate,\n\t\tavailableTemplates,\n\t\tfetchedTemplates,\n\t\tisViewable,\n\t\ttemplate,\n\t\tsupportsTemplateMode,\n\t\tcanUserCreate,\n\t} = useSelect( ( select ) => {\n\t\tconst {\n\t\t\tisEditorPanelEnabled,\n\t\t\tisEditorPanelOpened,\n\t\t\tgetEditedPostTemplate,\n\t\t} = select( editPostStore );\n\t\tconst {\n\t\t\tgetEditedPostAttribute,\n\t\t\tgetEditorSettings,\n\t\t\tgetCurrentPostType,\n\t\t} = select( editorStore );\n\t\tconst { getPostType, getEntityRecords, canUser } = select( coreStore );\n\t\tconst _isViewable =\n\t\t\tgetPostType( getCurrentPostType() )?.viewable ?? false;\n\t\tconst _supportsTemplateMode =\n\t\t\tselect( editorStore ).getEditorSettings().supportsTemplateMode &&\n\t\t\t_isViewable;\n\n\t\tconst wpTemplates = getEntityRecords( 'postType', 'wp_template' );\n\n\t\tconst newAvailableTemplates = fromPairs(\n\t\t\t( wpTemplates || [] ).map( ( { slug, title } ) => [\n\t\t\t\tslug,\n\t\t\t\ttitle.rendered,\n\t\t\t] )\n\t\t);\n\n\t\treturn {\n\t\t\tisEnabled: isEditorPanelEnabled( PANEL_NAME ),\n\t\t\tisOpened: isEditorPanelOpened( PANEL_NAME ),\n\t\t\tselectedTemplate: getEditedPostAttribute( 'template' ),\n\t\t\tavailableTemplates: getEditorSettings().availableTemplates,\n\t\t\tfetchedTemplates: newAvailableTemplates,\n\t\t\ttemplate: _supportsTemplateMode && getEditedPostTemplate(),\n\t\t\tisViewable: _isViewable,\n\t\t\tsupportsTemplateMode: _supportsTemplateMode,\n\t\t\tcanUserCreate: canUser( 'create', 'templates' ),\n\t\t};\n\t}, [] );\n\n\tconst templates = useMemo( () => {\n\t\treturn {\n\t\t\t...availableTemplates,\n\t\t\t...fetchedTemplates,\n\t\t};\n\t}, [ availableTemplates, fetchedTemplates ] );\n\n\tconst { toggleEditorPanelOpened } = useDispatch( editPostStore );\n\tconst { editPost } = useDispatch( editorStore );\n\n\tif (\n\t\t! isEnabled ||\n\t\t! isViewable ||\n\t\t( isEmpty( availableTemplates ) &&\n\t\t\t( ! supportsTemplateMode || ! canUserCreate ) )\n\t) {\n\t\treturn null;\n\t}\n\n\tconst onTogglePanel = partial( toggleEditorPanelOpened, PANEL_NAME );\n\n\tlet panelTitle = __( 'Template' );\n\tif ( !! template ) {\n\t\tpanelTitle = sprintf(\n\t\t\t/* translators: %s: template title */\n\t\t\t__( 'Template: %s' ),\n\t\t\ttemplate?.title ?? template.slug\n\t\t);\n\t}\n\n\treturn (\n\t\t<PanelBody\n\t\t\ttitle={ panelTitle }\n\t\t\topened={ isOpened }\n\t\t\tonToggle={ onTogglePanel }\n\t\t>\n\t\t\t<SelectControl\n\t\t\t\thideLabelFromVision\n\t\t\t\tlabel={ __( 'Template:' ) }\n\t\t\t\tvalue={\n\t\t\t\t\tObject.keys( templates ).includes( selectedTemplate )\n\t\t\t\t\t\t? selectedTemplate\n\t\t\t\t\t\t: ''\n\t\t\t\t}\n\t\t\t\tonChange={ ( templateSlug ) => {\n\t\t\t\t\teditPost( {\n\t\t\t\t\t\ttemplate: templateSlug || '',\n\t\t\t\t\t} );\n\t\t\t\t} }\n\t\t\t\toptions={ map( templates, ( templateName, templateSlug ) => ( {\n\t\t\t\t\tvalue: templateSlug,\n\t\t\t\t\tlabel: templateName,\n\t\t\t\t} ) ) }\n\t\t\t/>\n\t\t\t{ canUserCreate && <PostTemplateActions /> }\n\t\t</PanelBody>\n\t);\n}\n\nexport default TemplatePanel;\n"]}
{"version":3,"sources":["@wordpress/edit-post/src/store/selectors.js"],"names":["getEditorMode","state","getPreference","isEditorSidebarOpened","select","activeGeneralSidebar","interfaceStore","getActiveComplementaryArea","isPluginSidebarOpened","getActiveGeneralSidebarName","getPreferences","preferences","preferenceKey","defaultValue","value","undefined","isPublishSidebarOpened","publishSidebarActive","isEditorPanelRemoved","panelName","removedPanels","isEditorPanelEnabled","panels","isEditorPanelOpened","isModalActive","modalName","activeModal","isFeatureActive","feature","isPluginItemPinned","pluginName","isItemPinned","getActiveMetaBoxLocations","Object","keys","metaBoxes","locations","filter","location","isMetaBoxLocationActive","isMetaBoxLocationVisible","getMetaBoxesPerLocation","id","length","getAllMetaBoxes","hasMetaBoxes","isSavingMetaBoxes","isSaving","__experimentalGetPreviewDeviceType","deviceType","isInserterOpened","blockInserterPanel","__experimentalGetInsertionPoint","rootClientId","insertionIndex","filterValue","isListViewOpened","listViewPanel","isEditingTemplate","areMetaBoxesInitialized","initialized","getEditedPostTemplate","currentTemplate","editorStore","getEditedPostAttribute","templateWithSameSlug","coreStore","getEntityRecords","find","template","slug","getEditedEntityRecord","post","getCurrentPost","link","__experimentalGetTemplateForLink"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport createSelector from 'rememo';\nimport { get, includes, some, flatten, values } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { createRegistrySelector } from '@wordpress/data';\nimport { store as interfaceStore } from '@wordpress/interface';\nimport { store as coreStore } from '@wordpress/core-data';\nimport { store as editorStore } from '@wordpress/editor';\n/**\n * Returns the current editing mode.\n *\n * @param {Object} state Global application state.\n *\n * @return {string} Editing mode.\n */\nexport function getEditorMode( state ) {\n\treturn getPreference( state, 'editorMode', 'visual' );\n}\n\n/**\n * Returns true if the editor sidebar is opened.\n *\n * @param {Object} state Global application state\n *\n * @return {boolean} Whether the editor sidebar is opened.\n */\nexport const isEditorSidebarOpened = createRegistrySelector(\n\t( select ) => () => {\n\t\tconst activeGeneralSidebar = select(\n\t\t\tinterfaceStore\n\t\t).getActiveComplementaryArea( 'core/edit-post' );\n\t\treturn includes(\n\t\t\t[ 'edit-post/document', 'edit-post/block' ],\n\t\t\tactiveGeneralSidebar\n\t\t);\n\t}\n);\n\n/**\n * Returns true if the plugin sidebar is opened.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the plugin sidebar is opened.\n */\nexport const isPluginSidebarOpened = createRegistrySelector(\n\t( select ) => () => {\n\t\tconst activeGeneralSidebar = select(\n\t\t\tinterfaceStore\n\t\t).getActiveComplementaryArea( 'core/edit-post' );\n\t\treturn (\n\t\t\t!! activeGeneralSidebar &&\n\t\t\t! includes(\n\t\t\t\t[ 'edit-post/document', 'edit-post/block' ],\n\t\t\t\tactiveGeneralSidebar\n\t\t\t)\n\t\t);\n\t}\n);\n\n/**\n * Returns the current active general sidebar name, or null if there is no\n * general sidebar active. The active general sidebar is a unique name to\n * identify either an editor or plugin sidebar.\n *\n * Examples:\n *\n *  - `edit-post/document`\n *  - `my-plugin/insert-image-sidebar`\n *\n * @param {Object} state Global application state.\n *\n * @return {?string} Active general sidebar name.\n */\nexport const getActiveGeneralSidebarName = createRegistrySelector(\n\t( select ) => () => {\n\t\treturn select( interfaceStore ).getActiveComplementaryArea(\n\t\t\t'core/edit-post'\n\t\t);\n\t}\n);\n\n/**\n * Returns the preferences (these preferences are persisted locally).\n *\n * @param {Object} state Global application state.\n *\n * @return {Object} Preferences Object.\n */\nexport function getPreferences( state ) {\n\treturn state.preferences;\n}\n\n/**\n *\n * @param {Object} state         Global application state.\n * @param {string} preferenceKey Preference Key.\n * @param {*}      defaultValue  Default Value.\n *\n * @return {*} Preference Value.\n */\nexport function getPreference( state, preferenceKey, defaultValue ) {\n\tconst preferences = getPreferences( state );\n\tconst value = preferences[ preferenceKey ];\n\treturn value === undefined ? defaultValue : value;\n}\n\n/**\n * Returns true if the publish sidebar is opened.\n *\n * @param {Object} state Global application state\n *\n * @return {boolean} Whether the publish sidebar is open.\n */\nexport function isPublishSidebarOpened( state ) {\n\treturn state.publishSidebarActive;\n}\n\n/**\n * Returns true if the given panel was programmatically removed, or false otherwise.\n * All panels are not removed by default.\n *\n * @param {Object} state     Global application state.\n * @param {string} panelName A string that identifies the panel.\n *\n * @return {boolean} Whether or not the panel is removed.\n */\nexport function isEditorPanelRemoved( state, panelName ) {\n\treturn includes( state.removedPanels, panelName );\n}\n\n/**\n * Returns true if the given panel is enabled, or false otherwise. Panels are\n * enabled by default.\n *\n * @param {Object} state     Global application state.\n * @param {string} panelName A string that identifies the panel.\n *\n * @return {boolean} Whether or not the panel is enabled.\n */\nexport function isEditorPanelEnabled( state, panelName ) {\n\tconst panels = getPreference( state, 'panels' );\n\n\treturn (\n\t\t! isEditorPanelRemoved( state, panelName ) &&\n\t\tget( panels, [ panelName, 'enabled' ], true )\n\t);\n}\n\n/**\n * Returns true if the given panel is open, or false otherwise. Panels are\n * closed by default.\n *\n * @param {Object} state     Global application state.\n * @param {string} panelName A string that identifies the panel.\n *\n * @return {boolean} Whether or not the panel is open.\n */\nexport function isEditorPanelOpened( state, panelName ) {\n\tconst panels = getPreference( state, 'panels' );\n\treturn (\n\t\tget( panels, [ panelName ] ) === true ||\n\t\tget( panels, [ panelName, 'opened' ] ) === true\n\t);\n}\n\n/**\n * Returns true if a modal is active, or false otherwise.\n *\n * @param {Object} state     Global application state.\n * @param {string} modalName A string that uniquely identifies the modal.\n *\n * @return {boolean} Whether the modal is active.\n */\nexport function isModalActive( state, modalName ) {\n\treturn state.activeModal === modalName;\n}\n\n/**\n * Returns whether the given feature is enabled or not.\n *\n * @param {Object} state   Global application state.\n * @param {string} feature Feature slug.\n *\n * @return {boolean} Is active.\n */\nexport const isFeatureActive = createRegistrySelector(\n\t( select ) => ( state, feature ) => {\n\t\treturn select( interfaceStore ).isFeatureActive(\n\t\t\t'core/edit-post',\n\t\t\tfeature\n\t\t);\n\t}\n);\n\n/**\n * Returns true if the plugin item is pinned to the header.\n * When the value is not set it defaults to true.\n *\n * @param {Object} state      Global application state.\n * @param {string} pluginName Plugin item name.\n *\n * @return {boolean} Whether the plugin item is pinned.\n */\nexport const isPluginItemPinned = createRegistrySelector(\n\t( select ) => ( state, pluginName ) => {\n\t\treturn select( interfaceStore ).isItemPinned(\n\t\t\t'core/edit-post',\n\t\t\tpluginName\n\t\t);\n\t}\n);\n\n/**\n * Returns an array of active meta box locations.\n *\n * @param {Object} state Post editor state.\n *\n * @return {string[]} Active meta box locations.\n */\nexport const getActiveMetaBoxLocations = createSelector(\n\t( state ) => {\n\t\treturn Object.keys( state.metaBoxes.locations ).filter( ( location ) =>\n\t\t\tisMetaBoxLocationActive( state, location )\n\t\t);\n\t},\n\t( state ) => [ state.metaBoxes.locations ]\n);\n\n/**\n * Returns true if a metabox location is active and visible\n *\n * @param {Object} state    Post editor state.\n * @param {string} location Meta box location to test.\n *\n * @return {boolean} Whether the meta box location is active and visible.\n */\nexport function isMetaBoxLocationVisible( state, location ) {\n\treturn (\n\t\tisMetaBoxLocationActive( state, location ) &&\n\t\tsome( getMetaBoxesPerLocation( state, location ), ( { id } ) => {\n\t\t\treturn isEditorPanelEnabled( state, `meta-box-${ id }` );\n\t\t} )\n\t);\n}\n\n/**\n * Returns true if there is an active meta box in the given location, or false\n * otherwise.\n *\n * @param {Object} state    Post editor state.\n * @param {string} location Meta box location to test.\n *\n * @return {boolean} Whether the meta box location is active.\n */\nexport function isMetaBoxLocationActive( state, location ) {\n\tconst metaBoxes = getMetaBoxesPerLocation( state, location );\n\treturn !! metaBoxes && metaBoxes.length !== 0;\n}\n\n/**\n * Returns the list of all the available meta boxes for a given location.\n *\n * @param {Object} state    Global application state.\n * @param {string} location Meta box location to test.\n *\n * @return {?Array} List of meta boxes.\n */\nexport function getMetaBoxesPerLocation( state, location ) {\n\treturn state.metaBoxes.locations[ location ];\n}\n\n/**\n * Returns the list of all the available meta boxes.\n *\n * @param {Object} state Global application state.\n *\n * @return {Array} List of meta boxes.\n */\nexport const getAllMetaBoxes = createSelector(\n\t( state ) => {\n\t\treturn flatten( values( state.metaBoxes.locations ) );\n\t},\n\t( state ) => [ state.metaBoxes.locations ]\n);\n\n/**\n * Returns true if the post is using Meta Boxes\n *\n * @param {Object} state Global application state\n *\n * @return {boolean} Whether there are metaboxes or not.\n */\nexport function hasMetaBoxes( state ) {\n\treturn getActiveMetaBoxLocations( state ).length > 0;\n}\n\n/**\n * Returns true if the Meta Boxes are being saved.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the metaboxes are being saved.\n */\nexport function isSavingMetaBoxes( state ) {\n\treturn state.metaBoxes.isSaving;\n}\n\n/**\n * Returns the current editing canvas device type.\n *\n * @param {Object} state Global application state.\n *\n * @return {string} Device type.\n */\nexport function __experimentalGetPreviewDeviceType( state ) {\n\treturn state.deviceType;\n}\n\n/**\n * Returns true if the inserter is opened.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the inserter is opened.\n */\nexport function isInserterOpened( state ) {\n\treturn !! state.blockInserterPanel;\n}\n\n/**\n * Get the insertion point for the inserter.\n *\n * @param {Object} state Global application state.\n *\n * @return {Object} The root client ID, index to insert at and starting filter value.\n */\nexport function __experimentalGetInsertionPoint( state ) {\n\tconst {\n\t\trootClientId,\n\t\tinsertionIndex,\n\t\tfilterValue,\n\t} = state.blockInserterPanel;\n\treturn { rootClientId, insertionIndex, filterValue };\n}\n\n/**\n * Returns true if the list view is opened.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the list view is opened.\n */\nexport function isListViewOpened( state ) {\n\treturn state.listViewPanel;\n}\n\n/**\n * Returns true if the template editing mode is enabled.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether we're editing the template.\n */\nexport function isEditingTemplate( state ) {\n\treturn state.isEditingTemplate;\n}\n\n/**\n * Returns true if meta boxes are initialized.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether meta boxes are initialized.\n */\nexport function areMetaBoxesInitialized( state ) {\n\treturn state.metaBoxes.initialized;\n}\n\n/**\n * Retrieves the template of the currently edited post.\n *\n * @return {Object?} Post Template.\n */\nexport const getEditedPostTemplate = createRegistrySelector(\n\t( select ) => () => {\n\t\tconst currentTemplate = select( editorStore ).getEditedPostAttribute(\n\t\t\t'template'\n\t\t);\n\t\tif ( currentTemplate ) {\n\t\t\tconst templateWithSameSlug = select( coreStore )\n\t\t\t\t.getEntityRecords( 'postType', 'wp_template' )\n\t\t\t\t?.find( ( template ) => template.slug === currentTemplate );\n\t\t\tif ( ! templateWithSameSlug ) {\n\t\t\t\treturn templateWithSameSlug;\n\t\t\t}\n\t\t\treturn select( coreStore ).getEditedEntityRecord(\n\t\t\t\t'postType',\n\t\t\t\t'wp_template',\n\t\t\t\ttemplateWithSameSlug.id\n\t\t\t);\n\t\t}\n\n\t\tconst post = select( editorStore ).getCurrentPost();\n\t\tif ( post.link ) {\n\t\t\treturn select( coreStore ).__experimentalGetTemplateForLink(\n\t\t\t\tpost.link\n\t\t\t);\n\t\t}\n\n\t\treturn null;\n\t}\n);\n"]}
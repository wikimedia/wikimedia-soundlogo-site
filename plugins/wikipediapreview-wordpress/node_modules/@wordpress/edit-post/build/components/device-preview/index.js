"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = DevicePreview;

var _element = require("@wordpress/element");

var _components = require("@wordpress/components");

var _editor = require("@wordpress/editor");

var _icons = require("@wordpress/icons");

var _i18n = require("@wordpress/i18n");

var _blockEditor = require("@wordpress/block-editor");

var _data = require("@wordpress/data");

var _store = require("../../store");

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
function DevicePreview() {
  const {
    hasActiveMetaboxes,
    isPostSaveable,
    isSaving,
    deviceType
  } = (0, _data.useSelect)(select => ({
    hasActiveMetaboxes: select(_store.store).hasMetaBoxes(),
    isSaving: select(_store.store).isSavingMetaBoxes(),
    isPostSaveable: select(_editor.store).isEditedPostSaveable(),
    deviceType: select(_store.store).__experimentalGetPreviewDeviceType()
  }), []);
  const {
    __experimentalSetPreviewDeviceType: setPreviewDeviceType
  } = (0, _data.useDispatch)(_store.store);
  return (0, _element.createElement)(_blockEditor.__experimentalPreviewOptions, {
    isEnabled: isPostSaveable,
    className: "edit-post-post-preview-dropdown",
    deviceType: deviceType,
    setDeviceType: setPreviewDeviceType
  }, (0, _element.createElement)(_components.MenuGroup, null, (0, _element.createElement)("div", {
    className: "edit-post-header-preview__grouping-external"
  }, (0, _element.createElement)(_editor.PostPreviewButton, {
    className: 'edit-post-header-preview__button-external',
    role: "menuitem",
    forceIsAutosaveable: hasActiveMetaboxes,
    forcePreviewLink: isSaving ? null : undefined,
    textContent: (0, _element.createElement)(_element.Fragment, null, (0, _i18n.__)('Preview in new tab'), (0, _element.createElement)(_components.Icon, {
      icon: _icons.external
    }))
  }))));
}
//# sourceMappingURL=index.js.map
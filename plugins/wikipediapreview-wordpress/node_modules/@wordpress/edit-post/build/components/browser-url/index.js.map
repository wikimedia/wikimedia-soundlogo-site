{"version":3,"sources":["@wordpress/edit-post/src/components/browser-url/index.js"],"names":["getPostEditURL","postId","post","action","getPostTrashedURL","postType","trashed","post_type","ids","BrowserURL","Component","constructor","arguments","state","historyId","componentDidUpdate","prevProps","postStatus","isSavingPost","props","setTrashURL","setBrowserURL","window","location","href","history","replaceState","id","setState","render","select","getCurrentPost","editorStore","status","type","isTemplate","includes","wp_id"],"mappings":"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","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { Component } from '@wordpress/element';\nimport { withSelect } from '@wordpress/data';\nimport { addQueryArgs } from '@wordpress/url';\nimport { store as editorStore } from '@wordpress/editor';\n\n/**\n * Returns the Post's Edit URL.\n *\n * @param {number} postId Post ID.\n *\n * @return {string} Post edit URL.\n */\nexport function getPostEditURL( postId ) {\n\treturn addQueryArgs( 'post.php', { post: postId, action: 'edit' } );\n}\n\n/**\n * Returns the Post's Trashed URL.\n *\n * @param {number} postId   Post ID.\n * @param {string} postType Post Type.\n *\n * @return {string} Post trashed URL.\n */\nexport function getPostTrashedURL( postId, postType ) {\n\treturn addQueryArgs( 'edit.php', {\n\t\ttrashed: 1,\n\t\tpost_type: postType,\n\t\tids: postId,\n\t} );\n}\n\nexport class BrowserURL extends Component {\n\tconstructor() {\n\t\tsuper( ...arguments );\n\n\t\tthis.state = {\n\t\t\thistoryId: null,\n\t\t};\n\t}\n\n\tcomponentDidUpdate( prevProps ) {\n\t\tconst { postId, postStatus, postType, isSavingPost } = this.props;\n\t\tconst { historyId } = this.state;\n\n\t\t// Posts are still dirty while saving so wait for saving to finish\n\t\t// to avoid the unsaved changes warning when trashing posts.\n\t\tif ( postStatus === 'trash' && ! isSavingPost ) {\n\t\t\tthis.setTrashURL( postId, postType );\n\t\t\treturn;\n\t\t}\n\n\t\tif (\n\t\t\t( postId !== prevProps.postId || postId !== historyId ) &&\n\t\t\tpostStatus !== 'auto-draft' &&\n\t\t\tpostId\n\t\t) {\n\t\t\tthis.setBrowserURL( postId );\n\t\t}\n\t}\n\n\t/**\n\t * Navigates the browser to the post trashed URL to show a notice about the trashed post.\n\t *\n\t * @param {number} postId   Post ID.\n\t * @param {string} postType Post Type.\n\t */\n\tsetTrashURL( postId, postType ) {\n\t\twindow.location.href = getPostTrashedURL( postId, postType );\n\t}\n\n\t/**\n\t * Replaces the browser URL with a post editor link for the given post ID.\n\t *\n\t * Note it is important that, since this function may be called when the\n\t * editor first loads, the result generated `getPostEditURL` matches that\n\t * produced by the server. Otherwise, the URL will change unexpectedly.\n\t *\n\t * @param {number} postId Post ID for which to generate post editor URL.\n\t */\n\tsetBrowserURL( postId ) {\n\t\twindow.history.replaceState(\n\t\t\t{ id: postId },\n\t\t\t'Post ' + postId,\n\t\t\tgetPostEditURL( postId )\n\t\t);\n\n\t\tthis.setState( () => ( {\n\t\t\thistoryId: postId,\n\t\t} ) );\n\t}\n\n\trender() {\n\t\treturn null;\n\t}\n}\n\nexport default withSelect( ( select ) => {\n\tconst { getCurrentPost, isSavingPost } = select( editorStore );\n\tconst post = getCurrentPost();\n\tlet { id, status, type } = post;\n\tconst isTemplate = [ 'wp_template', 'wp_template_part' ].includes( type );\n\tif ( isTemplate ) {\n\t\tid = post.wp_id;\n\t}\n\n\treturn {\n\t\tpostId: id,\n\t\tpostStatus: status,\n\t\tpostType: type,\n\t\tisSavingPost: isSavingPost(),\n\t};\n} )( BrowserURL );\n"]}
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _i18n = require("@wordpress/i18n");

var _data = require("@wordpress/data");

var _components = require("@wordpress/components");

var _icons = require("@wordpress/icons");

var _store = require("../../../store");

var _blockEditor = require("@wordpress/block-editor");

var _editor = require("@wordpress/editor");

var _deleteTemplate = _interopRequireDefault(require("./delete-template"));

var _editTemplateTitle = _interopRequireDefault(require("./edit-template-title"));

var _templateDescription = _interopRequireDefault(require("./template-description"));

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
function TemplateTitle() {
  const {
    template,
    isEditing,
    title
  } = (0, _data.useSelect)(select => {
    const {
      isEditingTemplate,
      getEditedPostTemplate
    } = select(_store.store);
    const {
      getEditedPostAttribute
    } = select(_editor.store);

    const _isEditing = isEditingTemplate();

    return {
      template: _isEditing ? getEditedPostTemplate() : null,
      isEditing: _isEditing,
      title: getEditedPostAttribute('title') ? getEditedPostAttribute('title') : (0, _i18n.__)('Untitled')
    };
  }, []);
  const {
    clearSelectedBlock
  } = (0, _data.useDispatch)(_blockEditor.store);
  const {
    setIsEditingTemplate
  } = (0, _data.useDispatch)(_store.store);

  if (!isEditing || !template) {
    return null;
  }

  let templateTitle = (0, _i18n.__)('Default');

  if (template !== null && template !== void 0 && template.title) {
    templateTitle = template.title;
  } else if (!!template) {
    templateTitle = template.slug;
  }

  return (0, _element.createElement)("div", {
    className: "edit-post-template-top-area"
  }, (0, _element.createElement)(_components.Button, {
    className: "edit-post-template-post-title",
    isLink: true,
    showTooltip: true,
    label: (0, _i18n.sprintf)(
    /* translators: %s: Title of the referring post, e.g: "Hello World!" */
    (0, _i18n.__)('Edit %s'), title),
    onClick: () => {
      clearSelectedBlock();
      setIsEditingTemplate(false);
    }
  }, title), (0, _element.createElement)(_components.Dropdown, {
    position: "bottom center",
    contentClassName: "edit-post-template-top-area__popover",
    renderToggle: ({
      onToggle
    }) => (0, _element.createElement)(_components.Button, {
      className: "edit-post-template-title",
      isLink: true,
      icon: _icons.chevronDown,
      showTooltip: true,
      onClick: onToggle,
      label: (0, _i18n.__)('Template Options')
    }, templateTitle),
    renderContent: () => (0, _element.createElement)(_element.Fragment, null, template.has_theme_file ? (0, _element.createElement)(_templateDescription.default, null) : (0, _element.createElement)(_editTemplateTitle.default, null), (0, _element.createElement)(_deleteTemplate.default, null))
  }));
}

var _default = TemplateTitle;
exports.default = _default;
//# sourceMappingURL=index.js.map
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = DeleteTemplate;

var _element = require("@wordpress/element");

var _lodash = require("lodash");

var _i18n = require("@wordpress/i18n");

var _components = require("@wordpress/components");

var _blockEditor = require("@wordpress/block-editor");

var _data = require("@wordpress/data");

var _editor = require("@wordpress/editor");

var _coreData = require("@wordpress/core-data");

var _store = require("../../../store");

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
function DeleteTemplate() {
  const {
    clearSelectedBlock
  } = (0, _data.useDispatch)(_blockEditor.store);
  const {
    setIsEditingTemplate
  } = (0, _data.useDispatch)(_store.store);
  const {
    getEditorSettings
  } = (0, _data.useSelect)(_editor.store);
  const {
    updateEditorSettings,
    editPost
  } = (0, _data.useDispatch)(_editor.store);
  const {
    deleteEntityRecord
  } = (0, _data.useDispatch)(_coreData.store);
  const {
    template
  } = (0, _data.useSelect)(select => {
    const {
      isEditingTemplate,
      getEditedPostTemplate
    } = select(_store.store);

    const _isEditing = isEditingTemplate();

    return {
      template: _isEditing ? getEditedPostTemplate() : null
    };
  }, []);

  if (!template || !template.wp_id) {
    return null;
  }

  let templateTitle = template.slug;

  if (template !== null && template !== void 0 && template.title) {
    templateTitle = template.title;
  }

  return (0, _element.createElement)(_components.MenuGroup, {
    className: "edit-post-template-top-area__second-menu-group"
  }, (0, _element.createElement)(_components.MenuItem, {
    className: "edit-post-template-top-area__delete-template-button",
    isDestructive: true,
    variant: "secondary",
    "aria-label": (0, _i18n.__)('Delete template'),
    onClick: () => {
      if ( // eslint-disable-next-line no-alert
      window.confirm((0, _i18n.sprintf)(
      /* translators: %s: template name */
      (0, _i18n.__)('Are you sure you want to delete the %s template? It may be used by other pages or posts.'), templateTitle))) {
        clearSelectedBlock();
        setIsEditingTemplate(false);
        editPost({
          template: ''
        });
        const settings = getEditorSettings();
        const newAvailableTemplates = (0, _lodash.pickBy)(settings.availableTemplates, (_title, id) => {
          return id !== template.slug;
        });
        updateEditorSettings({ ...settings,
          availableTemplates: newAvailableTemplates
        });
        deleteEntityRecord('postType', 'wp_template', template.id);
      }
    }
  }, (0, _i18n.__)('Delete template')));
}
//# sourceMappingURL=delete-template.js.map
{"version":3,"sources":["@wordpress/edit-post/src/components/sidebar/template/index.js"],"names":["PANEL_NAME","TemplatePanel","isEnabled","isOpened","selectedTemplate","availableTemplates","fetchedTemplates","isViewable","template","supportsTemplateMode","canUserCreate","select","isEditorPanelEnabled","isEditorPanelOpened","getEditedPostTemplate","editPostStore","getEditedPostAttribute","getEditorSettings","getCurrentPostType","editorStore","getPostType","getEntityRecords","canUser","coreStore","_isViewable","viewable","_supportsTemplateMode","wpTemplates","newAvailableTemplates","map","slug","title","rendered","templates","toggleEditorPanelOpened","editPost","onTogglePanel","panelTitle","Object","keys","includes","templateSlug","templateName","value","label"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { partial, isEmpty, map, fromPairs } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { __, sprintf } from '@wordpress/i18n';\nimport { useMemo } from '@wordpress/element';\nimport { PanelBody, SelectControl } from '@wordpress/components';\nimport { store as editorStore } from '@wordpress/editor';\nimport { useSelect, useDispatch } from '@wordpress/data';\nimport { store as coreStore } from '@wordpress/core-data';\n\n/**\n * Internal dependencies\n */\nimport PostTemplateActions from './actions';\nimport { store as editPostStore } from '../../../store';\n\n/**\n * Module Constants\n */\nconst PANEL_NAME = 'template';\n\nexport function TemplatePanel() {\n\tconst {\n\t\tisEnabled,\n\t\tisOpened,\n\t\tselectedTemplate,\n\t\tavailableTemplates,\n\t\tfetchedTemplates,\n\t\tisViewable,\n\t\ttemplate,\n\t\tsupportsTemplateMode,\n\t\tcanUserCreate,\n\t} = useSelect( ( select ) => {\n\t\tconst {\n\t\t\tisEditorPanelEnabled,\n\t\t\tisEditorPanelOpened,\n\t\t\tgetEditedPostTemplate,\n\t\t} = select( editPostStore );\n\t\tconst {\n\t\t\tgetEditedPostAttribute,\n\t\t\tgetEditorSettings,\n\t\t\tgetCurrentPostType,\n\t\t} = select( editorStore );\n\t\tconst { getPostType, getEntityRecords, canUser } = select( coreStore );\n\t\tconst _isViewable =\n\t\t\tgetPostType( getCurrentPostType() )?.viewable ?? false;\n\t\tconst _supportsTemplateMode =\n\t\t\tselect( editorStore ).getEditorSettings().supportsTemplateMode &&\n\t\t\t_isViewable;\n\n\t\tconst wpTemplates = getEntityRecords( 'postType', 'wp_template' );\n\n\t\tconst newAvailableTemplates = fromPairs(\n\t\t\t( wpTemplates || [] ).map( ( { slug, title } ) => [\n\t\t\t\tslug,\n\t\t\t\ttitle.rendered,\n\t\t\t] )\n\t\t);\n\n\t\treturn {\n\t\t\tisEnabled: isEditorPanelEnabled( PANEL_NAME ),\n\t\t\tisOpened: isEditorPanelOpened( PANEL_NAME ),\n\t\t\tselectedTemplate: getEditedPostAttribute( 'template' ),\n\t\t\tavailableTemplates: getEditorSettings().availableTemplates,\n\t\t\tfetchedTemplates: newAvailableTemplates,\n\t\t\ttemplate: _supportsTemplateMode && getEditedPostTemplate(),\n\t\t\tisViewable: _isViewable,\n\t\t\tsupportsTemplateMode: _supportsTemplateMode,\n\t\t\tcanUserCreate: canUser( 'create', 'templates' ),\n\t\t};\n\t}, [] );\n\n\tconst templates = useMemo( () => {\n\t\treturn {\n\t\t\t...availableTemplates,\n\t\t\t...fetchedTemplates,\n\t\t};\n\t}, [ availableTemplates, fetchedTemplates ] );\n\n\tconst { toggleEditorPanelOpened } = useDispatch( editPostStore );\n\tconst { editPost } = useDispatch( editorStore );\n\n\tif (\n\t\t! isEnabled ||\n\t\t! isViewable ||\n\t\t( isEmpty( availableTemplates ) &&\n\t\t\t( ! supportsTemplateMode || ! canUserCreate ) )\n\t) {\n\t\treturn null;\n\t}\n\n\tconst onTogglePanel = partial( toggleEditorPanelOpened, PANEL_NAME );\n\n\tlet panelTitle = __( 'Template' );\n\tif ( !! template ) {\n\t\tpanelTitle = sprintf(\n\t\t\t/* translators: %s: template title */\n\t\t\t__( 'Template: %s' ),\n\t\t\ttemplate?.title ?? template.slug\n\t\t);\n\t}\n\n\treturn (\n\t\t<PanelBody\n\t\t\ttitle={ panelTitle }\n\t\t\topened={ isOpened }\n\t\t\tonToggle={ onTogglePanel }\n\t\t>\n\t\t\t<SelectControl\n\t\t\t\thideLabelFromVision\n\t\t\t\tlabel={ __( 'Template:' ) }\n\t\t\t\tvalue={\n\t\t\t\t\tObject.keys( templates ).includes( selectedTemplate )\n\t\t\t\t\t\t? selectedTemplate\n\t\t\t\t\t\t: ''\n\t\t\t\t}\n\t\t\t\tonChange={ ( templateSlug ) => {\n\t\t\t\t\teditPost( {\n\t\t\t\t\t\ttemplate: templateSlug || '',\n\t\t\t\t\t} );\n\t\t\t\t} }\n\t\t\t\toptions={ map( templates, ( templateName, templateSlug ) => ( {\n\t\t\t\t\tvalue: templateSlug,\n\t\t\t\t\tlabel: templateName,\n\t\t\t\t} ) ) }\n\t\t\t/>\n\t\t\t{ canUserCreate && <PostTemplateActions /> }\n\t\t</PanelBody>\n\t);\n}\n\nexport default TemplatePanel;\n"]}
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = VisualEditor;

var _element = require("@wordpress/element");

var _classnames = _interopRequireDefault(require("classnames"));

var _editor = require("@wordpress/editor");

var _blockEditor = require("@wordpress/block-editor");

var _components = require("@wordpress/components");

var _data = require("@wordpress/data");

var _compose = require("@wordpress/compose");

var _icons = require("@wordpress/icons");

var _i18n = require("@wordpress/i18n");

var _blockInspectorButton = _interopRequireDefault(require("./block-inspector-button"));

var _store = require("../../store");

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
function MaybeIframe({
  children,
  contentRef,
  shouldIframe,
  styles,
  style
}) {
  const ref = (0, _blockEditor.__unstableUseMouseMoveTypingReset)();

  if (!shouldIframe) {
    return (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(_blockEditor.__unstableEditorStyles, {
      styles: styles
    }), (0, _element.createElement)(_blockEditor.WritingFlow, {
      ref: contentRef,
      className: "editor-styles-wrapper",
      style: {
        flex: '1',
        ...style
      },
      tabIndex: -1
    }, children));
  }

  return (0, _element.createElement)(_blockEditor.__unstableIframe, {
    head: (0, _element.createElement)(_blockEditor.__unstableEditorStyles, {
      styles: styles
    }),
    ref: ref,
    contentRef: contentRef,
    style: {
      width: '100%',
      height: '100%',
      display: 'block'
    },
    name: "editor-canvas"
  }, children);
}

function VisualEditor({
  styles
}) {
  const {
    deviceType,
    isTemplateMode,
    wrapperBlockName,
    wrapperUniqueId
  } = (0, _data.useSelect)(select => {
    const {
      isEditingTemplate,
      __experimentalGetPreviewDeviceType
    } = select(_store.store);
    const {
      getCurrentPostId,
      getCurrentPostType
    } = select(_editor.store);

    const _isTemplateMode = isEditingTemplate();

    let _wrapperBlockName;

    if (getCurrentPostType() === 'wp_block') {
      _wrapperBlockName = 'core/block';
    } else if (!_isTemplateMode) {
      _wrapperBlockName = 'core/post-content';
    }

    return {
      deviceType: __experimentalGetPreviewDeviceType(),
      isTemplateMode: _isTemplateMode,
      wrapperBlockName: _wrapperBlockName,
      wrapperUniqueId: getCurrentPostId()
    };
  }, []);
  const hasMetaBoxes = (0, _data.useSelect)(select => select(_store.store).hasMetaBoxes(), []);
  const themeSupportsLayout = (0, _data.useSelect)(select => {
    const {
      getSettings
    } = select(_blockEditor.store);
    return getSettings().supportsLayout;
  }, []);
  const {
    clearSelectedBlock
  } = (0, _data.useDispatch)(_blockEditor.store);
  const {
    setIsEditingTemplate
  } = (0, _data.useDispatch)(_store.store);
  const desktopCanvasStyles = {
    // We intentionally omit a 100% height here. The container is a flex item, so the 100% height is granted by default.
    // If a percentage height is present, older browsers such as Safari 13 apply that, but do so incorrectly as the inheritance is buggy.
    width: '100%',
    margin: 0,
    display: 'flex',
    flexFlow: 'column',
    // Default background color so that grey
    // .edit-post-editor-regions__content color doesn't show through.
    background: 'white'
  };
  const templateModeStyles = { ...desktopCanvasStyles,
    borderRadius: '2px 2px 0 0',
    border: '1px solid #ddd',
    borderBottom: 0
  };
  const resizedCanvasStyles = (0, _blockEditor.__experimentalUseResizeCanvas)(deviceType, isTemplateMode);
  const defaultLayout = (0, _blockEditor.useSetting)('layout');
  const previewMode = 'is-' + deviceType.toLowerCase() + '-preview';
  let animatedStyles = isTemplateMode ? templateModeStyles : desktopCanvasStyles;

  if (resizedCanvasStyles) {
    animatedStyles = resizedCanvasStyles;
  }

  let paddingBottom; // Add a constant padding for the typewritter effect. When typing at the
  // bottom, there needs to be room to scroll up.

  if (!hasMetaBoxes && !resizedCanvasStyles && !isTemplateMode) {
    paddingBottom = '40vh';
  }

  const ref = (0, _element.useRef)();
  const contentRef = (0, _compose.useMergeRefs)([ref, (0, _blockEditor.__unstableUseClipboardHandler)(), (0, _blockEditor.__unstableUseCanvasClickRedirect)(), (0, _blockEditor.__unstableUseTypewriter)(), (0, _blockEditor.__unstableUseTypingObserver)(), (0, _blockEditor.__unstableUseBlockSelectionClearer)()]);
  const blockSelectionClearerRef = (0, _blockEditor.__unstableUseBlockSelectionClearer)();
  const [, RecursionProvider] = (0, _blockEditor.__experimentalUseNoRecursiveRenders)(wrapperUniqueId, wrapperBlockName);
  const layout = (0, _element.useMemo)(() => {
    if (isTemplateMode) {
      return {
        type: 'default'
      };
    }

    if (themeSupportsLayout) {
      return defaultLayout;
    }

    return undefined;
  }, [isTemplateMode, themeSupportsLayout, defaultLayout]);
  return (0, _element.createElement)(_blockEditor.BlockTools, {
    __unstableContentRef: ref,
    className: (0, _classnames.default)('edit-post-visual-editor', {
      'is-template-mode': isTemplateMode
    })
  }, (0, _element.createElement)(_editor.VisualEditorGlobalKeyboardShortcuts, null), (0, _element.createElement)(_components.__unstableMotion.div, {
    className: "edit-post-visual-editor__content-area",
    animate: {
      padding: isTemplateMode ? '48px 48px 0' : '0'
    },
    ref: blockSelectionClearerRef
  }, isTemplateMode && (0, _element.createElement)(_components.Button, {
    className: "edit-post-visual-editor__exit-template-mode",
    icon: _icons.arrowLeft,
    onClick: () => {
      clearSelectedBlock();
      setIsEditingTemplate(false);
    }
  }, (0, _i18n.__)('Back')), (0, _element.createElement)(_components.__unstableMotion.div, {
    animate: animatedStyles,
    initial: desktopCanvasStyles,
    className: previewMode
  }, (0, _element.createElement)(MaybeIframe, {
    shouldIframe: isTemplateMode || deviceType === 'Tablet' || deviceType === 'Mobile',
    contentRef: contentRef,
    styles: styles,
    style: {
      paddingBottom
    }
  }, themeSupportsLayout && !isTemplateMode && (0, _element.createElement)(_blockEditor.__experimentalLayoutStyle, {
    selector: ".edit-post-visual-editor__post-title-wrapper, .block-editor-block-list__layout.is-root-container",
    layout: defaultLayout
  }), !isTemplateMode && (0, _element.createElement)("div", {
    className: "edit-post-visual-editor__post-title-wrapper"
  }, (0, _element.createElement)(_editor.PostTitle, null)), (0, _element.createElement)(RecursionProvider, null, (0, _element.createElement)(_blockEditor.BlockList, {
    className: isTemplateMode ? 'wp-site-blocks' : undefined,
    __experimentalLayout: layout
  }))))), (0, _element.createElement)(_blockEditor.__unstableBlockSettingsMenuFirstItem, null, ({
    onClose
  }) => (0, _element.createElement)(_blockInspectorButton.default, {
    onClick: onClose
  })));
}
//# sourceMappingURL=index.js.map
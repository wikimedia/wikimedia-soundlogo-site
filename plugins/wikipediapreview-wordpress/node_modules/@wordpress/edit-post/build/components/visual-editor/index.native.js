"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _blockEditor = require("@wordpress/block-editor");

var _reactNative = require("react-native");

var _header = _interopRequireDefault(require("./header"));

/**
 * WordPress dependencies
 */

/**
 * External dependencies
 */

/**
 * Internal dependencies
 */
class VisualEditor extends _element.Component {
  constructor(props) {
    super(props);
    this.renderHeader = this.renderHeader.bind(this);
    this.keyboardDidShow = this.keyboardDidShow.bind(this);
    this.keyboardDidHide = this.keyboardDidHide.bind(this);
    this.state = {
      isAutoScrollEnabled: true
    };
  }

  componentDidMount() {
    this.keyboardDidShow = _reactNative.Keyboard.addListener('keyboardDidShow', this.keyboardDidShow);
    this.keyboardDidHideListener = _reactNative.Keyboard.addListener('keyboardDidHide', this.keyboardDidHide);
  }

  componentWillUnmount() {
    this.keyboardDidShow.remove();
    this.keyboardDidHideListener.remove();
  }

  keyboardDidShow() {
    this.setState({
      isAutoScrollEnabled: false
    });
  }

  keyboardDidHide() {
    this.setState({
      isAutoScrollEnabled: true
    });
  }

  renderHeader() {
    const {
      setTitleRef
    } = this.props;
    return (0, _element.createElement)(_header.default, {
      setTitleRef: setTitleRef
    });
  }

  render() {
    const {
      safeAreaBottomInset
    } = this.props;
    const {
      isAutoScrollEnabled
    } = this.state;
    return (0, _element.createElement)(_blockEditor.BlockList, {
      header: this.renderHeader,
      safeAreaBottomInset: safeAreaBottomInset,
      autoScroll: isAutoScrollEnabled
    });
  }

}

exports.default = VisualEditor;
//# sourceMappingURL=index.native.js.map
{"version":3,"sources":["@wordpress/plugins/src/components/plugin-context/index.js"],"names":["Consumer","Provider","name","icon","withPluginContext","mapContextToProps","OriginalComponent","props","context"],"mappings":";;;;;;;;;AAGA;;;;AACA;;AAJA;AACA;AACA;AAIA,MAAM;AAAEA,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,IAAyB,4BAAe;AAC7CC,EAAAA,IAAI,EAAE,IADuC;AAE7CC,EAAAA,IAAI,EAAE;AAFuC,CAAf,CAA/B;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMC,iBAAiB,GAAKC,iBAAF,IAChC,yCAA8BC,iBAAF,IAAyB;AACpD,SAASC,KAAF,IACN,4BAAC,QAAD,QACKC,OAAF,IACD,4BAAC,iBAAD,6BACMD,KADN,EAEMF,iBAAiB,CAAEG,OAAF,EAAWD,KAAX,CAFvB,EAFF,CADD;AAUA,CAXD,EAWG,mBAXH,CADM","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { createContext } from '@wordpress/element';\nimport { createHigherOrderComponent } from '@wordpress/compose';\n\nconst { Consumer, Provider } = createContext( {\n\tname: null,\n\ticon: null,\n} );\n\nexport { Provider as PluginContextProvider };\n\n/**\n * A Higher Order Component used to inject Plugin context to the\n * wrapped component.\n *\n * @param {Function} mapContextToProps Function called on every context change,\n *                                     expected to return object of props to\n *                                     merge with the component's own props.\n *\n * @return {WPComponent} Enhanced component with injected context as props.\n */\nexport const withPluginContext = ( mapContextToProps ) =>\n\tcreateHigherOrderComponent( ( OriginalComponent ) => {\n\t\treturn ( props ) => (\n\t\t\t<Consumer>\n\t\t\t\t{ ( context ) => (\n\t\t\t\t\t<OriginalComponent\n\t\t\t\t\t\t{ ...props }\n\t\t\t\t\t\t{ ...mapContextToProps( context, props ) }\n\t\t\t\t\t/>\n\t\t\t\t) }\n\t\t\t</Consumer>\n\t\t);\n\t}, 'withPluginContext' );\n"]}
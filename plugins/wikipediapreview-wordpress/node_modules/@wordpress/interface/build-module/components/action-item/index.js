import _extends from "@babel/runtime/helpers/esm/extends";
import { createElement } from "@wordpress/element";

/**
 * External dependencies
 */
import { isEmpty, noop } from 'lodash';
/**
 * WordPress dependencies
 */

import { ButtonGroup, Button, Slot, Fill } from '@wordpress/components';
import { Children } from '@wordpress/element';

function ActionItemSlot({
  name,
  as: Component = ButtonGroup,
  fillProps = {},
  bubblesVirtually,
  ...props
}) {
  return createElement(Slot, {
    name: name,
    bubblesVirtually: bubblesVirtually,
    fillProps: fillProps
  }, fills => {
    if (isEmpty(Children.toArray(fills))) {
      return null;
    } // Special handling exists for backward compatibility.
    // It ensures that menu items created by plugin authors aren't
    // duplicated with automatically injected menu items coming
    // from pinnable plugin sidebars.
    // @see https://github.com/WordPress/gutenberg/issues/14457


    const initializedByPlugins = [];
    Children.forEach(fills, ({
      props: {
        __unstableExplicitMenuItem,
        __unstableTarget
      }
    }) => {
      if (__unstableTarget && __unstableExplicitMenuItem) {
        initializedByPlugins.push(__unstableTarget);
      }
    });
    const children = Children.map(fills, child => {
      if (!child.props.__unstableExplicitMenuItem && initializedByPlugins.includes(child.props.__unstableTarget)) {
        return null;
      }

      return child;
    });
    return createElement(Component, props, children);
  });
}

function ActionItem({
  name,
  as: Component = Button,
  onClick,
  ...props
}) {
  return createElement(Fill, {
    name: name
  }, ({
    onClick: fpOnClick
  }) => {
    return createElement(Component, _extends({
      onClick: onClick || fpOnClick ? (...args) => {
        (onClick || noop)(...args);
        (fpOnClick || noop)(...args);
      } : undefined
    }, props));
  });
}

ActionItem.Slot = ActionItemSlot;
export default ActionItem;
//# sourceMappingURL=index.js.map
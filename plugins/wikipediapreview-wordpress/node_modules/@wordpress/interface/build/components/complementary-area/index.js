"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classnames = _interopRequireDefault(require("classnames"));

var _components = require("@wordpress/components");

var _data = require("@wordpress/data");

var _i18n = require("@wordpress/i18n");

var _icons = require("@wordpress/icons");

var _viewport = require("@wordpress/viewport");

var _complementaryAreaHeader = _interopRequireDefault(require("../complementary-area-header"));

var _complementaryAreaMoreMenuItem = _interopRequireDefault(require("../complementary-area-more-menu-item"));

var _complementaryAreaToggle = _interopRequireDefault(require("../complementary-area-toggle"));

var _complementaryAreaContext = _interopRequireDefault(require("../complementary-area-context"));

var _pinnedItems = _interopRequireDefault(require("../pinned-items"));

var _store = require("../../store");

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
function ComplementaryAreaSlot({
  scope,
  ...props
}) {
  return (0, _element.createElement)(_components.Slot, (0, _extends2.default)({
    name: `ComplementaryArea/${scope}`
  }, props));
}

function ComplementaryAreaFill({
  scope,
  children,
  className
}) {
  return (0, _element.createElement)(_components.Fill, {
    name: `ComplementaryArea/${scope}`
  }, (0, _element.createElement)("div", {
    className: className
  }, children));
}

function useAdjustComplementaryListener(scope, identifier, activeArea, isActive, isSmall) {
  const previousIsSmall = (0, _element.useRef)(false);
  const shouldOpenWhenNotSmall = (0, _element.useRef)(false);
  const {
    enableComplementaryArea,
    disableComplementaryArea
  } = (0, _data.useDispatch)(_store.store);
  (0, _element.useEffect)(() => {
    // If the complementary area is active and the editor is switching from a big to a small window size.
    if (isActive && isSmall && !previousIsSmall.current) {
      // Disable the complementary area.
      disableComplementaryArea(scope); // Flag the complementary area to be reopened when the window size goes from small to big.

      shouldOpenWhenNotSmall.current = true;
    } else if ( // If there is a flag indicating the complementary area should be enabled when we go from small to big window size
    // and we are going from a small to big window size.
    shouldOpenWhenNotSmall.current && !isSmall && previousIsSmall.current) {
      // Remove the flag indicating the complementary area should be enabled.
      shouldOpenWhenNotSmall.current = false; // Enable the complementary area.

      enableComplementaryArea(scope, identifier);
    } else if ( // If the flag is indicating the current complementary should be reopened but another complementary area becomes active,
    // remove the flag.
    shouldOpenWhenNotSmall.current && activeArea && activeArea !== identifier) {
      shouldOpenWhenNotSmall.current = false;
    }

    if (isSmall !== previousIsSmall.current) {
      previousIsSmall.current = isSmall;
    }
  }, [isActive, isSmall, scope, identifier, activeArea]);
}

function ComplementaryArea({
  children,
  className,
  closeLabel = (0, _i18n.__)('Close plugin'),
  identifier,
  header,
  headerClassName,
  icon,
  isPinnable = true,
  panelClassName,
  scope,
  name,
  smallScreenTitle,
  title,
  toggleShortcut,
  isActiveByDefault,
  showIconLabels = false
}) {
  const {
    isActive,
    isPinned,
    activeArea,
    isSmall,
    isLarge
  } = (0, _data.useSelect)(select => {
    const {
      getActiveComplementaryArea,
      isItemPinned
    } = select(_store.store);

    const _activeArea = getActiveComplementaryArea(scope);

    return {
      isActive: _activeArea === identifier,
      isPinned: isItemPinned(scope, identifier),
      activeArea: _activeArea,
      isSmall: select(_viewport.store).isViewportMatch('< medium'),
      isLarge: select(_viewport.store).isViewportMatch('large')
    };
  }, [identifier, scope]);
  useAdjustComplementaryListener(scope, identifier, activeArea, isActive, isSmall);
  const {
    enableComplementaryArea,
    disableComplementaryArea,
    pinItem,
    unpinItem
  } = (0, _data.useDispatch)(_store.store);
  (0, _element.useEffect)(() => {
    if (isActiveByDefault && activeArea === undefined && !isSmall) {
      enableComplementaryArea(scope, identifier);
    }
  }, [activeArea, isActiveByDefault, scope, identifier, isSmall]);
  return (0, _element.createElement)(_element.Fragment, null, isPinnable && (0, _element.createElement)(_pinnedItems.default, {
    scope: scope
  }, isPinned && (0, _element.createElement)(_complementaryAreaToggle.default, {
    scope: scope,
    identifier: identifier,
    isPressed: isActive && (!showIconLabels || isLarge),
    "aria-expanded": isActive,
    label: title,
    icon: showIconLabels ? _icons.check : icon,
    showTooltip: !showIconLabels,
    variant: showIconLabels ? 'tertiary' : undefined
  })), name && isPinnable && (0, _element.createElement)(_complementaryAreaMoreMenuItem.default, {
    target: name,
    scope: scope,
    icon: icon
  }, title), isActive && (0, _element.createElement)(ComplementaryAreaFill, {
    className: (0, _classnames.default)('interface-complementary-area', className),
    scope: scope
  }, (0, _element.createElement)(_complementaryAreaHeader.default, {
    className: headerClassName,
    closeLabel: closeLabel,
    onClose: () => disableComplementaryArea(scope),
    smallScreenTitle: smallScreenTitle,
    toggleButtonProps: {
      label: closeLabel,
      shortcut: toggleShortcut,
      scope,
      identifier
    }
  }, header || (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)("strong", null, title), isPinnable && (0, _element.createElement)(_components.Button, {
    className: "interface-complementary-area__pin-unpin-item",
    icon: isPinned ? _icons.starFilled : _icons.starEmpty,
    label: isPinned ? (0, _i18n.__)('Unpin from toolbar') : (0, _i18n.__)('Pin to toolbar'),
    onClick: () => (isPinned ? unpinItem : pinItem)(scope, identifier),
    isPressed: isPinned,
    "aria-expanded": isPinned
  }))), (0, _element.createElement)(_components.Panel, {
    className: panelClassName
  }, children)));
}

const ComplementaryAreaWrapped = (0, _complementaryAreaContext.default)(ComplementaryArea);
ComplementaryAreaWrapped.Slot = ComplementaryAreaSlot;
var _default = ComplementaryAreaWrapped;
exports.default = _default;
//# sourceMappingURL=index.js.map
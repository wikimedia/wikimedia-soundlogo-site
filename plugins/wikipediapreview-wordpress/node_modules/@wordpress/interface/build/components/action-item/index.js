"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _lodash = require("lodash");

var _components = require("@wordpress/components");

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */
function ActionItemSlot({
  name,
  as: Component = _components.ButtonGroup,
  fillProps = {},
  bubblesVirtually,
  ...props
}) {
  return (0, _element.createElement)(_components.Slot, {
    name: name,
    bubblesVirtually: bubblesVirtually,
    fillProps: fillProps
  }, fills => {
    if ((0, _lodash.isEmpty)(_element.Children.toArray(fills))) {
      return null;
    } // Special handling exists for backward compatibility.
    // It ensures that menu items created by plugin authors aren't
    // duplicated with automatically injected menu items coming
    // from pinnable plugin sidebars.
    // @see https://github.com/WordPress/gutenberg/issues/14457


    const initializedByPlugins = [];

    _element.Children.forEach(fills, ({
      props: {
        __unstableExplicitMenuItem,
        __unstableTarget
      }
    }) => {
      if (__unstableTarget && __unstableExplicitMenuItem) {
        initializedByPlugins.push(__unstableTarget);
      }
    });

    const children = _element.Children.map(fills, child => {
      if (!child.props.__unstableExplicitMenuItem && initializedByPlugins.includes(child.props.__unstableTarget)) {
        return null;
      }

      return child;
    });

    return (0, _element.createElement)(Component, props, children);
  });
}

function ActionItem({
  name,
  as: Component = _components.Button,
  onClick,
  ...props
}) {
  return (0, _element.createElement)(_components.Fill, {
    name: name
  }, ({
    onClick: fpOnClick
  }) => {
    return (0, _element.createElement)(Component, (0, _extends2.default)({
      onClick: onClick || fpOnClick ? (...args) => {
        (onClick || _lodash.noop)(...args);

        (fpOnClick || _lodash.noop)(...args);
      } : undefined
    }, props));
  });
}

ActionItem.Slot = ActionItemSlot;
var _default = ActionItem;
exports.default = _default;
//# sourceMappingURL=index.js.map
{"version":3,"sources":["@wordpress/block-library/src/query/edit/query-inspector-controls.js"],"names":["stickyOptions","label","value","getTermIdByTermValue","termsMappedByName","termValue","termId","id","termValueLower","toLocaleLowerCase","term","QueryInspectorControls","attributes","query","displayLayout","setQuery","setDisplayLayout","order","orderBy","author","selectedAuthorId","postType","sticky","inherit","showCategories","setShowCategories","showTags","setShowTags","showSticky","setShowSticky","postTypesTaxonomiesMap","postTypesSelectOptions","authorList","categories","tags","select","getEntityRecords","coreStore","termsQuery","per_page","MAX_FETCHED_TERMS","_categories","_tags","postTypeTaxonomies","includes","onPostTypeChange","newValue","updateQuery","categoryIds","tagIds","onTermsChange","terms","queryProperty","newTermValues","termIds","Array","from","reduce","accumulator","mapByName","add","Set","onCategoriesChange","onTagsChange","querySearch","setQuerySearch","search","onChangeDebounced","cancel","getExistingTermsFormTokenValue","taxonomy","termsMapper","category","queryProp","post_tag","requestedTerm","mapById","push","name","type","columns","Math","max","length","names","undefined"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { debounce } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport {\n\tPanelBody,\n\tQueryControls,\n\tTextControl,\n\tFormTokenField,\n\tSelectControl,\n\tRangeControl,\n\tToggleControl,\n\tNotice,\n} from '@wordpress/components';\nimport { __ } from '@wordpress/i18n';\nimport { InspectorControls } from '@wordpress/block-editor';\nimport { useSelect } from '@wordpress/data';\nimport { useEffect, useState, useCallback } from '@wordpress/element';\nimport { store as coreStore } from '@wordpress/core-data';\n\n/**\n * Internal dependencies\n */\nimport { getTermsInfo, usePostTypes } from '../utils';\nimport { MAX_FETCHED_TERMS } from '../constants';\n\nconst stickyOptions = [\n\t{ label: __( 'Include' ), value: '' },\n\t{ label: __( 'Exclude' ), value: 'exclude' },\n\t{ label: __( 'Only' ), value: 'only' },\n];\n\n// Helper function to get the term id based on user input in terms `FormTokenField`.\nconst getTermIdByTermValue = ( termsMappedByName, termValue ) => {\n\t// First we check for exact match by `term.id` or case sensitive `term.name` match.\n\tconst termId = termValue?.id || termsMappedByName[ termValue ]?.id;\n\tif ( termId ) return termId;\n\t/**\n\t * Here we make an extra check for entered terms in a non case sensitive way,\n\t * to match user expectations, due to `FormTokenField` behaviour that shows\n\t * suggestions which are case insensitive.\n\t *\n\t * Although WP tries to discourage users to add terms with the same name (case insensitive),\n\t * it's still possible if you manually change the name, as long as the terms have different slugs.\n\t * In this edge case we always apply the first match from the terms list.\n\t */\n\tconst termValueLower = termValue.toLocaleLowerCase();\n\tfor ( const term in termsMappedByName ) {\n\t\tif ( term.toLocaleLowerCase() === termValueLower ) {\n\t\t\treturn termsMappedByName[ term ].id;\n\t\t}\n\t}\n};\n\nexport default function QueryInspectorControls( {\n\tattributes: { query, displayLayout },\n\tsetQuery,\n\tsetDisplayLayout,\n} ) {\n\tconst {\n\t\torder,\n\t\torderBy,\n\t\tauthor: selectedAuthorId,\n\t\tpostType,\n\t\tsticky,\n\t\tinherit,\n\t} = query;\n\tconst [ showCategories, setShowCategories ] = useState( true );\n\tconst [ showTags, setShowTags ] = useState( true );\n\tconst [ showSticky, setShowSticky ] = useState( postType === 'post' );\n\tconst { postTypesTaxonomiesMap, postTypesSelectOptions } = usePostTypes();\n\tconst { authorList, categories, tags } = useSelect( ( select ) => {\n\t\tconst { getEntityRecords } = select( coreStore );\n\t\tconst termsQuery = { per_page: MAX_FETCHED_TERMS };\n\t\tconst _categories = getEntityRecords(\n\t\t\t'taxonomy',\n\t\t\t'category',\n\t\t\ttermsQuery\n\t\t);\n\t\tconst _tags = getEntityRecords( 'taxonomy', 'post_tag', termsQuery );\n\t\treturn {\n\t\t\tcategories: getTermsInfo( _categories ),\n\t\t\ttags: getTermsInfo( _tags ),\n\t\t\tauthorList: getEntityRecords( 'root', 'user', {\n\t\t\t\tper_page: -1,\n\t\t\t} ),\n\t\t};\n\t}, [] );\n\tuseEffect( () => {\n\t\tif ( ! postTypesTaxonomiesMap ) return;\n\t\tconst postTypeTaxonomies = postTypesTaxonomiesMap[ postType ];\n\t\tsetShowCategories( postTypeTaxonomies.includes( 'category' ) );\n\t\tsetShowTags( postTypeTaxonomies.includes( 'post_tag' ) );\n\t}, [ postType, postTypesTaxonomiesMap ] );\n\tuseEffect( () => {\n\t\tsetShowSticky( postType === 'post' );\n\t}, [ postType ] );\n\tconst onPostTypeChange = ( newValue ) => {\n\t\tconst updateQuery = { postType: newValue };\n\t\tif ( ! postTypesTaxonomiesMap[ newValue ].includes( 'category' ) ) {\n\t\t\tupdateQuery.categoryIds = [];\n\t\t}\n\t\tif ( ! postTypesTaxonomiesMap[ newValue ].includes( 'post_tag' ) ) {\n\t\t\tupdateQuery.tagIds = [];\n\t\t}\n\t\tif ( newValue !== 'post' ) {\n\t\t\tupdateQuery.sticky = '';\n\t\t}\n\t\tsetQuery( updateQuery );\n\t};\n\t// Handles categories and tags changes.\n\tconst onTermsChange = ( terms, queryProperty ) => ( newTermValues ) => {\n\t\tconst termIds = Array.from(\n\t\t\tnewTermValues.reduce( ( accumulator, termValue ) => {\n\t\t\t\tconst termId = getTermIdByTermValue(\n\t\t\t\t\tterms.mapByName,\n\t\t\t\t\ttermValue\n\t\t\t\t);\n\t\t\t\tif ( termId ) accumulator.add( termId );\n\t\t\t\treturn accumulator;\n\t\t\t}, new Set() )\n\t\t);\n\t\tsetQuery( { [ queryProperty ]: termIds } );\n\t};\n\tconst onCategoriesChange = onTermsChange( categories, 'categoryIds' );\n\tconst onTagsChange = onTermsChange( tags, 'tagIds' );\n\n\tconst [ querySearch, setQuerySearch ] = useState( query.search );\n\tconst onChangeDebounced = useCallback(\n\t\tdebounce( () => {\n\t\t\tif ( query.search !== querySearch ) {\n\t\t\t\tsetQuery( { search: querySearch } );\n\t\t\t}\n\t\t}, 250 ),\n\t\t[ querySearch, query.search ]\n\t);\n\n\tuseEffect( () => {\n\t\tonChangeDebounced();\n\t\treturn onChangeDebounced.cancel;\n\t}, [ querySearch, onChangeDebounced ] );\n\n\t// Returns only the existing term ids (categories/tags) in proper\n\t// format to be used in `FormTokenField`. This prevents the component\n\t// from crashing in the editor, when non existing term ids were provided.\n\tconst getExistingTermsFormTokenValue = ( taxonomy ) => {\n\t\tconst termsMapper = {\n\t\t\tcategory: {\n\t\t\t\tqueryProp: 'categoryIds',\n\t\t\t\tterms: categories,\n\t\t\t},\n\t\t\tpost_tag: {\n\t\t\t\tqueryProp: 'tagIds',\n\t\t\t\tterms: tags,\n\t\t\t},\n\t\t};\n\t\tconst requestedTerm = termsMapper[ taxonomy ];\n\t\treturn ( query[ requestedTerm.queryProp ] || [] ).reduce(\n\t\t\t( accumulator, termId ) => {\n\t\t\t\tconst term = requestedTerm.terms.mapById[ termId ];\n\t\t\t\tif ( term ) {\n\t\t\t\t\taccumulator.push( {\n\t\t\t\t\t\tid: termId,\n\t\t\t\t\t\tvalue: term.name,\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t\treturn accumulator;\n\t\t\t},\n\t\t\t[]\n\t\t);\n\t};\n\n\treturn (\n\t\t<InspectorControls>\n\t\t\t<PanelBody title={ __( 'Settings' ) }>\n\t\t\t\t<ToggleControl\n\t\t\t\t\tlabel={ __( 'Inherit query from template' ) }\n\t\t\t\t\thelp={ __(\n\t\t\t\t\t\t'Toggle to use the global query context that is set with the current template, such as an archive or search. Disable to customize the settings independently.'\n\t\t\t\t\t) }\n\t\t\t\t\tchecked={ !! inherit }\n\t\t\t\t\tonChange={ ( value ) => setQuery( { inherit: !! value } ) }\n\t\t\t\t/>\n\t\t\t\t{ ! inherit && (\n\t\t\t\t\t<SelectControl\n\t\t\t\t\t\toptions={ postTypesSelectOptions }\n\t\t\t\t\t\tvalue={ postType }\n\t\t\t\t\t\tlabel={ __( 'Post Type' ) }\n\t\t\t\t\t\tonChange={ onPostTypeChange }\n\t\t\t\t\t\thelp={ __(\n\t\t\t\t\t\t\t'WordPress contains different types of content and they are divided into collections called \"Post Types\". By default there are a few different ones such as blog posts and pages, but plugins could add more.'\n\t\t\t\t\t\t) }\n\t\t\t\t\t/>\n\t\t\t\t) }\n\t\t\t\t{ displayLayout?.type === 'flex' && (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<RangeControl\n\t\t\t\t\t\t\tlabel={ __( 'Columns' ) }\n\t\t\t\t\t\t\tvalue={ displayLayout.columns }\n\t\t\t\t\t\t\tonChange={ ( value ) =>\n\t\t\t\t\t\t\t\tsetDisplayLayout( { columns: value } )\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tmin={ 2 }\n\t\t\t\t\t\t\tmax={ Math.max( 6, displayLayout.columns ) }\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t{ displayLayout.columns > 6 && (\n\t\t\t\t\t\t\t<Notice status=\"warning\" isDismissible={ false }>\n\t\t\t\t\t\t\t\t{ __(\n\t\t\t\t\t\t\t\t\t'This column count exceeds the recommended amount and may cause visual breakage.'\n\t\t\t\t\t\t\t\t) }\n\t\t\t\t\t\t\t</Notice>\n\t\t\t\t\t\t) }\n\t\t\t\t\t</>\n\t\t\t\t) }\n\t\t\t\t{ ! inherit && (\n\t\t\t\t\t<QueryControls\n\t\t\t\t\t\t{ ...{ order, orderBy } }\n\t\t\t\t\t\tonOrderChange={ ( value ) =>\n\t\t\t\t\t\t\tsetQuery( { order: value } )\n\t\t\t\t\t\t}\n\t\t\t\t\t\tonOrderByChange={ ( value ) =>\n\t\t\t\t\t\t\tsetQuery( { orderBy: value } )\n\t\t\t\t\t\t}\n\t\t\t\t\t/>\n\t\t\t\t) }\n\t\t\t\t{ showSticky && (\n\t\t\t\t\t<SelectControl\n\t\t\t\t\t\tlabel={ __( 'Sticky posts' ) }\n\t\t\t\t\t\toptions={ stickyOptions }\n\t\t\t\t\t\tvalue={ sticky }\n\t\t\t\t\t\tonChange={ ( value ) => setQuery( { sticky: value } ) }\n\t\t\t\t\t\thelp={ __(\n\t\t\t\t\t\t\t'Blog posts can be \"stickied\", a feature that places them at the top of the front page of posts, keeping it there until new sticky posts are published.'\n\t\t\t\t\t\t) }\n\t\t\t\t\t/>\n\t\t\t\t) }\n\t\t\t</PanelBody>\n\t\t\t{ ! inherit && (\n\t\t\t\t<PanelBody title={ __( 'Filters' ) }>\n\t\t\t\t\t{ showCategories && categories?.terms?.length > 0 && (\n\t\t\t\t\t\t<FormTokenField\n\t\t\t\t\t\t\tlabel={ __( 'Categories' ) }\n\t\t\t\t\t\t\tvalue={ getExistingTermsFormTokenValue(\n\t\t\t\t\t\t\t\t'category'\n\t\t\t\t\t\t\t) }\n\t\t\t\t\t\t\tsuggestions={ categories.names }\n\t\t\t\t\t\t\tonChange={ onCategoriesChange }\n\t\t\t\t\t\t/>\n\t\t\t\t\t) }\n\t\t\t\t\t{ showTags && tags?.terms?.length > 0 && (\n\t\t\t\t\t\t<FormTokenField\n\t\t\t\t\t\t\tlabel={ __( 'Tags' ) }\n\t\t\t\t\t\t\tvalue={ getExistingTermsFormTokenValue(\n\t\t\t\t\t\t\t\t'post_tag'\n\t\t\t\t\t\t\t) }\n\t\t\t\t\t\t\tsuggestions={ tags.names }\n\t\t\t\t\t\t\tonChange={ onTagsChange }\n\t\t\t\t\t\t/>\n\t\t\t\t\t) }\n\t\t\t\t\t<QueryControls\n\t\t\t\t\t\t{ ...{ selectedAuthorId, authorList } }\n\t\t\t\t\t\tonAuthorChange={ ( value ) =>\n\t\t\t\t\t\t\tsetQuery( {\n\t\t\t\t\t\t\t\tauthor: value !== '' ? +value : undefined,\n\t\t\t\t\t\t\t} )\n\t\t\t\t\t\t}\n\t\t\t\t\t/>\n\t\t\t\t\t<TextControl\n\t\t\t\t\t\tlabel={ __( 'Keyword' ) }\n\t\t\t\t\t\tvalue={ querySearch }\n\t\t\t\t\t\tonChange={ setQuerySearch }\n\t\t\t\t\t/>\n\t\t\t\t</PanelBody>\n\t\t\t) }\n\t\t</InspectorControls>\n\t);\n}\n"]}
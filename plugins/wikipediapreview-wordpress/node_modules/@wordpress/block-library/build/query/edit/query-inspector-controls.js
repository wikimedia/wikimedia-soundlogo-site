"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = QueryInspectorControls;

var _element = require("@wordpress/element");

var _lodash = require("lodash");

var _components = require("@wordpress/components");

var _i18n = require("@wordpress/i18n");

var _blockEditor = require("@wordpress/block-editor");

var _data = require("@wordpress/data");

var _coreData = require("@wordpress/core-data");

var _utils = require("../utils");

var _constants = require("../constants");

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
const stickyOptions = [{
  label: (0, _i18n.__)('Include'),
  value: ''
}, {
  label: (0, _i18n.__)('Exclude'),
  value: 'exclude'
}, {
  label: (0, _i18n.__)('Only'),
  value: 'only'
}]; // Helper function to get the term id based on user input in terms `FormTokenField`.

const getTermIdByTermValue = (termsMappedByName, termValue) => {
  var _termsMappedByName$te;

  // First we check for exact match by `term.id` or case sensitive `term.name` match.
  const termId = (termValue === null || termValue === void 0 ? void 0 : termValue.id) || ((_termsMappedByName$te = termsMappedByName[termValue]) === null || _termsMappedByName$te === void 0 ? void 0 : _termsMappedByName$te.id);
  if (termId) return termId;
  /**
   * Here we make an extra check for entered terms in a non case sensitive way,
   * to match user expectations, due to `FormTokenField` behaviour that shows
   * suggestions which are case insensitive.
   *
   * Although WP tries to discourage users to add terms with the same name (case insensitive),
   * it's still possible if you manually change the name, as long as the terms have different slugs.
   * In this edge case we always apply the first match from the terms list.
   */

  const termValueLower = termValue.toLocaleLowerCase();

  for (const term in termsMappedByName) {
    if (term.toLocaleLowerCase() === termValueLower) {
      return termsMappedByName[term].id;
    }
  }
};

function QueryInspectorControls({
  attributes: {
    query,
    displayLayout
  },
  setQuery,
  setDisplayLayout
}) {
  var _categories$terms, _tags$terms;

  const {
    order,
    orderBy,
    author: selectedAuthorId,
    postType,
    sticky,
    inherit
  } = query;
  const [showCategories, setShowCategories] = (0, _element.useState)(true);
  const [showTags, setShowTags] = (0, _element.useState)(true);
  const [showSticky, setShowSticky] = (0, _element.useState)(postType === 'post');
  const {
    postTypesTaxonomiesMap,
    postTypesSelectOptions
  } = (0, _utils.usePostTypes)();
  const {
    authorList,
    categories,
    tags
  } = (0, _data.useSelect)(select => {
    const {
      getEntityRecords
    } = select(_coreData.store);
    const termsQuery = {
      per_page: _constants.MAX_FETCHED_TERMS
    };

    const _categories = getEntityRecords('taxonomy', 'category', termsQuery);

    const _tags = getEntityRecords('taxonomy', 'post_tag', termsQuery);

    return {
      categories: (0, _utils.getTermsInfo)(_categories),
      tags: (0, _utils.getTermsInfo)(_tags),
      authorList: getEntityRecords('root', 'user', {
        per_page: -1
      })
    };
  }, []);
  (0, _element.useEffect)(() => {
    if (!postTypesTaxonomiesMap) return;
    const postTypeTaxonomies = postTypesTaxonomiesMap[postType];
    setShowCategories(postTypeTaxonomies.includes('category'));
    setShowTags(postTypeTaxonomies.includes('post_tag'));
  }, [postType, postTypesTaxonomiesMap]);
  (0, _element.useEffect)(() => {
    setShowSticky(postType === 'post');
  }, [postType]);

  const onPostTypeChange = newValue => {
    const updateQuery = {
      postType: newValue
    };

    if (!postTypesTaxonomiesMap[newValue].includes('category')) {
      updateQuery.categoryIds = [];
    }

    if (!postTypesTaxonomiesMap[newValue].includes('post_tag')) {
      updateQuery.tagIds = [];
    }

    if (newValue !== 'post') {
      updateQuery.sticky = '';
    }

    setQuery(updateQuery);
  }; // Handles categories and tags changes.


  const onTermsChange = (terms, queryProperty) => newTermValues => {
    const termIds = Array.from(newTermValues.reduce((accumulator, termValue) => {
      const termId = getTermIdByTermValue(terms.mapByName, termValue);
      if (termId) accumulator.add(termId);
      return accumulator;
    }, new Set()));
    setQuery({
      [queryProperty]: termIds
    });
  };

  const onCategoriesChange = onTermsChange(categories, 'categoryIds');
  const onTagsChange = onTermsChange(tags, 'tagIds');
  const [querySearch, setQuerySearch] = (0, _element.useState)(query.search);
  const onChangeDebounced = (0, _element.useCallback)((0, _lodash.debounce)(() => {
    if (query.search !== querySearch) {
      setQuery({
        search: querySearch
      });
    }
  }, 250), [querySearch, query.search]);
  (0, _element.useEffect)(() => {
    onChangeDebounced();
    return onChangeDebounced.cancel;
  }, [querySearch, onChangeDebounced]); // Returns only the existing term ids (categories/tags) in proper
  // format to be used in `FormTokenField`. This prevents the component
  // from crashing in the editor, when non existing term ids were provided.

  const getExistingTermsFormTokenValue = taxonomy => {
    const termsMapper = {
      category: {
        queryProp: 'categoryIds',
        terms: categories
      },
      post_tag: {
        queryProp: 'tagIds',
        terms: tags
      }
    };
    const requestedTerm = termsMapper[taxonomy];
    return (query[requestedTerm.queryProp] || []).reduce((accumulator, termId) => {
      const term = requestedTerm.terms.mapById[termId];

      if (term) {
        accumulator.push({
          id: termId,
          value: term.name
        });
      }

      return accumulator;
    }, []);
  };

  return (0, _element.createElement)(_blockEditor.InspectorControls, null, (0, _element.createElement)(_components.PanelBody, {
    title: (0, _i18n.__)('Settings')
  }, (0, _element.createElement)(_components.ToggleControl, {
    label: (0, _i18n.__)('Inherit query from template'),
    help: (0, _i18n.__)('Toggle to use the global query context that is set with the current template, such as an archive or search. Disable to customize the settings independently.'),
    checked: !!inherit,
    onChange: value => setQuery({
      inherit: !!value
    })
  }), !inherit && (0, _element.createElement)(_components.SelectControl, {
    options: postTypesSelectOptions,
    value: postType,
    label: (0, _i18n.__)('Post Type'),
    onChange: onPostTypeChange,
    help: (0, _i18n.__)('WordPress contains different types of content and they are divided into collections called "Post Types". By default there are a few different ones such as blog posts and pages, but plugins could add more.')
  }), (displayLayout === null || displayLayout === void 0 ? void 0 : displayLayout.type) === 'flex' && (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(_components.RangeControl, {
    label: (0, _i18n.__)('Columns'),
    value: displayLayout.columns,
    onChange: value => setDisplayLayout({
      columns: value
    }),
    min: 2,
    max: Math.max(6, displayLayout.columns)
  }), displayLayout.columns > 6 && (0, _element.createElement)(_components.Notice, {
    status: "warning",
    isDismissible: false
  }, (0, _i18n.__)('This column count exceeds the recommended amount and may cause visual breakage.'))), !inherit && (0, _element.createElement)(_components.QueryControls, {
    order,
    orderBy,
    onOrderChange: value => setQuery({
      order: value
    }),
    onOrderByChange: value => setQuery({
      orderBy: value
    })
  }), showSticky && (0, _element.createElement)(_components.SelectControl, {
    label: (0, _i18n.__)('Sticky posts'),
    options: stickyOptions,
    value: sticky,
    onChange: value => setQuery({
      sticky: value
    }),
    help: (0, _i18n.__)('Blog posts can be "stickied", a feature that places them at the top of the front page of posts, keeping it there until new sticky posts are published.')
  })), !inherit && (0, _element.createElement)(_components.PanelBody, {
    title: (0, _i18n.__)('Filters')
  }, showCategories && (categories === null || categories === void 0 ? void 0 : (_categories$terms = categories.terms) === null || _categories$terms === void 0 ? void 0 : _categories$terms.length) > 0 && (0, _element.createElement)(_components.FormTokenField, {
    label: (0, _i18n.__)('Categories'),
    value: getExistingTermsFormTokenValue('category'),
    suggestions: categories.names,
    onChange: onCategoriesChange
  }), showTags && (tags === null || tags === void 0 ? void 0 : (_tags$terms = tags.terms) === null || _tags$terms === void 0 ? void 0 : _tags$terms.length) > 0 && (0, _element.createElement)(_components.FormTokenField, {
    label: (0, _i18n.__)('Tags'),
    value: getExistingTermsFormTokenValue('post_tag'),
    suggestions: tags.names,
    onChange: onTagsChange
  }), (0, _element.createElement)(_components.QueryControls, {
    selectedAuthorId,
    authorList,
    onAuthorChange: value => setQuery({
      author: value !== '' ? +value : undefined
    })
  }), (0, _element.createElement)(_components.TextControl, {
    label: (0, _i18n.__)('Keyword'),
    value: querySearch,
    onChange: setQuerySearch
  })));
}
//# sourceMappingURL=query-inspector-controls.js.map
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Edit;

var _element = require("@wordpress/element");

var _i18n = require("@wordpress/i18n");

var _components = require("@wordpress/components");

var _icons = require("@wordpress/icons");

var _blockEditor = require("@wordpress/block-editor");

/**
 * WordPress dependencies
 */
const ALLOWED_BLOCKS = ['core/post-comment-content', 'core/post-comment-author', 'core/post-comment-date'];
const TEMPLATE = [['core/post-comment-content'], ['core/post-comment-author']];

function Edit({
  attributes,
  setAttributes
}) {
  const {
    commentId
  } = attributes;
  const [commentIdInput, setCommentIdInput] = (0, _element.useState)(commentId);
  const blockProps = (0, _blockEditor.useBlockProps)();
  const innerBlocksProps = (0, _blockEditor.__experimentalUseInnerBlocksProps)(blockProps, {
    template: TEMPLATE,
    allowedBlocks: ALLOWED_BLOCKS
  });

  if (!commentId) {
    return (0, _element.createElement)("div", blockProps, (0, _element.createElement)(_components.Placeholder, {
      icon: _icons.blockDefault,
      label: (0, _i18n.__)('Post Comment'),
      instructions: (0, _i18n.__)('To show a comment, input the comment ID.')
    }, (0, _element.createElement)(_components.TextControl, {
      value: commentId,
      onChange: val => setCommentIdInput(parseInt(val))
    }), (0, _element.createElement)(_components.Button, {
      variant: "primary",
      onClick: () => {
        setAttributes({
          commentId: commentIdInput
        });
      }
    }, (0, _i18n.__)('Save'))));
  }

  return (0, _element.createElement)("div", innerBlocksProps);
}
//# sourceMappingURL=edit.js.map
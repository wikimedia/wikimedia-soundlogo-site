{"version":3,"sources":["@wordpress/block-library/src/column/save.js"],"names":["save","attributes","verticalAlignment","width","wrapperClasses","style","flexBasis","Number","isFinite","endsWith","multiplier","Math","round","parseFloat","useBlockProps","className"],"mappings":";;;;;;;;;;;AAGA;;AAKA;;AARA;AACA;AACA;;AAGA;AACA;AACA;AAGe,SAASA,IAAT,CAAe;AAAEC,EAAAA;AAAF,CAAf,EAAgC;AAC9C,QAAM;AAAEC,IAAAA,iBAAF;AAAqBC,IAAAA;AAArB,MAA+BF,UAArC;AAEA,QAAMG,cAAc,GAAG,yBAAY;AAClC,KAAG,yBAAyBF,iBAAmB,EAA/C,GAAoDA;AADlB,GAAZ,CAAvB;AAIA,MAAIG,KAAJ;;AAEA,MAAKF,KAAL,EAAa;AACZ;AACA,QAAIG,SAAS,GAAGC,MAAM,CAACC,QAAP,CAAiBL,KAAjB,IAA2BA,KAAK,GAAG,GAAnC,GAAyCA,KAAzD,CAFY,CAGZ;;AACA,QAAK,CAAEI,MAAM,CAACC,QAAP,CAAiBL,KAAjB,CAAF,IAA8BA,KAA9B,aAA8BA,KAA9B,eAA8BA,KAAK,CAAEM,QAAP,CAAiB,GAAjB,CAAnC,EAA4D;AAC3D,YAAMC,UAAU,GAAG,aAAnB,CAD2D,CAE3D;;AACAJ,MAAAA,SAAS,GACRK,IAAI,CAACC,KAAL,CAAYL,MAAM,CAACM,UAAP,CAAmBV,KAAnB,IAA6BO,UAAzC,IACCA,UADD,GAEA,GAHD;AAIA;;AACDL,IAAAA,KAAK,GAAG;AAAEC,MAAAA;AAAF,KAAR;AACA;;AAED,SACC,mCACMQ,2BAAcd,IAAd,CAAoB;AACxBe,IAAAA,SAAS,EAAEX,cADa;AAExBC,IAAAA;AAFwB,GAApB,CADN,EAMC,4BAAC,wBAAD,CAAa,OAAb,OAND,CADD;AAUA","sourcesContent":["/**\n * External dependencies\n */\nimport classnames from 'classnames';\n\n/**\n * WordPress dependencies\n */\nimport { InnerBlocks, useBlockProps } from '@wordpress/block-editor';\n\nexport default function save( { attributes } ) {\n\tconst { verticalAlignment, width } = attributes;\n\n\tconst wrapperClasses = classnames( {\n\t\t[ `is-vertically-aligned-${ verticalAlignment }` ]: verticalAlignment,\n\t} );\n\n\tlet style;\n\n\tif ( width ) {\n\t\t// Numbers are handled for backward compatibility as they can be still provided with templates.\n\t\tlet flexBasis = Number.isFinite( width ) ? width + '%' : width;\n\t\t// In some cases we need to round the width to a shorter float.\n\t\tif ( ! Number.isFinite( width ) && width?.endsWith( '%' ) ) {\n\t\t\tconst multiplier = 1000000000000;\n\t\t\t// Shrink the number back to a reasonable float.\n\t\t\tflexBasis =\n\t\t\t\tMath.round( Number.parseFloat( width ) * multiplier ) /\n\t\t\t\t\tmultiplier +\n\t\t\t\t'%';\n\t\t}\n\t\tstyle = { flexBasis };\n\t}\n\n\treturn (\n\t\t<div\n\t\t\t{ ...useBlockProps.save( {\n\t\t\t\tclassName: wrapperClasses,\n\t\t\t\tstyle,\n\t\t\t} ) }\n\t\t>\n\t\t\t<InnerBlocks.Content />\n\t\t</div>\n\t);\n}\n"]}
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = save;

var _element = require("@wordpress/element");

var _blockEditor = require("@wordpress/block-editor");

var _i18n = require("@wordpress/i18n");

/**
 * WordPress dependencies
 */
function save({
  attributes
}) {
  const {
    href,
    fileId,
    fileName,
    textLinkHref,
    textLinkTarget,
    showDownloadButton,
    downloadButtonText,
    displayPreview,
    previewHeight
  } = attributes;
  const pdfEmbedLabel = _blockEditor.RichText.isEmpty(fileName) ? (0, _i18n.__)('PDF embed') : (0, _i18n.sprintf)(
  /* translators: %s: filename. */
  (0, _i18n.__)('Embed of %s.'), fileName);
  return href && (0, _element.createElement)("div", _blockEditor.useBlockProps.save(), displayPreview && (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)("object", {
    className: "wp-block-file__embed",
    data: href,
    type: "application/pdf",
    style: {
      width: '100%',
      height: `${previewHeight}px`
    },
    "aria-label": pdfEmbedLabel
  })), !_blockEditor.RichText.isEmpty(fileName) && (0, _element.createElement)("a", {
    id: fileId,
    href: textLinkHref,
    target: textLinkTarget,
    rel: textLinkTarget ? 'noreferrer noopener' : undefined
  }, (0, _element.createElement)(_blockEditor.RichText.Content, {
    value: fileName
  })), showDownloadButton && (0, _element.createElement)("a", {
    href: href,
    className: "wp-block-file__button",
    download: true,
    "aria-describedby": fileId
  }, (0, _element.createElement)(_blockEditor.RichText.Content, {
    value: downloadButtonText
  })));
}
//# sourceMappingURL=save.js.map
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = CategoriesEdit;

var _element = require("@wordpress/element");

var _lodash = require("lodash");

var _components = require("@wordpress/components");

var _compose = require("@wordpress/compose");

var _data = require("@wordpress/data");

var _blockEditor = require("@wordpress/block-editor");

var _i18n = require("@wordpress/i18n");

var _icons = require("@wordpress/icons");

var _coreData = require("@wordpress/core-data");

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */
function CategoriesEdit({
  attributes: {
    displayAsDropdown,
    showHierarchy,
    showPostCounts
  },
  setAttributes
}) {
  const selectId = (0, _compose.useInstanceId)(CategoriesEdit, 'blocks-category-select');
  const {
    categories,
    isRequesting
  } = (0, _data.useSelect)(select => {
    const {
      getEntityRecords,
      isResolving
    } = select(_coreData.store);
    const query = {
      per_page: -1,
      hide_empty: true,
      context: 'view'
    };
    return {
      categories: getEntityRecords('taxonomy', 'category', query),
      isRequesting: isResolving('getEntityRecords', ['taxonomy', 'category', query])
    };
  }, []);

  const getCategoriesList = parentId => {
    if (!(categories !== null && categories !== void 0 && categories.length)) {
      return [];
    }

    if (parentId === null) {
      return categories;
    }

    return categories.filter(({
      parent
    }) => parent === parentId);
  };

  const getCategoryListClassName = level => {
    return `wp-block-categories__list wp-block-categories__list-level-${level}`;
  };

  const toggleAttribute = attributeName => newValue => setAttributes({
    [attributeName]: newValue
  });

  const renderCategoryName = name => !name ? (0, _i18n.__)('(Untitled)') : (0, _lodash.unescape)(name).trim();

  const renderCategoryList = () => {
    const parentId = showHierarchy ? 0 : null;
    const categoriesList = getCategoriesList(parentId);
    return (0, _element.createElement)("ul", {
      className: getCategoryListClassName(0)
    }, categoriesList.map(category => renderCategoryListItem(category, 0)));
  };

  const renderCategoryListItem = (category, level) => {
    const childCategories = getCategoriesList(category.id);
    const {
      id,
      link,
      count,
      name
    } = category;
    return (0, _element.createElement)("li", {
      key: id
    }, (0, _element.createElement)("a", {
      href: link,
      target: "_blank",
      rel: "noreferrer noopener"
    }, renderCategoryName(name)), showPostCounts && (0, _element.createElement)("span", {
      className: "wp-block-categories__post-count"
    }, ` (${count})`), showHierarchy && !!childCategories.length && (0, _element.createElement)("ul", {
      className: getCategoryListClassName(level + 1)
    }, childCategories.map(childCategory => renderCategoryListItem(childCategory, level + 1))));
  };

  const renderCategoryDropdown = () => {
    const parentId = showHierarchy ? 0 : null;
    const categoriesList = getCategoriesList(parentId);
    return (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(_components.VisuallyHidden, {
      as: "label",
      htmlFor: selectId
    }, (0, _i18n.__)('Categories')), (0, _element.createElement)("select", {
      id: selectId,
      className: "wp-block-categories__dropdown"
    }, categoriesList.map(category => renderCategoryDropdownItem(category, 0))));
  };

  const renderCategoryDropdownItem = (category, level) => {
    const {
      id,
      count,
      name
    } = category;
    const childCategories = getCategoriesList(id);
    return [(0, _element.createElement)("option", {
      key: id
    }, (0, _lodash.times)(level * 3, () => '\xa0'), renderCategoryName(name), showPostCounts && ` (${count})`), showHierarchy && !!childCategories.length && childCategories.map(childCategory => renderCategoryDropdownItem(childCategory, level + 1))];
  };

  return (0, _element.createElement)("div", (0, _blockEditor.useBlockProps)(), (0, _element.createElement)(_blockEditor.InspectorControls, null, (0, _element.createElement)(_components.PanelBody, {
    title: (0, _i18n.__)('Categories settings')
  }, (0, _element.createElement)(_components.ToggleControl, {
    label: (0, _i18n.__)('Display as dropdown'),
    checked: displayAsDropdown,
    onChange: toggleAttribute('displayAsDropdown')
  }), (0, _element.createElement)(_components.ToggleControl, {
    label: (0, _i18n.__)('Show hierarchy'),
    checked: showHierarchy,
    onChange: toggleAttribute('showHierarchy')
  }), (0, _element.createElement)(_components.ToggleControl, {
    label: (0, _i18n.__)('Show post counts'),
    checked: showPostCounts,
    onChange: toggleAttribute('showPostCounts')
  }))), isRequesting && (0, _element.createElement)(_components.Placeholder, {
    icon: _icons.pin,
    label: (0, _i18n.__)('Categories')
  }, (0, _element.createElement)(_components.Spinner, null)), !isRequesting && (categories === null || categories === void 0 ? void 0 : categories.length) === 0 && (0, _element.createElement)("p", null, (0, _i18n.__)('Your site does not have any posts, so there is nothing to display here at the moment.')), !isRequesting && (categories === null || categories === void 0 ? void 0 : categories.length) > 0 && (displayAsDropdown ? renderCategoryDropdown() : renderCategoryList()));
}
//# sourceMappingURL=edit.js.map
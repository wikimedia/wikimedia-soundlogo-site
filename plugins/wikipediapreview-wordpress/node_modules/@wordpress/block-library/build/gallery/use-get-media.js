"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useGetMedia;

var _element = require("@wordpress/element");

var _data = require("@wordpress/data");

var _coreData = require("@wordpress/core-data");

/**
 * WordPress dependencies
 */

/**
 * Retrieves the extended media info for each gallery image from the store. This is used to
 * determine which image size options are available for the current gallery.
 *
 * @param {Array} innerBlockImages An array of the innerBlock images currently in the gallery.
 *
 * @return {Array} An array of media info options for each gallery image.
 */
function useGetMedia(innerBlockImages) {
  const [currentImageMedia, setCurrentImageMedia] = (0, _element.useState)([]);
  const imageMedia = (0, _data.useSelect)(select => {
    if (!(innerBlockImages !== null && innerBlockImages !== void 0 && innerBlockImages.length)) {
      return currentImageMedia;
    }

    const imageIds = innerBlockImages.map(imageBlock => imageBlock.attributes.id).filter(id => id !== undefined);

    if (imageIds.length === 0) {
      return currentImageMedia;
    }

    const getMedia = select(_coreData.store).getMedia;
    const newImageMedia = imageIds.map(img => {
      return getMedia(img);
    });

    if (newImageMedia.some(img => !img)) {
      return currentImageMedia;
    }

    return newImageMedia;
  }, [innerBlockImages]);

  if ((imageMedia === null || imageMedia === void 0 ? void 0 : imageMedia.length) !== currentImageMedia.length || imageMedia.some(newImage => !currentImageMedia.find(currentImage => currentImage.id === newImage.id))) {
    setCurrentImageMedia(imageMedia);
    return imageMedia;
  }

  return currentImageMedia;
}
//# sourceMappingURL=use-get-media.js.map
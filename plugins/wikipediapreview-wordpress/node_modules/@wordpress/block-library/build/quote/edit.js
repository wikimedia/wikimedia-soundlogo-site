"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = QuoteEdit;

var _element = require("@wordpress/element");

var _classnames = _interopRequireDefault(require("classnames"));

var _i18n = require("@wordpress/i18n");

var _blockEditor = require("@wordpress/block-editor");

var _components = require("@wordpress/components");

var _blocks = require("@wordpress/blocks");

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */
const isWebPlatform = _element.Platform.OS === 'web';

function QuoteEdit({
  attributes,
  setAttributes,
  isSelected,
  mergeBlocks,
  onReplace,
  className,
  insertBlocksAfter,
  style
}) {
  const {
    align,
    value,
    citation
  } = attributes;
  const blockProps = (0, _blockEditor.useBlockProps)({
    className: (0, _classnames.default)(className, {
      [`has-text-align-${align}`]: align
    }),
    style
  });
  return (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(_blockEditor.BlockControls, {
    group: "block"
  }, (0, _element.createElement)(_blockEditor.AlignmentControl, {
    value: align,
    onChange: nextAlign => {
      setAttributes({
        align: nextAlign
      });
    }
  })), (0, _element.createElement)(_components.BlockQuotation, blockProps, (0, _element.createElement)(_blockEditor.RichText, {
    identifier: "value",
    multiline: true,
    value: value,
    onChange: nextValue => setAttributes({
      value: nextValue
    }),
    onMerge: mergeBlocks,
    onRemove: forward => {
      const hasEmptyCitation = !citation || citation.length === 0;

      if (!forward && hasEmptyCitation) {
        onReplace([]);
      }
    },
    "aria-label": (0, _i18n.__)('Quote text'),
    placeholder: // translators: placeholder text used for the quote
    (0, _i18n.__)('Add quote'),
    onReplace: onReplace,
    onSplit: piece => (0, _blocks.createBlock)('core/quote', { ...attributes,
      value: piece
    }),
    __unstableOnSplitMiddle: () => (0, _blocks.createBlock)('core/paragraph'),
    textAlign: align
  }), (!_blockEditor.RichText.isEmpty(citation) || isSelected) && (0, _element.createElement)(_blockEditor.RichText, {
    identifier: "citation",
    tagName: isWebPlatform ? 'cite' : undefined,
    style: {
      display: 'block'
    },
    value: citation,
    onChange: nextCitation => setAttributes({
      citation: nextCitation
    }),
    __unstableMobileNoFocusOnMount: true,
    "aria-label": (0, _i18n.__)('Quote citation text'),
    placeholder: // translators: placeholder text used for the citation
    (0, _i18n.__)('Add citation'),
    className: "wp-block-quote__citation",
    textAlign: align,
    __unstableOnSplitAtEnd: () => insertBlocksAfter((0, _blocks.createBlock)('core/paragraph'))
  })));
}
//# sourceMappingURL=edit.js.map
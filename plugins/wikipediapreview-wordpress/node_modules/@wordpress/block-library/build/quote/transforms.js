"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _blocks = require("@wordpress/blocks");

var _richText = require("@wordpress/rich-text");

/**
 * WordPress dependencies
 */
const transforms = {
  from: [{
    type: 'block',
    isMultiBlock: true,
    blocks: ['core/paragraph'],
    transform: attributes => {
      return (0, _blocks.createBlock)('core/quote', {
        value: (0, _richText.toHTMLString)({
          value: (0, _richText.join)(attributes.map(({
            content
          }) => (0, _richText.create)({
            html: content
          })), '\u2028'),
          multilineTag: 'p'
        }),
        anchor: attributes.anchor
      });
    }
  }, {
    type: 'block',
    blocks: ['core/heading'],
    transform: ({
      content,
      anchor
    }) => {
      return (0, _blocks.createBlock)('core/quote', {
        value: `<p>${content}</p>`,
        anchor
      });
    }
  }, {
    type: 'block',
    blocks: ['core/pullquote'],
    transform: ({
      value,
      citation,
      anchor
    }) => (0, _blocks.createBlock)('core/quote', {
      value,
      citation,
      anchor
    })
  }, {
    type: 'prefix',
    prefix: '>',
    transform: content => {
      return (0, _blocks.createBlock)('core/quote', {
        value: `<p>${content}</p>`
      });
    }
  }, {
    type: 'raw',
    isMatch: node => {
      const isParagraphOrSingleCite = (() => {
        let hasCitation = false;
        return child => {
          // Child is a paragraph.
          if (child.nodeName === 'P') {
            return true;
          } // Child is a cite and no other cite child exists before it.


          if (!hasCitation && child.nodeName === 'CITE') {
            hasCitation = true;
            return true;
          }
        };
      })();

      return node.nodeName === 'BLOCKQUOTE' && // The quote block can only handle multiline paragraph
      // content with an optional cite child.
      Array.from(node.childNodes).every(isParagraphOrSingleCite);
    },
    schema: ({
      phrasingContentSchema
    }) => ({
      blockquote: {
        children: {
          p: {
            children: phrasingContentSchema
          },
          cite: {
            children: phrasingContentSchema
          }
        }
      }
    })
  }],
  to: [{
    type: 'block',
    blocks: ['core/paragraph'],
    transform: ({
      value,
      citation
    }) => {
      const paragraphs = [];

      if (value && value !== '<p></p>') {
        paragraphs.push(...(0, _richText.split)((0, _richText.create)({
          html: value,
          multilineTag: 'p'
        }), '\u2028').map(piece => (0, _blocks.createBlock)('core/paragraph', {
          content: (0, _richText.toHTMLString)({
            value: piece
          })
        })));
      }

      if (citation && citation !== '<p></p>') {
        paragraphs.push((0, _blocks.createBlock)('core/paragraph', {
          content: citation
        }));
      }

      if (paragraphs.length === 0) {
        return (0, _blocks.createBlock)('core/paragraph', {
          content: ''
        });
      }

      return paragraphs;
    }
  }, {
    type: 'block',
    blocks: ['core/heading'],
    transform: ({
      value,
      citation,
      ...attrs
    }) => {
      // If there is no quote content, use the citation as the
      // content of the resulting heading. A nonexistent citation
      // will result in an empty heading.
      if (value === '<p></p>') {
        return (0, _blocks.createBlock)('core/heading', {
          content: citation
        });
      }

      const pieces = (0, _richText.split)((0, _richText.create)({
        html: value,
        multilineTag: 'p'
      }), '\u2028');
      const headingBlock = (0, _blocks.createBlock)('core/heading', {
        content: (0, _richText.toHTMLString)({
          value: pieces[0]
        })
      });

      if (!citation && pieces.length === 1) {
        return headingBlock;
      }

      const quotePieces = pieces.slice(1);
      const quoteBlock = (0, _blocks.createBlock)('core/quote', { ...attrs,
        citation,
        value: (0, _richText.toHTMLString)({
          value: quotePieces.length ? (0, _richText.join)(pieces.slice(1), '\u2028') : (0, _richText.create)(),
          multilineTag: 'p'
        })
      });
      return [headingBlock, quoteBlock];
    }
  }, {
    type: 'block',
    blocks: ['core/pullquote'],
    transform: ({
      value,
      citation,
      anchor
    }) => {
      return (0, _blocks.createBlock)('core/pullquote', {
        value,
        citation,
        anchor
      });
    }
  }]
};
var _default = transforms;
exports.default = _default;
//# sourceMappingURL=transforms.js.map
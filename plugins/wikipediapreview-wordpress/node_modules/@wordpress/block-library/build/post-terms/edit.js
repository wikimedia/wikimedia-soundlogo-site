"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = PostTermsEdit;

var _element = require("@wordpress/element");

var _classnames = _interopRequireDefault(require("classnames"));

var _blockEditor = require("@wordpress/block-editor");

var _components = require("@wordpress/components");

var _data = require("@wordpress/data");

var _i18n = require("@wordpress/i18n");

var _coreData = require("@wordpress/core-data");

var _usePostTerms = _interopRequireDefault(require("./use-post-terms"));

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
function PostTermsEdit({
  attributes,
  context,
  setAttributes
}) {
  var _selectedTerm$labels;

  const {
    term,
    textAlign,
    separator
  } = attributes;
  const {
    postId,
    postType
  } = context;
  const selectedTerm = (0, _data.useSelect)(select => {
    var _taxonomy$visibility;

    if (!term) return {};
    const {
      getTaxonomy
    } = select(_coreData.store);
    const taxonomy = getTaxonomy(term);
    return taxonomy !== null && taxonomy !== void 0 && (_taxonomy$visibility = taxonomy.visibility) !== null && _taxonomy$visibility !== void 0 && _taxonomy$visibility.publicly_queryable ? taxonomy : {};
  }, [term]);
  const {
    postTerms,
    hasPostTerms,
    isLoading
  } = (0, _usePostTerms.default)({
    postId,
    postType,
    term: selectedTerm
  });
  const hasPost = postId && postType;
  const blockProps = (0, _blockEditor.useBlockProps)({
    className: (0, _classnames.default)({
      [`has-text-align-${textAlign}`]: textAlign,
      [`taxonomy-${term}`]: term
    })
  });

  if (!hasPost) {
    return (0, _element.createElement)("div", blockProps, (0, _i18n.__)('Post Terms block: post not found.'));
  }

  if (!term) {
    return (0, _element.createElement)("div", blockProps, (0, _i18n.__)('Post Terms block: no term specified.'));
  }

  return (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(_blockEditor.BlockControls, null, (0, _element.createElement)(_blockEditor.AlignmentToolbar, {
    value: textAlign,
    onChange: nextAlign => {
      setAttributes({
        textAlign: nextAlign
      });
    }
  })), (0, _element.createElement)(_blockEditor.InspectorControls, {
    __experimentalGroup: "advanced"
  }, (0, _element.createElement)(_components.TextControl, {
    autoComplete: "off",
    label: (0, _i18n.__)('Separator'),
    value: separator || '',
    onChange: nextValue => {
      setAttributes({
        separator: nextValue
      });
    },
    help: (0, _i18n.__)('Enter character(s) used to separate terms.')
  })), (0, _element.createElement)("div", blockProps, isLoading && (0, _element.createElement)(_components.Spinner, null), !isLoading && hasPostTerms && postTerms.map(postTerm => (0, _element.createElement)("a", {
    key: postTerm.id,
    href: postTerm.link,
    onClick: event => event.preventDefault()
  }, postTerm.name)).reduce((prev, curr) => (0, _element.createElement)(_element.Fragment, null, prev, (0, _element.createElement)("span", {
    className: "wp-block-post-terms__separator"
  }, separator || ' '), curr)), !isLoading && !hasPostTerms && ((selectedTerm === null || selectedTerm === void 0 ? void 0 : (_selectedTerm$labels = selectedTerm.labels) === null || _selectedTerm$labels === void 0 ? void 0 : _selectedTerm$labels.no_terms) || (0, _i18n.__)('Term items not found.'))));
}
//# sourceMappingURL=edit.js.map
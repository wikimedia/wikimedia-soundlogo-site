"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = usePostTerms;

var _coreData = require("@wordpress/core-data");

var _data = require("@wordpress/data");

/**
 * WordPress dependencies
 */
function usePostTerms({
  postId,
  postType,
  term
}) {
  var _term$visibility2;

  const {
    rest_base: restBase,
    slug
  } = term;
  const [termIds] = (0, _coreData.useEntityProp)('postType', postType, restBase, postId);
  return (0, _data.useSelect)(select => {
    var _term$visibility;

    const visible = term === null || term === void 0 ? void 0 : (_term$visibility = term.visibility) === null || _term$visibility === void 0 ? void 0 : _term$visibility.publicly_queryable;

    if (!visible) {
      return {
        postTerms: [],
        _isLoading: false,
        hasPostTerms: false
      };
    }

    if (!termIds) {
      // Waiting for post terms to be fetched.
      return {
        isLoading: true
      };
    }

    if (!termIds.length) {
      return {
        isLoading: false
      };
    }

    const {
      getEntityRecords,
      isResolving
    } = select(_coreData.store);
    const taxonomyArgs = ['taxonomy', slug, {
      include: termIds,
      context: 'view'
    }];
    const terms = getEntityRecords(...taxonomyArgs);

    const _isLoading = isResolving('getEntityRecords', taxonomyArgs);

    return {
      postTerms: terms,
      isLoading: _isLoading,
      hasPostTerms: !!(terms !== null && terms !== void 0 && terms.length)
    };
  }, [termIds, term === null || term === void 0 ? void 0 : (_term$visibility2 = term.visibility) === null || _term$visibility2 === void 0 ? void 0 : _term$visibility2.publicly_queryable]);
}
//# sourceMappingURL=use-post-terms.js.map
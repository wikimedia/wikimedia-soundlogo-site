{"version":3,"sources":["@wordpress/block-library/src/post-terms/use-post-terms.js"],"names":["usePostTerms","postId","postType","term","rest_base","restBase","slug","termIds","select","visible","visibility","publicly_queryable","postTerms","_isLoading","hasPostTerms","isLoading","length","getEntityRecords","isResolving","coreStore","taxonomyArgs","include","context","terms"],"mappings":";;;;;;;AAGA;;AACA;;AAJA;AACA;AACA;AAIe,SAASA,YAAT,CAAuB;AAAEC,EAAAA,MAAF;AAAUC,EAAAA,QAAV;AAAoBC,EAAAA;AAApB,CAAvB,EAAoD;AAAA;;AAClE,QAAM;AAAEC,IAAAA,SAAS,EAAEC,QAAb;AAAuBC,IAAAA;AAAvB,MAAgCH,IAAtC;AACA,QAAM,CAAEI,OAAF,IAAc,6BAAe,UAAf,EAA2BL,QAA3B,EAAqCG,QAArC,EAA+CJ,MAA/C,CAApB;AACA,SAAO,qBACJO,MAAF,IAAc;AAAA;;AACb,UAAMC,OAAO,GAAGN,IAAH,aAAGA,IAAH,2CAAGA,IAAI,CAAEO,UAAT,qDAAG,iBAAkBC,kBAAlC;;AACA,QAAK,CAAEF,OAAP,EAAiB;AAChB,aAAO;AACNG,QAAAA,SAAS,EAAE,EADL;AAENC,QAAAA,UAAU,EAAE,KAFN;AAGNC,QAAAA,YAAY,EAAE;AAHR,OAAP;AAKA;;AACD,QAAK,CAAEP,OAAP,EAAiB;AAChB;AACA,aAAO;AAAEQ,QAAAA,SAAS,EAAE;AAAb,OAAP;AACA;;AACD,QAAK,CAAER,OAAO,CAACS,MAAf,EAAwB;AACvB,aAAO;AAAED,QAAAA,SAAS,EAAE;AAAb,OAAP;AACA;;AACD,UAAM;AAAEE,MAAAA,gBAAF;AAAoBC,MAAAA;AAApB,QAAoCV,MAAM,CAAEW,eAAF,CAAhD;AACA,UAAMC,YAAY,GAAG,CACpB,UADoB,EAEpBd,IAFoB,EAGpB;AACCe,MAAAA,OAAO,EAAEd,OADV;AAECe,MAAAA,OAAO,EAAE;AAFV,KAHoB,CAArB;AAQA,UAAMC,KAAK,GAAGN,gBAAgB,CAAE,GAAGG,YAAL,CAA9B;;AACA,UAAMP,UAAU,GAAGK,WAAW,CAAE,kBAAF,EAAsBE,YAAtB,CAA9B;;AACA,WAAO;AACNR,MAAAA,SAAS,EAAEW,KADL;AAENR,MAAAA,SAAS,EAAEF,UAFL;AAGNC,MAAAA,YAAY,EAAE,CAAC,EAAES,KAAF,aAAEA,KAAF,eAAEA,KAAK,CAAEP,MAAT;AAHT,KAAP;AAKA,GAjCK,EAkCN,CAAET,OAAF,EAAWJ,IAAX,aAAWA,IAAX,4CAAWA,IAAI,CAAEO,UAAjB,sDAAW,kBAAkBC,kBAA7B,CAlCM,CAAP;AAoCA","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { useEntityProp, store as coreStore } from '@wordpress/core-data';\nimport { useSelect } from '@wordpress/data';\n\nexport default function usePostTerms( { postId, postType, term } ) {\n\tconst { rest_base: restBase, slug } = term;\n\tconst [ termIds ] = useEntityProp( 'postType', postType, restBase, postId );\n\treturn useSelect(\n\t\t( select ) => {\n\t\t\tconst visible = term?.visibility?.publicly_queryable;\n\t\t\tif ( ! visible ) {\n\t\t\t\treturn {\n\t\t\t\t\tpostTerms: [],\n\t\t\t\t\t_isLoading: false,\n\t\t\t\t\thasPostTerms: false,\n\t\t\t\t};\n\t\t\t}\n\t\t\tif ( ! termIds ) {\n\t\t\t\t// Waiting for post terms to be fetched.\n\t\t\t\treturn { isLoading: true };\n\t\t\t}\n\t\t\tif ( ! termIds.length ) {\n\t\t\t\treturn { isLoading: false };\n\t\t\t}\n\t\t\tconst { getEntityRecords, isResolving } = select( coreStore );\n\t\t\tconst taxonomyArgs = [\n\t\t\t\t'taxonomy',\n\t\t\t\tslug,\n\t\t\t\t{\n\t\t\t\t\tinclude: termIds,\n\t\t\t\t\tcontext: 'view',\n\t\t\t\t},\n\t\t\t];\n\t\t\tconst terms = getEntityRecords( ...taxonomyArgs );\n\t\t\tconst _isLoading = isResolving( 'getEntityRecords', taxonomyArgs );\n\t\t\treturn {\n\t\t\t\tpostTerms: terms,\n\t\t\t\tisLoading: _isLoading,\n\t\t\t\thasPostTerms: !! terms?.length,\n\t\t\t};\n\t\t},\n\t\t[ termIds, term?.visibility?.publicly_queryable ]\n\t);\n}\n"]}
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = TemplatePartEdit;

var _element = require("@wordpress/element");

var _data = require("@wordpress/data");

var _blockEditor = require("@wordpress/block-editor");

var _components = require("@wordpress/components");

var _i18n = require("@wordpress/i18n");

var _coreData = require("@wordpress/core-data");

var _placeholder = _interopRequireDefault(require("./placeholder"));

var _selection = _interopRequireDefault(require("./selection"));

var _advancedControls = require("./advanced-controls");

var _innerBlocks = _interopRequireDefault(require("./inner-blocks"));

var _createTemplatePartId = require("./utils/create-template-part-id");

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
function TemplatePartEdit({
  attributes,
  setAttributes,
  clientId
}) {
  const {
    slug,
    theme,
    tagName,
    layout = {}
  } = attributes;
  const templatePartId = (0, _createTemplatePartId.createTemplatePartId)(theme, slug);
  const [hasAlreadyRendered, RecursionProvider] = (0, _blockEditor.__experimentalUseNoRecursiveRenders)(templatePartId); // Set the postId block attribute if it did not exist,
  // but wait until the inner blocks have loaded to allow
  // new edits to trigger this.

  const {
    isResolved,
    innerBlocks,
    isMissing,
    defaultWrapper,
    area,
    enableSelection,
    hasResolvedReplacements
  } = (0, _data.useSelect)(select => {
    var _select$__experimenta;

    const {
      getEditedEntityRecord,
      getEntityRecords,
      hasFinishedResolution
    } = select(_coreData.store);
    const {
      getBlocks
    } = select(_blockEditor.store);
    const getEntityArgs = ['postType', 'wp_template_part', templatePartId];
    const entityRecord = templatePartId ? getEditedEntityRecord(...getEntityArgs) : null;

    const _area = (entityRecord === null || entityRecord === void 0 ? void 0 : entityRecord.area) || attributes.area; // Check whether other entities exist for switching/selection.


    const availableReplacementArgs = ['postType', 'wp_template_part', _area && 'uncategorized' !== _area && {
      area: _area
    }];
    const matchingReplacements = getEntityRecords(...availableReplacementArgs);

    const _enableSelection = templatePartId ? (matchingReplacements === null || matchingReplacements === void 0 ? void 0 : matchingReplacements.length) > 1 : (matchingReplacements === null || matchingReplacements === void 0 ? void 0 : matchingReplacements.length) > 0;

    const hasResolvedEntity = templatePartId ? hasFinishedResolution('getEditedEntityRecord', getEntityArgs) : false; // FIXME: @wordpress/block-library should not depend on @wordpress/editor.
    // Blocks can be loaded into a *non-post* block editor.
    // eslint-disable-next-line @wordpress/data-no-store-string-literals

    const defaultWrapperElement = (_select$__experimenta = select('core/editor').__experimentalGetDefaultTemplatePartAreas().find(({
      area: value
    }) => value === _area)) === null || _select$__experimenta === void 0 ? void 0 : _select$__experimenta.area_tag;
    return {
      innerBlocks: getBlocks(clientId),
      isResolved: hasResolvedEntity,
      isMissing: hasResolvedEntity && !entityRecord,
      defaultWrapper: defaultWrapperElement || 'div',
      area: _area,
      enableSelection: _enableSelection,
      hasResolvedReplacements: hasFinishedResolution('getEntityRecords', availableReplacementArgs)
    };
  }, [templatePartId, clientId]);
  const blockProps = (0, _blockEditor.useBlockProps)();
  const isPlaceholder = !slug;
  const isEntityAvailable = !isPlaceholder && !isMissing && isResolved;
  const TagName = tagName || defaultWrapper; // We don't want to render a missing state if we have any inner blocks.
  // A new template part is automatically created if we have any inner blocks but no entity.

  if (innerBlocks.length === 0 && (slug && !theme || slug && isMissing)) {
    return (0, _element.createElement)(TagName, blockProps, (0, _element.createElement)(_blockEditor.Warning, null, (0, _i18n.sprintf)(
    /* translators: %s: Template part slug */
    (0, _i18n.__)('Template part has been deleted or is unavailable: %s'), slug)));
  }

  if (isEntityAvailable && hasAlreadyRendered) {
    return (0, _element.createElement)(TagName, blockProps, (0, _element.createElement)(_blockEditor.Warning, null, (0, _i18n.__)('Block cannot be rendered inside itself.')));
  }

  return (0, _element.createElement)(RecursionProvider, null, (0, _element.createElement)(_advancedControls.TemplatePartAdvancedControls, {
    tagName: tagName,
    setAttributes: setAttributes,
    isEntityAvailable: isEntityAvailable,
    templatePartId: templatePartId,
    defaultWrapper: defaultWrapper
  }), isPlaceholder && (0, _element.createElement)(TagName, blockProps, (0, _element.createElement)(_placeholder.default, {
    area: attributes.area,
    clientId: clientId,
    setAttributes: setAttributes,
    enableSelection: enableSelection,
    hasResolvedReplacements: hasResolvedReplacements
  })), isEntityAvailable && enableSelection && (0, _element.createElement)(_blockEditor.BlockControls, null, (0, _element.createElement)(_components.ToolbarGroup, {
    className: "wp-block-template-part__block-control-group"
  }, (0, _element.createElement)(_components.Dropdown, {
    className: "wp-block-template-part__preview-dropdown-button",
    contentClassName: "wp-block-template-part__preview-dropdown-content",
    position: "bottom right left",
    renderToggle: ({
      isOpen,
      onToggle
    }) => (0, _element.createElement)(_components.ToolbarButton, {
      "aria-expanded": isOpen,
      onClick: onToggle
    }, (0, _i18n.__)('Replace')),
    renderContent: ({
      onClose
    }) => (0, _element.createElement)(_selection.default, {
      setAttributes: setAttributes,
      onClose: onClose,
      area: area,
      templatePartId: templatePartId
    })
  }))), isEntityAvailable && (0, _element.createElement)(_innerBlocks.default, {
    clientId: clientId,
    tagName: TagName,
    blockProps: blockProps,
    postId: templatePartId,
    hasInnerBlocks: innerBlocks.length > 0,
    layout: layout
  }), !isPlaceholder && !isResolved && (0, _element.createElement)(TagName, blockProps, (0, _element.createElement)(_components.Spinner, null)));
}
//# sourceMappingURL=index.js.map
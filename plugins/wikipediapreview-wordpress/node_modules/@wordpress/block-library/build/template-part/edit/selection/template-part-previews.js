"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = TemplatePartPreviews;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _lodash = require("lodash");

var _data = require("@wordpress/data");

var _blocks = require("@wordpress/blocks");

var _keycodes = require("@wordpress/keycodes");

var _i18n = require("@wordpress/i18n");

var _blockEditor = require("@wordpress/block-editor");

var _components = require("@wordpress/components");

var _compose = require("@wordpress/compose");

var _notices = require("@wordpress/notices");

var _coreData = require("@wordpress/core-data");

var _createTemplatePartId = require("../utils/create-template-part-id");

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
function getAreaGroupTitle(areaLabel) {
  return (0, _i18n.sprintf)( // Translators: %s for the area the template part is assigned to (Header, Footer, General, etc.)
  (0, _i18n.__)('Area: %s'), areaLabel);
}

function PreviewPlaceholder() {
  return (0, _element.createElement)("div", {
    className: "wp-block-template-part__selection-preview-item is-placeholder",
    tabIndex: 0
  });
}

function TemplatePartItem({
  templatePart,
  setAttributes,
  onClose,
  composite
}) {
  const {
    slug,
    theme,
    title: {
      rendered: title
    }
  } = templatePart; // The 'raw' property is not defined for a brief period in the save cycle.
  // The fallback prevents an error in the parse function while saving.

  const content = templatePart.content.raw || '';
  const blocks = (0, _element.useMemo)(() => (0, _blocks.parse)(content), [content]);
  const {
    createSuccessNotice
  } = (0, _data.useDispatch)(_notices.store);
  const onClick = (0, _element.useCallback)(() => {
    setAttributes({
      slug,
      theme,
      area: undefined
    });
    createSuccessNotice((0, _i18n.sprintf)(
    /* translators: %s: template part title. */
    (0, _i18n.__)('Template Part "%s" inserted.'), title || slug), {
      type: 'snackbar'
    });
    onClose();
  }, [slug, theme]);
  return (0, _element.createElement)(_components.__unstableCompositeItem, (0, _extends2.default)({
    as: "div",
    className: "wp-block-template-part__selection-preview-item",
    role: "option",
    onClick: onClick,
    onKeyDown: event => {
      if (_keycodes.ENTER === event.keyCode || _keycodes.SPACE === event.keyCode) {
        onClick();
      }
    },
    tabIndex: 0,
    "aria-label": title || slug
  }, composite), (0, _element.createElement)(_blockEditor.BlockPreview, {
    blocks: blocks
  }), (0, _element.createElement)("div", {
    className: "wp-block-template-part__selection-preview-item-title"
  }, title || slug));
}

function PanelGroup({
  title,
  icon,
  children
}) {
  return (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)("div", {
    className: "wp-block-template-part__selection-panel-group-header"
  }, (0, _element.createElement)("span", {
    className: "wp-block-template-part__selection-panel-group-title"
  }, title), (0, _element.createElement)(_components.Icon, {
    icon: icon
  })), (0, _element.createElement)("div", {
    className: "wp-block-template-part__selection-panel-group-content"
  }, children));
}

function TemplatePartsByArea({
  templateParts,
  setAttributes,
  onClose,
  composite,
  area = 'uncategorized',
  labelsByArea
}) {
  const {
    templatePartsByArea,
    templatePartsToShow
  } = (0, _element.useMemo)(() => {
    const _templatePartsToShow = templateParts.filter(templatePart => 'uncategorized' === area || templatePart.area === area) || [];

    const _templatePartsByArea = Object.values((0, _lodash.groupBy)(_templatePartsToShow, 'area'));

    const orderedTemplatePartsToShow = (0, _lodash.flatten)(_templatePartsToShow);
    return {
      templatePartsByArea: _templatePartsByArea,
      templatePartsToShow: orderedTemplatePartsToShow
    };
  }, [templateParts, area]);
  const currentShownTPs = (0, _compose.useAsyncList)(templatePartsToShow);

  if (!templatePartsToShow.length) {
    return (0, _element.createElement)(PanelGroup, {
      title: getAreaGroupTitle(labelsByArea[area] || labelsByArea.uncategorized)
    }, (0, _i18n.sprintf)( // Translators: %s for the template part variation ("Header", "Footer", "Template Part").
    'There is no other %s available. If you are looking for another type of template part, try searching for it using the input above.', area && area !== 'uncategorized' ? labelsByArea[area] || area : (0, _i18n.__)('Template Part')));
  }

  return templatePartsByArea.map(templatePartList => {
    return (0, _element.createElement)(PanelGroup, {
      key: templatePartList[0].area,
      title: getAreaGroupTitle(labelsByArea[templatePartList[0].area] || labelsByArea.uncategorized)
    }, templatePartList.map(templatePart => {
      return currentShownTPs.includes(templatePart) ? (0, _element.createElement)(TemplatePartItem, {
        key: templatePart.id,
        templatePart: templatePart,
        setAttributes: setAttributes,
        onClose: onClose,
        composite: composite
      }) : (0, _element.createElement)(PreviewPlaceholder, {
        key: templatePart.id
      });
    }));
  });
}

function TemplatePartSearchResults({
  templateParts,
  setAttributes,
  filterValue,
  onClose,
  composite,
  labelsByArea
}) {
  const {
    filteredTPs,
    groupedResults
  } = (0, _element.useMemo)(() => {
    // Filter based on value.
    // Remove diacritics and convert to lowercase to normalize.
    const normalizedFilterValue = (0, _lodash.deburr)(filterValue).toLowerCase();
    const searchResults = templateParts.filter(({
      title: {
        rendered: title
      },
      area
    }) => (0, _lodash.deburr)(title).toLowerCase().includes(normalizedFilterValue) || // Since diacritics can be used in theme names, remove them for the comparison.
    (0, _lodash.deburr)(labelsByArea[area]).toLowerCase().includes(normalizedFilterValue)); // Order based on value location.

    searchResults.sort((a, b) => {
      // First prioritize index found in title.
      // Deburr for diacritics.
      const indexInTitleA = (0, _lodash.deburr)(a.title.rendered).toLowerCase().indexOf(normalizedFilterValue);
      const indexInTitleB = (0, _lodash.deburr)(b.title.rendered).toLowerCase().indexOf(normalizedFilterValue);

      if (indexInTitleA !== -1 && indexInTitleB !== -1) {
        return indexInTitleA - indexInTitleB;
      } else if (indexInTitleA !== -1) {
        return -1;
      } else if (indexInTitleB !== -1) {
        return 1;
      } // Second prioritize index found in area.


      return (0, _lodash.deburr)(labelsByArea[a.area]).toLowerCase().indexOf(normalizedFilterValue) - (0, _lodash.deburr)(labelsByArea[b.area]).toLowerCase().indexOf(normalizedFilterValue);
    }); // Group filtered results together if their neighbors share the same area.
    // This helps not show redundant panel groups side by side in the results.

    const _groupedResults = [];

    for (let i = 0; i < searchResults.length; i++) {
      if (i !== 0 && searchResults[i].area === searchResults[i - 1].area) {
        _groupedResults[_groupedResults.length - 1].push(searchResults[i]);
      } else {
        _groupedResults.push([searchResults[i]]);
      }
    }

    return {
      filteredTPs: searchResults,
      groupedResults: _groupedResults
    };
  }, [filterValue, templateParts]);
  const currentShownTPs = (0, _compose.useAsyncList)(filteredTPs);
  return groupedResults.map(group => (0, _element.createElement)(PanelGroup, {
    key: group[0].id,
    title: getAreaGroupTitle(labelsByArea[group[0].area] || labelsByArea.uncategorized)
  }, group.map(templatePart => currentShownTPs.includes(templatePart) ? (0, _element.createElement)(TemplatePartItem, {
    key: templatePart.id,
    templatePart: templatePart,
    setAttributes: setAttributes,
    onClose: onClose,
    composite: composite
  }) : (0, _element.createElement)(PreviewPlaceholder, {
    key: templatePart.id
  }))));
}

function TemplatePartPreviews({
  setAttributes,
  filterValue,
  onClose,
  area,
  templatePartId
}) {
  const composite = (0, _components.__unstableUseCompositeState)();
  const {
    templateParts,
    labelsByArea
  } = (0, _data.useSelect)(select => {
    const _templateParts = (select(_coreData.store).getEntityRecords('postType', 'wp_template_part', {
      per_page: -1
    }) || []).filter(templatePart => (0, _createTemplatePartId.createTemplatePartId)(templatePart.theme, templatePart.slug) !== templatePartId); // FIXME: @wordpress/block-library should not depend on @wordpress/editor.
    // Blocks can be loaded into a *non-post* block editor.
    // eslint-disable-next-line @wordpress/data-no-store-string-literals


    const definedAreas = select('core/editor').__experimentalGetDefaultTemplatePartAreas();

    const _labelsByArea = {};
    definedAreas.forEach(item => {
      _labelsByArea[item.area] = item.label;
    });
    return {
      templateParts: _templateParts,
      labelsByArea: _labelsByArea
    };
  }, []);

  if (!templateParts || !templateParts.length) {
    return (0, _element.createElement)(PanelGroup, null, (0, _i18n.__)('There are no existing template parts to select.'));
  }

  if (filterValue) {
    return (0, _element.createElement)(_components.__unstableComposite, (0, _extends2.default)({}, composite, {
      role: "listbox",
      "aria-label": (0, _i18n.__)('List of template parts')
    }), (0, _element.createElement)(TemplatePartSearchResults, {
      templateParts: templateParts,
      setAttributes: setAttributes,
      filterValue: filterValue,
      onClose: onClose,
      composite: composite,
      labelsByArea: labelsByArea
    }));
  }

  return (0, _element.createElement)(_components.__unstableComposite, (0, _extends2.default)({}, composite, {
    role: "listbox",
    "aria-label": (0, _i18n.__)('List of template parts')
  }), (0, _element.createElement)(TemplatePartsByArea, {
    templateParts: templateParts,
    setAttributes: setAttributes,
    onClose: onClose,
    composite: composite,
    area: area,
    labelsByArea: labelsByArea
  }));
}
//# sourceMappingURL=template-part-previews.js.map
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = TemplatePartPlaceholder;

var _element = require("@wordpress/element");

var _lodash = require("lodash");

var _i18n = require("@wordpress/i18n");

var _data = require("@wordpress/data");

var _components = require("@wordpress/components");

var _blocks = require("@wordpress/blocks");

var _coreData = require("@wordpress/core-data");

var _selection = _interopRequireDefault(require("../selection"));

var _patternsSetup = _interopRequireDefault(require("./patterns-setup"));

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
const PLACEHOLDER_STEPS = {
  initial: 1,
  patterns: 2
};

function TemplatePartPlaceholder({
  area,
  clientId,
  setAttributes,
  enableSelection,
  hasResolvedReplacements
}) {
  const {
    saveEntityRecord
  } = (0, _data.useDispatch)(_coreData.store);
  const [step, setStep] = (0, _element.useState)(PLACEHOLDER_STEPS.initial);
  const {
    areaIcon,
    areaLabel
  } = (0, _data.useSelect)(select => {
    // FIXME: @wordpress/block-library should not depend on @wordpress/editor.
    // Blocks can be loaded into a *non-post* block editor.
    // eslint-disable-next-line @wordpress/data-no-store-string-literals
    const definedAreas = select('core/editor').__experimentalGetDefaultTemplatePartAreas();

    const selectedArea = (0, _lodash.find)(definedAreas, {
      area
    });
    const defaultArea = (0, _lodash.find)(definedAreas, {
      area: 'uncategorized'
    });
    return {
      areaIcon: (selectedArea === null || selectedArea === void 0 ? void 0 : selectedArea.icon) || (defaultArea === null || defaultArea === void 0 ? void 0 : defaultArea.icon),
      areaLabel: (selectedArea === null || selectedArea === void 0 ? void 0 : selectedArea.label) || (0, _i18n.__)('Template Part')
    };
  }, [area]);
  const onCreate = (0, _element.useCallback)(async (startingBlocks = [], title = (0, _i18n.__)('Untitled Template Part')) => {
    // If we have `area` set from block attributes, means an exposed
    // block variation was inserted. So add this prop to the template
    // part entity on creation. Afterwards remove `area` value from
    // block attributes.
    const record = {
      title,
      slug: 'template-part',
      content: (0, _blocks.serialize)(startingBlocks),
      // `area` is filterable on the server and defaults to `UNCATEGORIZED`
      // if provided value is not allowed.
      area
    };
    const templatePart = await saveEntityRecord('postType', 'wp_template_part', record);
    setAttributes({
      slug: templatePart.slug,
      theme: templatePart.theme,
      area: undefined
    });
  }, [setAttributes, area]);
  return (0, _element.createElement)(_element.Fragment, null, step === PLACEHOLDER_STEPS.initial && (0, _element.createElement)(_components.Placeholder, {
    icon: areaIcon,
    label: areaLabel,
    instructions: enableSelection ? (0, _i18n.sprintf)( // Translators: %s as template part area title ("Header", "Footer", etc.).
    'Choose an existing %s or create a new one.', areaLabel.toLowerCase()) : (0, _i18n.sprintf)( // Translators: %s as template part area title ("Header", "Footer", etc.).
    'Create a new %s.', areaLabel.toLowerCase())
  }, !hasResolvedReplacements ? (0, _element.createElement)(_components.Spinner, null) : (0, _element.createElement)(_components.Dropdown, {
    contentClassName: "wp-block-template-part__placeholder-preview-dropdown-content",
    position: "bottom right left",
    renderToggle: ({
      isOpen,
      onToggle
    }) => (0, _element.createElement)(_element.Fragment, null, enableSelection && (0, _element.createElement)(_components.Button, {
      variant: "primary",
      onClick: onToggle,
      "aria-expanded": isOpen
    }, (0, _i18n.__)('Choose existing')), (0, _element.createElement)(_components.Button, {
      variant: enableSelection ? 'tertiary' : 'primary',
      onClick: () => setStep(PLACEHOLDER_STEPS.patterns)
    }, (0, _i18n.sprintf)( // Translators: %s as template part area title ("Header", "Footer", etc.).
    'New %s', areaLabel.toLowerCase()))),
    renderContent: ({
      onClose
    }) => (0, _element.createElement)(_selection.default, {
      setAttributes: setAttributes,
      onClose: onClose,
      area: area
    })
  })), step === PLACEHOLDER_STEPS.patterns && (0, _element.createElement)(_patternsSetup.default, {
    area: area,
    areaLabel: areaLabel,
    areaIcon: areaIcon,
    onCreate: onCreate,
    clientId: clientId,
    resetPlaceholder: () => setStep(PLACEHOLDER_STEPS.initial)
  }));
}
//# sourceMappingURL=index.js.map
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _i18n = require("@wordpress/i18n");

var _icons = require("@wordpress/icons");

var _coreData = require("@wordpress/core-data");

var _data = require("@wordpress/data");

/**
 * WordPress dependencies
 */
const fallbackVariations = [{
  name: 'header',
  icon: _icons.header,
  title: (0, _i18n.__)('Header'),
  description: (0, _i18n.__)('The Header template defines a page area that typically contains a title, logo, and main navigation.'),
  attributes: {
    area: 'header'
  },
  scope: ['inserter']
}, {
  name: 'footer',
  icon: _icons.footer,
  title: (0, _i18n.__)('Footer'),
  description: (0, _i18n.__)('The Footer template defines a page area that typically contains site credits, social links, or any other combination of blocks.'),
  attributes: {
    area: 'footer'
  },
  scope: ['inserter']
}];
fallbackVariations.forEach(variation => {
  if (variation.isActive) return;

  variation.isActive = (blockAttributes, variationAttributes) => {
    const {
      area,
      theme,
      slug
    } = blockAttributes; // We first check the `area` block attribute which is set during insertion.
    // This property is removed on the creation of a template part.

    if (area) return area === variationAttributes.area; // Find a matching variation from the created template part
    // by checking the entity's `area` property.

    if (!slug) return false;
    const entity = (0, _data.select)(_coreData.store).getEntityRecord('postType', 'wp_template_part', `${theme}//${slug}`);
    return (entity === null || entity === void 0 ? void 0 : entity.area) === variationAttributes.area;
  };
});
var _default = fallbackVariations;
exports.default = _default;
//# sourceMappingURL=fallback-variations.js.map
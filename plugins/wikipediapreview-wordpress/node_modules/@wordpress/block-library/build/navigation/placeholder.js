"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _blocks = require("@wordpress/blocks");

var _components = require("@wordpress/components");

var _i18n = require("@wordpress/i18n");

var _icons = require("@wordpress/icons");

var _useNavigationEntities = _interopRequireDefault(require("./use-navigation-entities"));

var _placeholderPreview = _interopRequireDefault(require("./placeholder-preview"));

var _menuItemsToBlocks = _interopRequireDefault(require("./menu-items-to-blocks"));

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
function NavigationPlaceholder({
  onCreate
}, ref) {
  const [selectedMenu, setSelectedMenu] = (0, _element.useState)();
  const [isCreatingFromMenu, setIsCreatingFromMenu] = (0, _element.useState)(false);
  const {
    isResolvingPages,
    menus,
    isResolvingMenus,
    menuItems,
    hasResolvedMenuItems,
    hasPages,
    hasMenus
  } = (0, _useNavigationEntities.default)(selectedMenu);
  const isLoading = isResolvingPages || isResolvingMenus;
  const createFromMenu = (0, _element.useCallback)(() => {
    const {
      innerBlocks: blocks
    } = (0, _menuItemsToBlocks.default)(menuItems);
    const selectNavigationBlock = true;
    onCreate(blocks, selectNavigationBlock);
  }, [menuItems, _menuItemsToBlocks.default, onCreate]);

  const onCreateFromMenu = () => {
    // If we have menu items, create the block right away.
    if (hasResolvedMenuItems) {
      createFromMenu();
      return;
    } // Otherwise, create the block when resolution finishes.


    setIsCreatingFromMenu(true);
  };

  const onCreateEmptyMenu = () => {
    onCreate([]);
  };

  const onCreateAllPages = () => {
    const block = [(0, _blocks.createBlock)('core/page-list')];
    const selectNavigationBlock = true;
    onCreate(block, selectNavigationBlock);
  };

  (0, _element.useEffect)(() => {
    // If the user selected a menu but we had to wait for menu items to
    // finish resolving, then create the block once resolution finishes.
    if (isCreatingFromMenu && hasResolvedMenuItems) {
      createFromMenu();
      setIsCreatingFromMenu(false);
    }
  }, [isCreatingFromMenu, hasResolvedMenuItems]);
  const toggleProps = {
    variant: 'primary',
    className: 'wp-block-navigation-placeholder__actions__dropdown'
  };
  return (0, _element.createElement)(_components.Placeholder, {
    className: "wp-block-navigation-placeholder"
  }, (0, _element.createElement)(_placeholderPreview.default, null), (0, _element.createElement)("div", {
    className: "wp-block-navigation-placeholder__controls"
  }, isLoading && (0, _element.createElement)("div", {
    ref: ref
  }, (0, _element.createElement)(_components.Spinner, null)), !isLoading && (0, _element.createElement)("div", {
    ref: ref,
    className: "wp-block-navigation-placeholder__actions"
  }, (0, _element.createElement)("div", {
    className: "wp-block-navigation-placeholder__actions__indicator"
  }, (0, _element.createElement)(_icons.Icon, {
    icon: _icons.navigation
  }), " ", (0, _i18n.__)('Navigation')), hasMenus ? (0, _element.createElement)(_components.DropdownMenu, {
    text: (0, _i18n.__)('Add existing menu'),
    icon: _icons.chevronDown,
    toggleProps: toggleProps
  }, ({
    onClose
  }) => (0, _element.createElement)(_components.MenuGroup, null, menus.map(menu => {
    return (0, _element.createElement)(_components.MenuItem, {
      onClick: () => {
        setSelectedMenu(menu.id);
        onCreateFromMenu();
      },
      onClose: onClose,
      key: menu.id
    }, menu.name);
  }))) : undefined, hasPages ? (0, _element.createElement)(_components.Button, {
    variant: hasMenus ? 'tertiary' : 'primary',
    onClick: onCreateAllPages
  }, (0, _i18n.__)('Add all pages')) : undefined, (0, _element.createElement)(_components.Button, {
    variant: "tertiary",
    onClick: onCreateEmptyMenu
  }, (0, _i18n.__)('Start empty')))));
}

var _default = (0, _element.forwardRef)(NavigationPlaceholder);

exports.default = _default;
//# sourceMappingURL=placeholder.js.map
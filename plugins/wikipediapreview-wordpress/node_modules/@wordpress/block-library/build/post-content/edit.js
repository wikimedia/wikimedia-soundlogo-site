"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = PostContentEdit;

var _element = require("@wordpress/element");

var _i18n = require("@wordpress/i18n");

var _data = require("@wordpress/data");

var _blockEditor = require("@wordpress/block-editor");

var _coreData = require("@wordpress/core-data");

var _hooks = require("../utils/hooks");

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
function ReadOnlyContent({
  userCanEdit,
  postType,
  postId
}) {
  const [,, content] = (0, _coreData.useEntityProp)('postType', postType, 'content', postId);
  const blockProps = (0, _blockEditor.useBlockProps)();
  return content !== null && content !== void 0 && content.protected && !userCanEdit ? (0, _element.createElement)("div", blockProps, (0, _element.createElement)(_blockEditor.Warning, null, (0, _i18n.__)('This content is password protected.'))) : (0, _element.createElement)("div", blockProps, (0, _element.createElement)(_element.RawHTML, {
    key: "html"
  }, content === null || content === void 0 ? void 0 : content.rendered));
}

function EditableContent({
  layout,
  context = {}
}) {
  const {
    postType,
    postId
  } = context;
  const themeSupportsLayout = (0, _data.useSelect)(select => {
    var _getSettings;

    const {
      getSettings
    } = select(_blockEditor.store);
    return (_getSettings = getSettings()) === null || _getSettings === void 0 ? void 0 : _getSettings.supportsLayout;
  }, []);
  const defaultLayout = (0, _blockEditor.useSetting)('layout') || {};
  const usedLayout = !!layout && layout.inherit ? defaultLayout : layout;
  const [blocks, onInput, onChange] = (0, _coreData.useEntityBlockEditor)('postType', postType, {
    id: postId
  });
  const props = (0, _blockEditor.__experimentalUseInnerBlocksProps)((0, _blockEditor.useBlockProps)({
    className: 'entry-content'
  }), {
    value: blocks,
    onInput,
    onChange,
    __experimentalLayout: themeSupportsLayout ? usedLayout : undefined
  });
  return (0, _element.createElement)("div", props);
}

function Content(props) {
  const {
    context: {
      queryId,
      postType,
      postId
    } = {}
  } = props;
  const isDescendentOfQueryLoop = !!queryId;
  const userCanEdit = (0, _hooks.useCanEditEntity)('postType', postType, postId);
  const isEditable = userCanEdit && !isDescendentOfQueryLoop;
  return isEditable ? (0, _element.createElement)(EditableContent, props) : (0, _element.createElement)(ReadOnlyContent, {
    userCanEdit: userCanEdit,
    postType: postType,
    postId: postId
  });
}

function Placeholder() {
  const blockProps = (0, _blockEditor.useBlockProps)();
  return (0, _element.createElement)("div", blockProps, (0, _element.createElement)("p", null, (0, _i18n.__)('This is a placeholder for post content.')));
}

function RecursionError() {
  const blockProps = (0, _blockEditor.useBlockProps)();
  return (0, _element.createElement)("div", blockProps, (0, _element.createElement)(_blockEditor.Warning, null, (0, _i18n.__)('Block cannot be rendered inside itself.')));
}

function PostContentEdit({
  context,
  attributes
}) {
  const {
    postId: contextPostId,
    postType: contextPostType
  } = context;
  const {
    layout = {}
  } = attributes;
  const [hasAlreadyRendered, RecursionProvider] = (0, _blockEditor.__experimentalUseNoRecursiveRenders)(contextPostId);

  if (contextPostId && contextPostType && hasAlreadyRendered) {
    return (0, _element.createElement)(RecursionError, null);
  }

  return (0, _element.createElement)(RecursionProvider, null, contextPostId && contextPostType ? (0, _element.createElement)(Content, {
    context: context,
    layout: layout
  }) : (0, _element.createElement)(Placeholder, null));
}
//# sourceMappingURL=edit.js.map
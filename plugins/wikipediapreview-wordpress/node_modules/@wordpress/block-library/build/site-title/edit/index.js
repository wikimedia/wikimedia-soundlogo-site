"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = SiteTitleEdit;

var _element = require("@wordpress/element");

var _classnames = _interopRequireDefault(require("classnames"));

var _data = require("@wordpress/data");

var _coreData = require("@wordpress/core-data");

var _i18n = require("@wordpress/i18n");

var _blockEditor = require("@wordpress/block-editor");

var _components = require("@wordpress/components");

var _blocks = require("@wordpress/blocks");

var _htmlEntities = require("@wordpress/html-entities");

var _levelToolbar = _interopRequireDefault(require("./level-toolbar"));

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
function SiteTitleEdit({
  attributes,
  setAttributes,
  insertBlocksAfter
}) {
  const {
    level,
    textAlign,
    isLink,
    linkTarget
  } = attributes;
  const [title, setTitle] = (0, _coreData.useEntityProp)('root', 'site', 'title');
  const {
    canUserEdit,
    readOnlyTitle
  } = (0, _data.useSelect)(select => {
    const {
      canUser,
      getEntityRecord
    } = select(_coreData.store);
    const siteData = getEntityRecord('root', '__unstableBase');
    return {
      canUserEdit: canUser('update', 'settings'),
      readOnlyTitle: (0, _htmlEntities.decodeEntities)(siteData === null || siteData === void 0 ? void 0 : siteData.name)
    };
  }, []);
  const TagName = level === 0 ? 'p' : `h${level}`;
  const blockProps = (0, _blockEditor.useBlockProps)({
    className: (0, _classnames.default)({
      [`has-text-align-${textAlign}`]: textAlign,
      'wp-block-site-title__placeholder': !canUserEdit && !readOnlyTitle
    })
  });
  const siteTitleContent = canUserEdit ? (0, _element.createElement)(TagName, blockProps, (0, _element.createElement)(_blockEditor.RichText, {
    tagName: isLink ? 'a' : 'span',
    href: isLink ? '#site-title-pseudo-link' : undefined,
    "aria-label": (0, _i18n.__)('Site title text'),
    placeholder: (0, _i18n.__)('Write site titleâ€¦'),
    value: title,
    onChange: setTitle,
    allowedFormats: [],
    disableLineBreaks: true,
    __unstableOnSplitAtEnd: () => insertBlocksAfter((0, _blocks.createBlock)((0, _blocks.getDefaultBlockName)()))
  })) : (0, _element.createElement)(TagName, blockProps, isLink ? (0, _element.createElement)("a", {
    href: "#site-title-pseudo-link",
    onClick: event => event.preventDefault()
  }, readOnlyTitle || (0, _i18n.__)('Site Title placeholder')) : (0, _element.createElement)("span", null, title || readOnlyTitle));
  return (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(_blockEditor.BlockControls, {
    group: "block"
  }, (0, _element.createElement)(_levelToolbar.default, {
    level: level,
    onChange: newLevel => setAttributes({
      level: newLevel
    })
  }), (0, _element.createElement)(_blockEditor.AlignmentControl, {
    value: textAlign,
    onChange: nextAlign => {
      setAttributes({
        textAlign: nextAlign
      });
    }
  })), (0, _element.createElement)(_blockEditor.InspectorControls, null, (0, _element.createElement)(_components.PanelBody, {
    title: (0, _i18n.__)('Link settings')
  }, (0, _element.createElement)(_components.ToggleControl, {
    label: (0, _i18n.__)('Make title link to home'),
    onChange: () => setAttributes({
      isLink: !isLink
    }),
    checked: isLink
  }), isLink && (0, _element.createElement)(_components.ToggleControl, {
    label: (0, _i18n.__)('Open in new tab'),
    onChange: value => setAttributes({
      linkTarget: value ? '_blank' : '_self'
    }),
    checked: linkTarget === '_blank'
  }))), siteTitleContent);
}
//# sourceMappingURL=index.js.map
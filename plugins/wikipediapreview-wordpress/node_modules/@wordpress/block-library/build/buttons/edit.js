"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _classnames = _interopRequireDefault(require("classnames"));

var _blockEditor = require("@wordpress/block-editor");

var _data = require("@wordpress/data");

var _button = require("../button");

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
const ALLOWED_BLOCKS = [_button.name];
const LAYOUT = {
  type: 'default',
  alignments: []
};
const VERTICAL_JUSTIFY_CONTROLS = ['left', 'center', 'right'];
const HORIZONTAL_JUSTIFY_CONTROLS = ['left', 'center', 'right', 'space-between'];

function ButtonsEdit({
  attributes: {
    contentJustification,
    orientation
  },
  setAttributes
}) {
  const blockProps = (0, _blockEditor.useBlockProps)({
    className: (0, _classnames.default)({
      [`is-content-justification-${contentJustification}`]: contentJustification,
      'is-vertical': orientation === 'vertical'
    })
  });
  const preferredStyle = (0, _data.useSelect)(select => {
    var _preferredStyleVariat;

    const preferredStyleVariations = select(_blockEditor.store).getSettings().__experimentalPreferredStyleVariations;

    return preferredStyleVariations === null || preferredStyleVariations === void 0 ? void 0 : (_preferredStyleVariat = preferredStyleVariations.value) === null || _preferredStyleVariat === void 0 ? void 0 : _preferredStyleVariat[_button.name];
  }, []);
  const innerBlocksProps = (0, _blockEditor.__experimentalUseInnerBlocksProps)(blockProps, {
    allowedBlocks: ALLOWED_BLOCKS,
    template: [[_button.name, {
      className: preferredStyle && `is-style-${preferredStyle}`
    }]],
    orientation,
    __experimentalLayout: LAYOUT,
    templateInsertUpdatesSelection: true
  });
  const justifyControls = orientation === 'vertical' ? VERTICAL_JUSTIFY_CONTROLS : HORIZONTAL_JUSTIFY_CONTROLS;
  return (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(_blockEditor.BlockControls, {
    group: "block",
    __experimentalShareWithChildBlocks: true
  }, (0, _element.createElement)(_blockEditor.JustifyContentControl, {
    allowedControls: justifyControls,
    value: contentJustification,
    onChange: value => setAttributes({
      contentJustification: value
    }),
    popoverProps: {
      position: 'bottom right',
      isAlternate: true
    }
  })), (0, _element.createElement)("div", innerBlocksProps));
}

var _default = ButtonsEdit;
exports.default = _default;
//# sourceMappingURL=edit.js.map
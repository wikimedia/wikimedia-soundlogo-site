"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.enhanceNavigationLinkVariations = enhanceNavigationLinkVariations;

var _icons = require("@wordpress/icons");

var _fallbackVariations = _interopRequireDefault(require("./fallback-variations"));

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
function getIcon(variationName) {
  switch (variationName) {
    case 'post':
      return _icons.postTitle;

    case 'page':
      return _icons.page;

    case 'tag':
      return _icons.tag;

    case 'category':
      return _icons.category;

    default:
      return _icons.customPostType;
  }
}

function enhanceNavigationLinkVariations(settings, name) {
  if (name !== 'core/navigation-link') {
    return settings;
  } // Fallback handling may be deleted after supported WP ranges understand the `variations`
  // property when passed to register_block_type in index.php


  if (!settings.variations) {
    return { ...settings,
      variations: _fallbackVariations.default
    };
  } // Otherwise decorate server passed variations with an icon and isActive function


  if (settings.variations) {
    const isActive = (blockAttributes, variationAttributes) => {
      return blockAttributes.type === variationAttributes.type;
    };

    const variations = settings.variations.map(variation => {
      return { ...variation,
        ...(!variation.icon && {
          icon: getIcon(variation.name)
        }),
        ...(!variation.isActive && {
          isActive
        })
      };
    });
    return { ...settings,
      variations
    };
  }

  return settings;
}
//# sourceMappingURL=hooks.js.map
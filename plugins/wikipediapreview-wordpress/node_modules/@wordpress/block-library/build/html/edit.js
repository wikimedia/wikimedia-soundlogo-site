"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = HTMLEdit;

var _element = require("@wordpress/element");

var _i18n = require("@wordpress/i18n");

var _blockEditor = require("@wordpress/block-editor");

var _components = require("@wordpress/components");

var _data = require("@wordpress/data");

/**
 * WordPress dependencies
 */
function HTMLEdit({
  attributes,
  setAttributes,
  isSelected
}) {
  const [isPreview, setIsPreview] = (0, _element.useState)();
  const styles = (0, _data.useSelect)(select => {
    // Default styles used to unset some of the styles
    // that might be inherited from the editor style.
    const defaultStyles = `
			html,body,:root {
				margin: 0 !important;
				padding: 0 !important;
				overflow: visible !important;
				min-height: auto !important;
			}
		`;
    return [defaultStyles, ...(0, _blockEditor.transformStyles)(select(_blockEditor.store).getSettings().styles)];
  }, []);

  function switchToPreview() {
    setIsPreview(true);
  }

  function switchToHTML() {
    setIsPreview(false);
  }

  return (0, _element.createElement)("div", (0, _blockEditor.useBlockProps)({
    className: 'block-library-html__edit'
  }), (0, _element.createElement)(_blockEditor.BlockControls, null, (0, _element.createElement)(_components.ToolbarGroup, null, (0, _element.createElement)(_components.ToolbarButton, {
    className: "components-tab-button",
    isPressed: !isPreview,
    onClick: switchToHTML
  }, (0, _element.createElement)("span", null, "HTML")), (0, _element.createElement)(_components.ToolbarButton, {
    className: "components-tab-button",
    isPressed: isPreview,
    onClick: switchToPreview
  }, (0, _element.createElement)("span", null, (0, _i18n.__)('Preview'))))), (0, _element.createElement)(_components.Disabled.Consumer, null, isDisabled => isPreview || isDisabled ? (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(_components.SandBox, {
    html: attributes.content,
    styles: styles
  }), !isSelected && (0, _element.createElement)("div", {
    className: "block-library-html__preview-overlay"
  })) : (0, _element.createElement)(_blockEditor.PlainText, {
    value: attributes.content,
    onChange: content => setAttributes({
      content
    }),
    placeholder: (0, _i18n.__)('Write HTMLâ€¦'),
    "aria-label": (0, _i18n.__)('HTML')
  })));
}
//# sourceMappingURL=edit.js.map
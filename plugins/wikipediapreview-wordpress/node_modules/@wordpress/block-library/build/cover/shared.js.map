{"version":3,"sources":["@wordpress/block-library/src/cover/shared.js"],"names":["POSITION_CLASSNAMES","center","IMAGE_BACKGROUND_TYPE","VIDEO_BACKGROUND_TYPE","COVER_MIN_HEIGHT","COVER_MAX_HEIGHT","COVER_DEFAULT_HEIGHT","backgroundImageStyles","url","backgroundImage","ALLOWED_MEDIA_TYPES","dimRatioToClass","ratio","Math","round","attributesFromMedia","setAttributes","media","undefined","id","type","mediaType","media_type","alt","backgroundType","focalPoint","hasParallax","isContentPositionCenter","contentPosition","getPositionClassName"],"mappings":"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","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { getBlobTypeByURL, isBlobURL } from '@wordpress/blob';\n\nconst POSITION_CLASSNAMES = {\n\t'top left': 'is-position-top-left',\n\t'top center': 'is-position-top-center',\n\t'top right': 'is-position-top-right',\n\t'center left': 'is-position-center-left',\n\t'center center': 'is-position-center-center',\n\tcenter: 'is-position-center-center',\n\t'center right': 'is-position-center-right',\n\t'bottom left': 'is-position-bottom-left',\n\t'bottom center': 'is-position-bottom-center',\n\t'bottom right': 'is-position-bottom-right',\n};\n\nexport const IMAGE_BACKGROUND_TYPE = 'image';\nexport const VIDEO_BACKGROUND_TYPE = 'video';\nexport const COVER_MIN_HEIGHT = 50;\nexport const COVER_MAX_HEIGHT = 1000;\nexport const COVER_DEFAULT_HEIGHT = 300;\nexport function backgroundImageStyles( url ) {\n\treturn url ? { backgroundImage: `url(${ url })` } : {};\n}\nexport const ALLOWED_MEDIA_TYPES = [ 'image', 'video' ];\n\nexport function dimRatioToClass( ratio ) {\n\treturn ratio === 0 || ratio === 50 || ! ratio\n\t\t? null\n\t\t: 'has-background-dim-' + 10 * Math.round( ratio / 10 );\n}\n\nexport function attributesFromMedia( setAttributes ) {\n\treturn ( media ) => {\n\t\tif ( ! media || ! media.url ) {\n\t\t\tsetAttributes( { url: undefined, id: undefined } );\n\t\t\treturn;\n\t\t}\n\n\t\tif ( isBlobURL( media.url ) ) {\n\t\t\tmedia.type = getBlobTypeByURL( media.url );\n\t\t}\n\n\t\tlet mediaType;\n\t\t// for media selections originated from a file upload.\n\t\tif ( media.media_type ) {\n\t\t\tif ( media.media_type === IMAGE_BACKGROUND_TYPE ) {\n\t\t\t\tmediaType = IMAGE_BACKGROUND_TYPE;\n\t\t\t} else {\n\t\t\t\t// only images and videos are accepted so if the media_type is not an image we can assume it is a video.\n\t\t\t\t// Videos contain the media type of 'file' in the object returned from the rest api.\n\t\t\t\tmediaType = VIDEO_BACKGROUND_TYPE;\n\t\t\t}\n\t\t} else {\n\t\t\t// for media selections originated from existing files in the media library.\n\t\t\tif (\n\t\t\t\tmedia.type !== IMAGE_BACKGROUND_TYPE &&\n\t\t\t\tmedia.type !== VIDEO_BACKGROUND_TYPE\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tmediaType = media.type;\n\t\t}\n\n\t\tsetAttributes( {\n\t\t\turl: media.url,\n\t\t\tid: media.id,\n\t\t\talt: media?.alt,\n\t\t\tbackgroundType: mediaType,\n\t\t\t...( mediaType === VIDEO_BACKGROUND_TYPE\n\t\t\t\t? { focalPoint: undefined, hasParallax: undefined }\n\t\t\t\t: {} ),\n\t\t} );\n\t};\n}\n\n/**\n * Checks of the contentPosition is the center (default) position.\n *\n * @param {string} contentPosition The current content position.\n * @return {boolean} Whether the contentPosition is center.\n */\nexport function isContentPositionCenter( contentPosition ) {\n\treturn (\n\t\t! contentPosition ||\n\t\tcontentPosition === 'center center' ||\n\t\tcontentPosition === 'center'\n\t);\n}\n\n/**\n * Retrieves the className for the current contentPosition.\n * The default position (center) will not have a className.\n *\n * @param {string} contentPosition The current content position.\n * @return {string} The className assigned to the contentPosition.\n */\nexport function getPositionClassName( contentPosition ) {\n\t/*\n\t * Only render a className if the contentPosition is not center (the default).\n\t */\n\tif ( isContentPositionCenter( contentPosition ) ) return '';\n\n\treturn POSITION_CLASSNAMES[ contentPosition ];\n}\n"]}
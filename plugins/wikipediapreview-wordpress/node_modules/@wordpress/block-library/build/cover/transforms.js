"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _blocks = require("@wordpress/blocks");

var _shared = require("./shared");

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
const transforms = {
  from: [{
    type: 'block',
    blocks: ['core/image'],
    transform: ({
      caption,
      url,
      alt,
      align,
      id,
      anchor,
      style
    }) => {
      var _style$color;

      return (0, _blocks.createBlock)('core/cover', {
        url,
        alt,
        align,
        id,
        anchor,
        style: {
          color: {
            duotone: style === null || style === void 0 ? void 0 : (_style$color = style.color) === null || _style$color === void 0 ? void 0 : _style$color.duotone
          }
        }
      }, [(0, _blocks.createBlock)('core/paragraph', {
        content: caption,
        fontSize: 'large'
      })]);
    }
  }, {
    type: 'block',
    blocks: ['core/video'],
    transform: ({
      caption,
      src,
      align,
      id,
      anchor
    }) => (0, _blocks.createBlock)('core/cover', {
      url: src,
      align,
      id,
      backgroundType: _shared.VIDEO_BACKGROUND_TYPE,
      anchor
    }, [(0, _blocks.createBlock)('core/paragraph', {
      content: caption,
      fontSize: 'large'
    })])
  }, {
    type: 'block',
    blocks: ['core/group'],
    isMatch: ({
      backgroundColor,
      gradient,
      style
    }) => {
      var _style$color2, _style$color3;

      /*
       * Make this transformation available only if the Group has background
       * or gradient set, because otherwise `Cover` block displays a Placeholder.
       *
       * This helps avoid arbitrary decisions about the Cover block's background
       * and user confusion about the existence of previous content.
       */
      return backgroundColor || (style === null || style === void 0 ? void 0 : (_style$color2 = style.color) === null || _style$color2 === void 0 ? void 0 : _style$color2.background) || (style === null || style === void 0 ? void 0 : (_style$color3 = style.color) === null || _style$color3 === void 0 ? void 0 : _style$color3.gradient) || gradient;
    },
    transform: ({
      align,
      anchor,
      backgroundColor,
      gradient,
      style
    }, innerBlocks) => {
      var _style$color4, _style$color5;

      return (0, _blocks.createBlock)('core/cover', {
        align,
        anchor,
        overlayColor: backgroundColor,
        customOverlayColor: style === null || style === void 0 ? void 0 : (_style$color4 = style.color) === null || _style$color4 === void 0 ? void 0 : _style$color4.background,
        gradient,
        customGradient: style === null || style === void 0 ? void 0 : (_style$color5 = style.color) === null || _style$color5 === void 0 ? void 0 : _style$color5.gradient
      }, innerBlocks);
    }
  }],
  to: [{
    type: 'block',
    blocks: ['core/image'],
    isMatch: ({
      backgroundType,
      url,
      overlayColor,
      customOverlayColor,
      gradient,
      customGradient
    }) => {
      if (url) {
        // If a url exists the transform could happen if that URL represents an image background.
        return backgroundType === _shared.IMAGE_BACKGROUND_TYPE;
      } // If a url is not set the transform could happen if the cover has no background color or gradient;


      return !overlayColor && !customOverlayColor && !gradient && !customGradient;
    },
    transform: ({
      title,
      url,
      alt,
      align,
      id,
      anchor,
      style
    }) => {
      var _style$color6;

      return (0, _blocks.createBlock)('core/image', {
        caption: title,
        url,
        alt,
        align,
        id,
        anchor,
        style: {
          color: {
            duotone: style === null || style === void 0 ? void 0 : (_style$color6 = style.color) === null || _style$color6 === void 0 ? void 0 : _style$color6.duotone
          }
        }
      });
    }
  }, {
    type: 'block',
    blocks: ['core/video'],
    isMatch: ({
      backgroundType,
      url,
      overlayColor,
      customOverlayColor,
      gradient,
      customGradient
    }) => {
      if (url) {
        // If a url exists the transform could happen if that URL represents a video background.
        return backgroundType === _shared.VIDEO_BACKGROUND_TYPE;
      } // If a url is not set the transform could happen if the cover has no background color or gradient;


      return !overlayColor && !customOverlayColor && !gradient && !customGradient;
    },
    transform: ({
      title,
      url,
      align,
      id,
      anchor
    }) => (0, _blocks.createBlock)('core/video', {
      caption: title,
      src: url,
      id,
      align,
      anchor
    })
  }]
};
var _default = transforms;
exports.default = _default;
//# sourceMappingURL=transforms.js.map
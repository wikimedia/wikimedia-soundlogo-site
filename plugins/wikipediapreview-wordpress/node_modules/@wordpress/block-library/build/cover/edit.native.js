"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _reactNative = require("react-native");

var _reactNativeVideo = _interopRequireDefault(require("react-native-video"));

var _reactNativeBridge = require("@wordpress/react-native-bridge");

var _i18n = require("@wordpress/i18n");

var _components = require("@wordpress/components");

var _blockEditor = require("@wordpress/block-editor");

var _compose = require("@wordpress/compose");

var _data = require("@wordpress/data");

var _icons = require("@wordpress/icons");

var _url = require("@wordpress/url");

var _editPost = require("@wordpress/edit-post");

var _style = _interopRequireDefault(require("./style.scss"));

var _shared = require("./shared");

var _controls = _interopRequireDefault(require("./controls"));

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

/**
 * Constants
 */
const INNER_BLOCKS_TEMPLATE = [['core/paragraph', {
  align: 'center',
  placeholder: (0, _i18n.__)('Write titleâ€¦')
}]];

const Cover = ({
  attributes,
  getStylesFromColorScheme,
  isParentSelected,
  onFocus,
  overlayColor,
  setAttributes,
  openGeneralSidebar,
  closeSettingsBottomSheet,
  isSelected,
  selectBlock,
  blockWidth
}) => {
  var _style$color, _styles$overlay;

  const {
    backgroundType,
    dimRatio,
    focalPoint,
    minHeight,
    url,
    id,
    style,
    customOverlayColor,
    minHeightUnit = 'px'
  } = attributes;
  const [isScreenReaderEnabled, setIsScreenReaderEnabled] = (0, _element.useState)(false);
  (0, _element.useEffect)(() => {
    let isCurrent = true; // sync with local media store

    (0, _reactNativeBridge.mediaUploadSync)();

    _reactNative.AccessibilityInfo.addEventListener('screenReaderChanged', setIsScreenReaderEnabled);

    _reactNative.AccessibilityInfo.isScreenReaderEnabled().then(() => {
      if (isCurrent) {
        setIsScreenReaderEnabled();
      }
    });

    return () => {
      isCurrent = false;

      _reactNative.AccessibilityInfo.removeEventListener('screenReaderChanged', setIsScreenReaderEnabled);
    };
  }, []);
  const convertedMinHeight = (0, _components.useConvertUnitToMobile)(minHeight || _shared.COVER_DEFAULT_HEIGHT, minHeightUnit);
  const isImage = backgroundType === _blockEditor.MEDIA_TYPE_IMAGE;
  const THEME_COLORS_COUNT = 4;
  const colorsDefault = (0, _blockEditor.useSetting)('color.palette') || [];
  const coverDefaultPalette = {
    colors: colorsDefault.slice(0, THEME_COLORS_COUNT)
  };
  const {
    gradientValue
  } = (0, _blockEditor.__experimentalUseGradient)();
  const hasBackground = !!(url || style && style.color && style.color.background || attributes.overlayColor || overlayColor.color || gradientValue);
  const hasOnlyColorBackground = !url && hasBackground;
  const [isCustomColorPickerShowing, setCustomColorPickerShowing] = (0, _element.useState)(false);
  const openMediaOptionsRef = (0, _element.useRef)(); // Used to set a default color for its InnerBlocks
  // since there's no system to inherit styles yet
  // the RichText component will check if there are
  // parent styles for the current block. If there are,
  // it will use that color instead.

  (0, _element.useEffect)(() => {
    // While we don't support theme colors
    if (!attributes.overlayColor || !attributes.overlay && url) {
      setAttributes({
        childrenStyles: _style.default.defaultColor
      });
    }
  }, [setAttributes]); // initialize uploading flag to false, awaiting sync

  const [isUploadInProgress, setIsUploadInProgress] = (0, _element.useState)(false); // initialize upload failure flag to true if url is local

  const [didUploadFail, setDidUploadFail] = (0, _element.useState)(id && (0, _url.getProtocol)(url) === 'file:'); // don't show failure if upload is in progress

  const shouldShowFailure = didUploadFail && !isUploadInProgress;

  const onSelectMedia = media => {
    setDidUploadFail(false);
    const onSelect = (0, _shared.attributesFromMedia)(setAttributes);
    onSelect(media);
  };

  const onMediaPressed = () => {
    if (isUploadInProgress) {
      (0, _reactNativeBridge.requestImageUploadCancelDialog)(id);
    } else if (shouldShowFailure) {
      (0, _reactNativeBridge.requestImageFailedRetryDialog)(id);
    } else if (isImage && url) {
      (0, _reactNativeBridge.requestImageFullscreenPreview)(url);
    }
  };

  const [isVideoLoading, setIsVideoLoading] = (0, _element.useState)(true);

  const onVideoLoadStart = () => {
    setIsVideoLoading(true);
  };

  const onVideoLoad = () => {
    setIsVideoLoading(false);
  };

  const onClearMedia = (0, _element.useCallback)(() => {
    setAttributes({
      focalPoint: undefined,
      hasParallax: undefined,
      id: undefined,
      url: undefined
    });
    closeSettingsBottomSheet();
  }, [closeSettingsBottomSheet]);

  function setColor(color) {
    setAttributes({
      // clear all related attributes (only one should be set)
      overlayColor: undefined,
      customOverlayColor: color,
      gradient: undefined,
      customGradient: undefined
    });
  }

  function openColorPicker() {
    selectBlock();
    setCustomColorPickerShowing(true);
    openGeneralSidebar();
  }

  const backgroundColor = getStylesFromColorScheme(_style.default.backgroundSolid, _style.default.backgroundSolidDark);
  const overlayStyles = [_style.default.overlay, url && {
    opacity: dimRatio / 100
  }, !gradientValue && {
    backgroundColor: customOverlayColor || (overlayColor === null || overlayColor === void 0 ? void 0 : overlayColor.color) || (style === null || style === void 0 ? void 0 : (_style$color = style.color) === null || _style$color === void 0 ? void 0 : _style$color.background) || ((_styles$overlay = _style.default.overlay) === null || _styles$overlay === void 0 ? void 0 : _styles$overlay.color)
  }, // While we don't support theme colors we add a default bg color
  !overlayColor.color && !url ? backgroundColor : {}, isImage && isParentSelected && !isUploadInProgress && !didUploadFail && _style.default.overlaySelected];
  const placeholderIconStyle = getStylesFromColorScheme(_style.default.icon, _style.default.iconDark);
  const placeholderIcon = (0, _element.createElement)(_components.Icon, (0, _extends2.default)({
    icon: _icons.cover
  }, placeholderIconStyle));

  const toolbarControls = open => (0, _element.createElement)(_blockEditor.BlockControls, {
    group: "other"
  }, (0, _element.createElement)(_components.ToolbarButton, {
    title: (0, _i18n.__)('Edit cover media'),
    icon: _icons.replace,
    onClick: open
  }));

  const accessibilityHint = _reactNative.Platform.OS === 'ios' ? (0, _i18n.__)('Double tap to open Action Sheet to add image or video') : (0, _i18n.__)('Double tap to open Bottom Sheet to add image or video');

  const addMediaButton = () => (0, _element.createElement)(_reactNative.TouchableWithoutFeedback, {
    accessibilityHint: accessibilityHint,
    accessibilityLabel: (0, _i18n.__)('Add image or video'),
    accessibilityRole: "button",
    onPress: openMediaOptionsRef.current
  }, (0, _element.createElement)(_reactNative.View, {
    style: _style.default.selectImageContainer
  }, (0, _element.createElement)(_reactNative.View, {
    style: _style.default.selectImage
  }, (0, _element.createElement)(_components.Icon, (0, _extends2.default)({
    size: 16,
    icon: _icons.image
  }, _style.default.selectImageIcon)))));

  const onBottomSheetClosed = (0, _element.useCallback)(() => {
    _reactNative.InteractionManager.runAfterInteractions(() => {
      setCustomColorPickerShowing(false);
    });
  }, []);
  const colorPickerControls = (0, _element.createElement)(_blockEditor.InspectorControls, null, (0, _element.createElement)(_components.BottomSheetConsumer, null, ({
    shouldEnableBottomSheetScroll,
    shouldEnableBottomSheetMaxHeight,
    onHandleClosingBottomSheet,
    onHandleHardwareButtonPress,
    isBottomSheetContentScrolling
  }) => (0, _element.createElement)(_components.ColorPicker, {
    shouldEnableBottomSheetScroll: shouldEnableBottomSheetScroll,
    shouldEnableBottomSheetMaxHeight: shouldEnableBottomSheetMaxHeight,
    setColor: setColor,
    onNavigationBack: closeSettingsBottomSheet,
    onHandleClosingBottomSheet: onHandleClosingBottomSheet,
    onHandleHardwareButtonPress: onHandleHardwareButtonPress,
    onBottomSheetClosed: onBottomSheetClosed,
    isBottomSheetContentScrolling: isBottomSheetContentScrolling,
    bottomLabelText: (0, _i18n.__)('Select a color')
  })));

  const renderContent = getMediaOptions => (0, _element.createElement)(_element.Fragment, null, renderBackground(getMediaOptions), isParentSelected && hasOnlyColorBackground && addMediaButton());

  const renderBackground = getMediaOptions => {
    var _styles$image;

    return (0, _element.createElement)(_reactNative.TouchableWithoutFeedback, {
      accessible: !isParentSelected,
      onPress: onMediaPressed,
      onLongPress: openMediaOptionsRef.current,
      disabled: !isParentSelected
    }, (0, _element.createElement)(_reactNative.View, {
      style: [_style.default.background, backgroundColor]
    }, getMediaOptions(), isParentSelected && backgroundType === _shared.VIDEO_BACKGROUND_TYPE && toolbarControls(openMediaOptionsRef.current), (0, _element.createElement)(_blockEditor.MediaUploadProgress, {
      mediaId: id,
      onUpdateMediaProgress: () => {
        setIsUploadInProgress(true);
      },
      onFinishMediaUploadWithSuccess: ({
        mediaServerId,
        mediaUrl
      }) => {
        setIsUploadInProgress(false);
        setDidUploadFail(false);
        setAttributes({
          id: mediaServerId,
          url: mediaUrl,
          backgroundType
        });
      },
      onFinishMediaUploadWithFailure: () => {
        setIsUploadInProgress(false);
        setDidUploadFail(true);
      },
      onMediaUploadStateReset: () => {
        setIsUploadInProgress(false);
        setDidUploadFail(false);
        setAttributes({
          id: undefined,
          url: undefined
        });
      }
    }), _shared.IMAGE_BACKGROUND_TYPE === backgroundType && (0, _element.createElement)(_reactNative.View, {
      style: _style.default.imageContainer
    }, (0, _element.createElement)(_components.Image, {
      editButton: false,
      focalPoint: focalPoint || _components.IMAGE_DEFAULT_FOCAL_POINT,
      isSelected: isParentSelected,
      isUploadFailed: didUploadFail,
      isUploadInProgress: isUploadInProgress,
      onSelectMediaUploadOption: onSelectMedia,
      openMediaOptions: openMediaOptionsRef.current,
      url: url,
      width: (_styles$image = _style.default.image) === null || _styles$image === void 0 ? void 0 : _styles$image.width
    })), _shared.VIDEO_BACKGROUND_TYPE === backgroundType && (0, _element.createElement)(_reactNativeVideo.default, {
      muted: true,
      disableFocus: true,
      repeat: true,
      resizeMode: 'cover',
      source: {
        uri: url
      },
      onLoad: onVideoLoad,
      onLoadStart: onVideoLoadStart,
      style: [_style.default.background, // Hide Video component since it has black background while loading the source
      {
        opacity: isVideoLoading ? 0 : 1
      }]
    })));
  };

  if (!hasBackground || isCustomColorPickerShowing) {
    var _styles$mediaPlacehol;

    return (0, _element.createElement)(_reactNative.View, null, isCustomColorPickerShowing && colorPickerControls, (0, _element.createElement)(_blockEditor.MediaPlaceholder, {
      height: (_styles$mediaPlacehol = _style.default.mediaPlaceholderEmptyStateContainer) === null || _styles$mediaPlacehol === void 0 ? void 0 : _styles$mediaPlacehol.height,
      backgroundColor: customOverlayColor,
      hideContent: customOverlayColor !== '' && customOverlayColor !== undefined,
      icon: placeholderIcon,
      labels: {
        title: (0, _i18n.__)('Cover')
      },
      onSelect: onSelectMedia,
      allowedTypes: _shared.ALLOWED_MEDIA_TYPES,
      onFocus: onFocus
    }, (0, _element.createElement)(_reactNative.View, {
      style: _style.default.colorPaletteWrapper,
      pointerEvents: isScreenReaderEnabled ? 'none' : 'auto'
    }, (0, _element.createElement)(_components.BottomSheetConsumer, null, ({
      shouldEnableBottomSheetScroll
    }) => (0, _element.createElement)(_components.ColorPalette, {
      customColorIndicatorStyles: _style.default.paletteColorIndicator,
      customIndicatorWrapperStyles: _style.default.paletteCustomIndicatorWrapper,
      setColor: setColor,
      onCustomPress: openColorPicker,
      defaultSettings: coverDefaultPalette,
      shouldShowCustomLabel: false,
      shouldShowCustomVerticalSeparator: false,
      shouldEnableBottomSheetScroll: shouldEnableBottomSheetScroll
    })))));
  }

  return (0, _element.createElement)(_reactNative.View, {
    style: _style.default.backgroundContainer
  }, isSelected && (0, _element.createElement)(_blockEditor.InspectorControls, null, (0, _element.createElement)(_controls.default, {
    attributes: attributes,
    didUploadFail: didUploadFail,
    hasOnlyColorBackground: hasOnlyColorBackground,
    isUploadInProgress: isUploadInProgress,
    onClearMedia: onClearMedia,
    onSelectMedia: onSelectMedia,
    setAttributes: setAttributes
  })), (0, _element.createElement)(_reactNative.View, {
    pointerEvents: "box-none",
    style: [_style.default.content, {
      minHeight: convertedMinHeight
    }]
  }, (0, _element.createElement)(_blockEditor.InnerBlocks, {
    template: INNER_BLOCKS_TEMPLATE,
    templateInsertUpdatesSelection: true,
    blockWidth: blockWidth
  })), (0, _element.createElement)(_reactNative.View, {
    pointerEvents: "none",
    style: _style.default.overlayContainer
  }, (0, _element.createElement)(_reactNative.View, {
    style: overlayStyles
  }, gradientValue && (0, _element.createElement)(_components.Gradient, {
    gradientValue: gradientValue,
    style: _style.default.background
  }))), (0, _element.createElement)(_blockEditor.MediaUpload, {
    allowedTypes: _shared.ALLOWED_MEDIA_TYPES,
    isReplacingMedia: !hasOnlyColorBackground,
    onSelect: onSelectMedia,
    render: ({
      open,
      getMediaOptions
    }) => {
      openMediaOptionsRef.current = open;
      return renderContent(getMediaOptions);
    }
  }), isImage && url && openMediaOptionsRef.current && isParentSelected && !isUploadInProgress && !didUploadFail && (0, _element.createElement)(_reactNative.View, {
    style: _style.default.imageEditButton
  }, (0, _element.createElement)(_components.ImageEditingButton, {
    onSelectMediaUploadOption: onSelectMedia,
    openMediaOptions: openMediaOptionsRef.current,
    pickerOptions: [{
      destructiveButton: true,
      id: 'clearMedia',
      label: (0, _i18n.__)('Clear Media'),
      onPress: onClearMedia,
      separated: true,
      value: 'clearMedia'
    }],
    url: url
  })), shouldShowFailure && (0, _element.createElement)(_reactNative.View, {
    pointerEvents: "none",
    style: _style.default.uploadFailedContainer
  }, (0, _element.createElement)(_reactNative.View, {
    style: _style.default.uploadFailed
  }, (0, _element.createElement)(_components.Icon, (0, _extends2.default)({
    icon: _icons.warning
  }, _style.default.uploadFailedIcon)))));
};

var _default = (0, _compose.compose)([(0, _blockEditor.withColors)({
  overlayColor: 'background-color'
}), (0, _data.withSelect)((select, {
  clientId
}) => {
  const {
    getSelectedBlockClientId
  } = select(_blockEditor.store);
  const selectedBlockClientId = getSelectedBlockClientId();
  const {
    getSettings
  } = select(_blockEditor.store);
  return {
    settings: getSettings(),
    isParentSelected: selectedBlockClientId === clientId
  };
}), (0, _data.withDispatch)((dispatch, {
  clientId
}) => {
  const {
    openGeneralSidebar
  } = dispatch(_editPost.store);
  const {
    selectBlock
  } = dispatch(_blockEditor.store);
  return {
    openGeneralSidebar: () => openGeneralSidebar('edit-post/block'),

    closeSettingsBottomSheet() {
      dispatch(_editPost.store).closeGeneralSidebar();
    },

    selectBlock: () => selectBlock(clientId)
  };
}), _compose.withPreferredColorScheme])(Cover);

exports.default = _default;
//# sourceMappingURL=edit.native.js.map
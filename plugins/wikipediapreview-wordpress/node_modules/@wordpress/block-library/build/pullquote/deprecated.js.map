{"version":3,"sources":["@wordpress/block-library/src/pullquote/deprecated.js"],"names":["blockAttributes","value","type","source","selector","multiline","citation","default","mainColor","customMainColor","textColor","customTextColor","parseBorderColor","styleString","matches","match","deprecated","attributes","save","className","isSolidColorStyle","SOLID_COLOR_CLASS","figureClasses","figureStyles","backgroundClass","backgroundColor","undefined","borderColor","blockquoteTextColorClass","blockquoteClasses","blockquoteStyles","color","useBlockProps","style","RichText","isEmpty","migrate","border","background","text","textAlign","figureStyle","attribute","figureClass","colors","blockEditorStore","getSettings","colorObject","blockquoteStyle","align"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport classnames from 'classnames';\nimport { get, includes } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport {\n\tgetColorClassName,\n\tgetColorObjectByAttributeValues,\n\tRichText,\n\tstore as blockEditorStore,\n\tuseBlockProps,\n} from '@wordpress/block-editor';\nimport { select } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport { SOLID_COLOR_CLASS } from './shared';\n\nconst blockAttributes = {\n\tvalue: {\n\t\ttype: 'string',\n\t\tsource: 'html',\n\t\tselector: 'blockquote',\n\t\tmultiline: 'p',\n\t},\n\tcitation: {\n\t\ttype: 'string',\n\t\tsource: 'html',\n\t\tselector: 'cite',\n\t\tdefault: '',\n\t},\n\tmainColor: {\n\t\ttype: 'string',\n\t},\n\tcustomMainColor: {\n\t\ttype: 'string',\n\t},\n\ttextColor: {\n\t\ttype: 'string',\n\t},\n\tcustomTextColor: {\n\t\ttype: 'string',\n\t},\n};\n\nfunction parseBorderColor( styleString ) {\n\tif ( ! styleString ) {\n\t\treturn;\n\t}\n\tconst matches = styleString.match( /border-color:([^;]+)[;]?/ );\n\tif ( matches && matches[ 1 ] ) {\n\t\treturn matches[ 1 ];\n\t}\n}\n\n// TODO: this is ripe for a bit of a clean up according to the example in https://developer.wordpress.org/block-editor/reference-guides/block-api/block-deprecation/#example\nconst deprecated = [\n\t{\n\t\tattributes: {\n\t\t\t...blockAttributes,\n\t\t},\n\t\tsave( { attributes } ) {\n\t\t\tconst {\n\t\t\t\tmainColor,\n\t\t\t\tcustomMainColor,\n\t\t\t\tcustomTextColor,\n\t\t\t\ttextColor,\n\t\t\t\tvalue,\n\t\t\t\tcitation,\n\t\t\t\tclassName,\n\t\t\t} = attributes;\n\n\t\t\tconst isSolidColorStyle = includes( className, SOLID_COLOR_CLASS );\n\n\t\t\tlet figureClasses, figureStyles;\n\n\t\t\t// Is solid color style\n\t\t\tif ( isSolidColorStyle ) {\n\t\t\t\tconst backgroundClass = getColorClassName(\n\t\t\t\t\t'background-color',\n\t\t\t\t\tmainColor\n\t\t\t\t);\n\n\t\t\t\tfigureClasses = classnames( {\n\t\t\t\t\t'has-background': backgroundClass || customMainColor,\n\t\t\t\t\t[ backgroundClass ]: backgroundClass,\n\t\t\t\t} );\n\n\t\t\t\tfigureStyles = {\n\t\t\t\t\tbackgroundColor: backgroundClass\n\t\t\t\t\t\t? undefined\n\t\t\t\t\t\t: customMainColor,\n\t\t\t\t};\n\t\t\t\t// Is normal style and a custom color is being used ( we can set a style directly with its value)\n\t\t\t} else if ( customMainColor ) {\n\t\t\t\tfigureStyles = {\n\t\t\t\t\tborderColor: customMainColor,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tconst blockquoteTextColorClass = getColorClassName(\n\t\t\t\t'color',\n\t\t\t\ttextColor\n\t\t\t);\n\t\t\tconst blockquoteClasses = classnames( {\n\t\t\t\t'has-text-color': textColor || customTextColor,\n\t\t\t\t[ blockquoteTextColorClass ]: blockquoteTextColorClass,\n\t\t\t} );\n\n\t\t\tconst blockquoteStyles = blockquoteTextColorClass\n\t\t\t\t? undefined\n\t\t\t\t: { color: customTextColor };\n\n\t\t\treturn (\n\t\t\t\t<figure\n\t\t\t\t\t{ ...useBlockProps.save( {\n\t\t\t\t\t\tclassName: figureClasses,\n\t\t\t\t\t\tstyle: figureStyles,\n\t\t\t\t\t} ) }\n\t\t\t\t>\n\t\t\t\t\t<blockquote\n\t\t\t\t\t\tclassName={ blockquoteClasses }\n\t\t\t\t\t\tstyle={ blockquoteStyles }\n\t\t\t\t\t>\n\t\t\t\t\t\t<RichText.Content value={ value } multiline />\n\t\t\t\t\t\t{ ! RichText.isEmpty( citation ) && (\n\t\t\t\t\t\t\t<RichText.Content\n\t\t\t\t\t\t\t\ttagName=\"cite\"\n\t\t\t\t\t\t\t\tvalue={ citation }\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t) }\n\t\t\t\t\t</blockquote>\n\t\t\t\t</figure>\n\t\t\t);\n\t\t},\n\t\tmigrate( {\n\t\t\tclassName,\n\t\t\tmainColor,\n\t\t\tcustomMainColor,\n\t\t\tcustomTextColor,\n\t\t\t...attributes\n\t\t} ) {\n\t\t\tconst isSolidColorStyle = includes( className, SOLID_COLOR_CLASS );\n\t\t\tlet style;\n\n\t\t\tif ( customMainColor ) {\n\t\t\t\tif ( ! isSolidColorStyle ) {\n\t\t\t\t\t// Block supports: Set style.border.color if a deprecated block has a default style and a `customMainColor` attribute.\n\t\t\t\t\tstyle = {\n\t\t\t\t\t\tborder: {\n\t\t\t\t\t\t\tcolor: customMainColor,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t} else {\n\t\t\t\t\t// Block supports: Set style.color.background if a deprecated block has a solid style and a `customMainColor` attribute.\n\t\t\t\t\tstyle = {\n\t\t\t\t\t\tcolor: {\n\t\t\t\t\t\t\tbackground: customMainColor,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Block supports: Set style.color.text if a deprecated block has a `customTextColor` attribute.\n\t\t\tif ( customTextColor && style ) {\n\t\t\t\tstyle.color = {\n\t\t\t\t\t...style.color,\n\t\t\t\t\ttext: customTextColor,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tclassName,\n\t\t\t\tbackgroundColor: isSolidColorStyle ? mainColor : undefined,\n\t\t\t\tborderColor: isSolidColorStyle ? undefined : mainColor,\n\t\t\t\ttextAlign: isSolidColorStyle ? 'left' : undefined,\n\t\t\t\tstyle,\n\t\t\t\t...attributes,\n\t\t\t};\n\t\t},\n\t},\n\t{\n\t\tattributes: {\n\t\t\t...blockAttributes,\n\t\t\t// figureStyle is an attribute that never existed.\n\t\t\t// We are using it as a way to access the styles previously applied to the figure.\n\t\t\tfigureStyle: {\n\t\t\t\tsource: 'attribute',\n\t\t\t\tselector: 'figure',\n\t\t\t\tattribute: 'style',\n\t\t\t},\n\t\t},\n\t\tsave( { attributes } ) {\n\t\t\tconst {\n\t\t\t\tmainColor,\n\t\t\t\tcustomMainColor,\n\t\t\t\ttextColor,\n\t\t\t\tcustomTextColor,\n\t\t\t\tvalue,\n\t\t\t\tcitation,\n\t\t\t\tclassName,\n\t\t\t\tfigureStyle,\n\t\t\t} = attributes;\n\n\t\t\tconst isSolidColorStyle = includes( className, SOLID_COLOR_CLASS );\n\n\t\t\tlet figureClasses, figureStyles;\n\n\t\t\t// Is solid color style\n\t\t\tif ( isSolidColorStyle ) {\n\t\t\t\tconst backgroundClass = getColorClassName(\n\t\t\t\t\t'background-color',\n\t\t\t\t\tmainColor\n\t\t\t\t);\n\n\t\t\t\tfigureClasses = classnames( {\n\t\t\t\t\t'has-background': backgroundClass || customMainColor,\n\t\t\t\t\t[ backgroundClass ]: backgroundClass,\n\t\t\t\t} );\n\n\t\t\t\tfigureStyles = {\n\t\t\t\t\tbackgroundColor: backgroundClass\n\t\t\t\t\t\t? undefined\n\t\t\t\t\t\t: customMainColor,\n\t\t\t\t};\n\t\t\t\t// Is normal style and a custom color is being used ( we can set a style directly with its value)\n\t\t\t} else if ( customMainColor ) {\n\t\t\t\tfigureStyles = {\n\t\t\t\t\tborderColor: customMainColor,\n\t\t\t\t};\n\t\t\t\t// If normal style and a named color are being used, we need to retrieve the color value to set the style,\n\t\t\t\t// as there is no expectation that themes create classes that set border colors.\n\t\t\t} else if ( mainColor ) {\n\t\t\t\t// Previously here we queried the color settings to know the color value\n\t\t\t\t// of a named color. This made the save function impure and the block was refactored,\n\t\t\t\t// because meanwhile a change in the editor made it impossible to query color settings in the save function.\n\t\t\t\t// Here instead of querying the color settings to know the color value, we retrieve the value\n\t\t\t\t// directly from the style previously serialized.\n\t\t\t\tconst borderColor = parseBorderColor( figureStyle );\n\t\t\t\tfigureStyles = {\n\t\t\t\t\tborderColor,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tconst blockquoteTextColorClass = getColorClassName(\n\t\t\t\t'color',\n\t\t\t\ttextColor\n\t\t\t);\n\t\t\tconst blockquoteClasses =\n\t\t\t\t( textColor || customTextColor ) &&\n\t\t\t\tclassnames( 'has-text-color', {\n\t\t\t\t\t[ blockquoteTextColorClass ]: blockquoteTextColorClass,\n\t\t\t\t} );\n\n\t\t\tconst blockquoteStyles = blockquoteTextColorClass\n\t\t\t\t? undefined\n\t\t\t\t: { color: customTextColor };\n\n\t\t\treturn (\n\t\t\t\t<figure className={ figureClasses } style={ figureStyles }>\n\t\t\t\t\t<blockquote\n\t\t\t\t\t\tclassName={ blockquoteClasses }\n\t\t\t\t\t\tstyle={ blockquoteStyles }\n\t\t\t\t\t>\n\t\t\t\t\t\t<RichText.Content value={ value } multiline />\n\t\t\t\t\t\t{ ! RichText.isEmpty( citation ) && (\n\t\t\t\t\t\t\t<RichText.Content\n\t\t\t\t\t\t\t\ttagName=\"cite\"\n\t\t\t\t\t\t\t\tvalue={ citation }\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t) }\n\t\t\t\t\t</blockquote>\n\t\t\t\t</figure>\n\t\t\t);\n\t\t},\n\t\tmigrate( {\n\t\t\tclassName,\n\t\t\tfigureStyle,\n\t\t\tmainColor,\n\t\t\tcustomMainColor,\n\t\t\tcustomTextColor,\n\t\t\t...attributes\n\t\t} ) {\n\t\t\tconst isSolidColorStyle = includes( className, SOLID_COLOR_CLASS );\n\t\t\tlet style;\n\n\t\t\tif ( customMainColor ) {\n\t\t\t\tif ( ! isSolidColorStyle ) {\n\t\t\t\t\t// Block supports: Set style.border.color if a deprecated block has a default style and a `customMainColor` attribute.\n\t\t\t\t\tstyle = {\n\t\t\t\t\t\tborder: {\n\t\t\t\t\t\t\tcolor: customMainColor,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t} else {\n\t\t\t\t\t// Block supports: Set style.color.background if a deprecated block has a solid style and a `customMainColor` attribute.\n\t\t\t\t\tstyle = {\n\t\t\t\t\t\tcolor: {\n\t\t\t\t\t\t\tbackground: customMainColor,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Block supports: Set style.color.text if a deprecated block has a `customTextColor` attribute.\n\t\t\tif ( customTextColor && style ) {\n\t\t\t\tstyle.color = {\n\t\t\t\t\t...style.color,\n\t\t\t\t\ttext: customTextColor,\n\t\t\t\t};\n\t\t\t}\n\t\t\t// If is the default style, and a main color is set,\n\t\t\t// migrate the main color value into a custom border color.\n\t\t\t// The custom border color value is retrieved by parsing the figure styles.\n\t\t\tif ( ! isSolidColorStyle && mainColor && figureStyle ) {\n\t\t\t\tconst borderColor = parseBorderColor( figureStyle );\n\t\t\t\tif ( borderColor ) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...attributes,\n\t\t\t\t\t\tclassName,\n\t\t\t\t\t\t// Block supports: Set style.border.color if a deprecated block has `mainColor`, inline border CSS and is not a solid color style.\n\t\t\t\t\t\tstyle: {\n\t\t\t\t\t\t\tborder: {\n\t\t\t\t\t\t\t\tcolor: borderColor,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn {\n\t\t\t\tclassName,\n\t\t\t\tbackgroundColor: isSolidColorStyle ? mainColor : undefined,\n\t\t\t\tborderColor: isSolidColorStyle ? undefined : mainColor,\n\t\t\t\ttextAlign: isSolidColorStyle ? 'left' : undefined,\n\t\t\t\tstyle,\n\t\t\t\t...attributes,\n\t\t\t};\n\t\t},\n\t},\n\t{\n\t\tattributes: blockAttributes,\n\t\tsave( { attributes } ) {\n\t\t\tconst {\n\t\t\t\tmainColor,\n\t\t\t\tcustomMainColor,\n\t\t\t\ttextColor,\n\t\t\t\tcustomTextColor,\n\t\t\t\tvalue,\n\t\t\t\tcitation,\n\t\t\t\tclassName,\n\t\t\t} = attributes;\n\t\t\tconst isSolidColorStyle = includes( className, SOLID_COLOR_CLASS );\n\n\t\t\tlet figureClass, figureStyles;\n\t\t\t// Is solid color style\n\t\t\tif ( isSolidColorStyle ) {\n\t\t\t\tfigureClass = getColorClassName(\n\t\t\t\t\t'background-color',\n\t\t\t\t\tmainColor\n\t\t\t\t);\n\t\t\t\tif ( ! figureClass ) {\n\t\t\t\t\tfigureStyles = {\n\t\t\t\t\t\tbackgroundColor: customMainColor,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\t// Is normal style and a custom color is being used ( we can set a style directly with its value)\n\t\t\t} else if ( customMainColor ) {\n\t\t\t\tfigureStyles = {\n\t\t\t\t\tborderColor: customMainColor,\n\t\t\t\t};\n\t\t\t\t// Is normal style and a named color is being used, we need to retrieve the color value to set the style,\n\t\t\t\t// as there is no expectation that themes create classes that set border colors.\n\t\t\t} else if ( mainColor ) {\n\t\t\t\tconst colors = get(\n\t\t\t\t\tselect( blockEditorStore ).getSettings(),\n\t\t\t\t\t[ 'colors' ],\n\t\t\t\t\t[]\n\t\t\t\t);\n\t\t\t\tconst colorObject = getColorObjectByAttributeValues(\n\t\t\t\t\tcolors,\n\t\t\t\t\tmainColor\n\t\t\t\t);\n\t\t\t\tfigureStyles = {\n\t\t\t\t\tborderColor: colorObject.color,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tconst blockquoteTextColorClass = getColorClassName(\n\t\t\t\t'color',\n\t\t\t\ttextColor\n\t\t\t);\n\t\t\tconst blockquoteClasses =\n\t\t\t\ttextColor || customTextColor\n\t\t\t\t\t? classnames( 'has-text-color', {\n\t\t\t\t\t\t\t[ blockquoteTextColorClass ]: blockquoteTextColorClass,\n\t\t\t\t\t  } )\n\t\t\t\t\t: undefined;\n\t\t\tconst blockquoteStyle = blockquoteTextColorClass\n\t\t\t\t? undefined\n\t\t\t\t: { color: customTextColor };\n\t\t\treturn (\n\t\t\t\t<figure className={ figureClass } style={ figureStyles }>\n\t\t\t\t\t<blockquote\n\t\t\t\t\t\tclassName={ blockquoteClasses }\n\t\t\t\t\t\tstyle={ blockquoteStyle }\n\t\t\t\t\t>\n\t\t\t\t\t\t<RichText.Content value={ value } multiline />\n\t\t\t\t\t\t{ ! RichText.isEmpty( citation ) && (\n\t\t\t\t\t\t\t<RichText.Content\n\t\t\t\t\t\t\t\ttagName=\"cite\"\n\t\t\t\t\t\t\t\tvalue={ citation }\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t) }\n\t\t\t\t\t</blockquote>\n\t\t\t\t</figure>\n\t\t\t);\n\t\t},\n\t\tmigrate( {\n\t\t\tclassName,\n\t\t\tmainColor,\n\t\t\tcustomMainColor,\n\t\t\tcustomTextColor,\n\t\t\t...attributes\n\t\t} ) {\n\t\t\tconst isSolidColorStyle = includes( className, SOLID_COLOR_CLASS );\n\t\t\tlet style = {};\n\n\t\t\tif ( customMainColor ) {\n\t\t\t\tif ( ! isSolidColorStyle ) {\n\t\t\t\t\t// Block supports: Set style.border.color if a deprecated block has a default style and a `customMainColor` attribute.\n\t\t\t\t\tstyle = {\n\t\t\t\t\t\tborder: {\n\t\t\t\t\t\t\tcolor: customMainColor,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t} else {\n\t\t\t\t\t// Block supports: Set style.color.background if a deprecated block has a solid style and a `customMainColor` attribute.\n\t\t\t\t\tstyle = {\n\t\t\t\t\t\tcolor: {\n\t\t\t\t\t\t\tbackground: customMainColor,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Block supports: Set style.color.text if a deprecated block has a `customTextColor` attribute.\n\t\t\tif ( customTextColor && style ) {\n\t\t\t\tstyle.color = {\n\t\t\t\t\t...style.color,\n\t\t\t\t\ttext: customTextColor,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tclassName,\n\t\t\t\tbackgroundColor: isSolidColorStyle ? mainColor : undefined,\n\t\t\t\tborderColor: isSolidColorStyle ? undefined : mainColor,\n\t\t\t\ttextAlign: isSolidColorStyle ? 'left' : undefined,\n\t\t\t\tstyle,\n\t\t\t\t...attributes,\n\t\t\t};\n\t\t},\n\t},\n\t{\n\t\tattributes: {\n\t\t\t...blockAttributes,\n\t\t},\n\t\tsave( { attributes } ) {\n\t\t\tconst { value, citation } = attributes;\n\t\t\treturn (\n\t\t\t\t<blockquote>\n\t\t\t\t\t<RichText.Content value={ value } multiline />\n\t\t\t\t\t{ ! RichText.isEmpty( citation ) && (\n\t\t\t\t\t\t<RichText.Content tagName=\"cite\" value={ citation } />\n\t\t\t\t\t) }\n\t\t\t\t</blockquote>\n\t\t\t);\n\t\t},\n\t},\n\t{\n\t\tattributes: {\n\t\t\t...blockAttributes,\n\t\t\tcitation: {\n\t\t\t\ttype: 'string',\n\t\t\t\tsource: 'html',\n\t\t\t\tselector: 'footer',\n\t\t\t},\n\t\t\talign: {\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: 'none',\n\t\t\t},\n\t\t},\n\n\t\tsave( { attributes } ) {\n\t\t\tconst { value, citation, align } = attributes;\n\n\t\t\treturn (\n\t\t\t\t<blockquote className={ `align${ align }` }>\n\t\t\t\t\t<RichText.Content value={ value } multiline />\n\t\t\t\t\t{ ! RichText.isEmpty( citation ) && (\n\t\t\t\t\t\t<RichText.Content tagName=\"footer\" value={ citation } />\n\t\t\t\t\t) }\n\t\t\t\t</blockquote>\n\t\t\t);\n\t\t},\n\t},\n];\n\nexport default deprecated;\n"]}
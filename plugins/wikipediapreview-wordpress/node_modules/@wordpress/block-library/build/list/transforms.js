"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _blocks = require("@wordpress/blocks");

var _richText = require("@wordpress/rich-text");

/**
 * WordPress dependencies
 */
function getListContentSchema({
  phrasingContentSchema
}) {
  const listContentSchema = { ...phrasingContentSchema,
    ul: {},
    ol: {
      attributes: ['type', 'start', 'reversed']
    }
  }; // Recursion is needed.
  // Possible: ul > li > ul.
  // Impossible: ul > ul.

  ['ul', 'ol'].forEach(tag => {
    listContentSchema[tag].children = {
      li: {
        children: listContentSchema
      }
    };
  });
  return listContentSchema;
}

const transforms = {
  from: [{
    type: 'block',
    isMultiBlock: true,
    blocks: ['core/paragraph', 'core/heading'],
    transform: blockAttributes => {
      return (0, _blocks.createBlock)('core/list', {
        values: (0, _richText.toHTMLString)({
          value: (0, _richText.join)(blockAttributes.map(({
            content
          }) => {
            const value = (0, _richText.create)({
              html: content
            });

            if (blockAttributes.length > 1) {
              return value;
            } // When converting only one block, transform
            // every line to a list item.


            return (0, _richText.replace)(value, /\n/g, _richText.__UNSTABLE_LINE_SEPARATOR);
          }), _richText.__UNSTABLE_LINE_SEPARATOR),
          multilineTag: 'li'
        }),
        anchor: blockAttributes.anchor
      });
    }
  }, {
    type: 'block',
    blocks: ['core/quote', 'core/pullquote'],
    transform: ({
      value,
      anchor
    }) => {
      return (0, _blocks.createBlock)('core/list', {
        values: (0, _richText.toHTMLString)({
          value: (0, _richText.create)({
            html: value,
            multilineTag: 'p'
          }),
          multilineTag: 'li'
        }),
        anchor
      });
    }
  }, {
    type: 'raw',
    selector: 'ol,ul',
    schema: args => ({
      ol: getListContentSchema(args).ol,
      ul: getListContentSchema(args).ul
    }),

    transform(node) {
      const attributes = {
        ordered: node.nodeName === 'OL',
        anchor: node.id === '' ? undefined : node.id
      };

      if (attributes.ordered) {
        const type = node.getAttribute('type');

        if (type) {
          attributes.type = type;
        }

        if (node.getAttribute('reversed') !== null) {
          attributes.reversed = true;
        }

        const start = parseInt(node.getAttribute('start'), 10);

        if (!isNaN(start) && ( // start=1 only makes sense if the list is reversed.
        start !== 1 || attributes.reversed)) {
          attributes.start = start;
        }
      }

      return (0, _blocks.createBlock)('core/list', { ...(0, _blocks.getBlockAttributes)('core/list', node.outerHTML),
        ...attributes
      });
    }

  }, ...['*', '-'].map(prefix => ({
    type: 'prefix',
    prefix,

    transform(content) {
      return (0, _blocks.createBlock)('core/list', {
        values: `<li>${content}</li>`
      });
    }

  })), ...['1.', '1)'].map(prefix => ({
    type: 'prefix',
    prefix,

    transform(content) {
      return (0, _blocks.createBlock)('core/list', {
        ordered: true,
        values: `<li>${content}</li>`
      });
    }

  }))],
  to: [{
    type: 'block',
    blocks: ['core/paragraph'],
    transform: ({
      values
    }) => (0, _richText.split)((0, _richText.create)({
      html: values,
      multilineTag: 'li',
      multilineWrapperTags: ['ul', 'ol']
    }), _richText.__UNSTABLE_LINE_SEPARATOR).map(piece => (0, _blocks.createBlock)('core/paragraph', {
      content: (0, _richText.toHTMLString)({
        value: piece
      })
    }))
  }, {
    type: 'block',
    blocks: ['core/heading'],
    transform: ({
      values
    }) => (0, _richText.split)((0, _richText.create)({
      html: values,
      multilineTag: 'li',
      multilineWrapperTags: ['ul', 'ol']
    }), _richText.__UNSTABLE_LINE_SEPARATOR).map(piece => (0, _blocks.createBlock)('core/heading', {
      content: (0, _richText.toHTMLString)({
        value: piece
      })
    }))
  }, {
    type: 'block',
    blocks: ['core/quote'],
    transform: ({
      values,
      anchor
    }) => {
      return (0, _blocks.createBlock)('core/quote', {
        value: (0, _richText.toHTMLString)({
          value: (0, _richText.create)({
            html: values,
            multilineTag: 'li',
            multilineWrapperTags: ['ul', 'ol']
          }),
          multilineTag: 'p'
        }),
        anchor
      });
    }
  }, {
    type: 'block',
    blocks: ['core/pullquote'],
    transform: ({
      values,
      anchor
    }) => {
      return (0, _blocks.createBlock)('core/pullquote', {
        value: (0, _richText.toHTMLString)({
          value: (0, _richText.create)({
            html: values,
            multilineTag: 'li',
            multilineWrapperTags: ['ul', 'ol']
          }),
          multilineTag: 'p'
        }),
        anchor
      });
    }
  }]
};
var _default = transforms;
exports.default = _default;
//# sourceMappingURL=transforms.js.map
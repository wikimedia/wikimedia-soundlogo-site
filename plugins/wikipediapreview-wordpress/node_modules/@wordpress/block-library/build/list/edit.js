"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ListEdit;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _i18n = require("@wordpress/i18n");

var _blocks = require("@wordpress/blocks");

var _blockEditor = require("@wordpress/block-editor");

var _components = require("@wordpress/components");

var _richText = require("@wordpress/rich-text");

var _icons = require("@wordpress/icons");

var _ = require("./");

var _orderedListSettings = _interopRequireDefault(require("./ordered-list-settings"));

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
function ListEdit({
  attributes,
  setAttributes,
  mergeBlocks,
  onReplace,
  style
}) {
  const {
    ordered,
    values,
    type,
    reversed,
    start,
    placeholder
  } = attributes;
  const tagName = ordered ? 'ol' : 'ul';

  const controls = ({
    value,
    onChange,
    onFocus
  }) => (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(_blockEditor.RichTextShortcut, {
    type: "primary",
    character: "[",
    onUse: () => {
      onChange((0, _richText.__unstableOutdentListItems)(value));
    }
  }), (0, _element.createElement)(_blockEditor.RichTextShortcut, {
    type: "primary",
    character: "]",
    onUse: () => {
      onChange((0, _richText.__unstableIndentListItems)(value, {
        type: tagName
      }));
    }
  }), (0, _element.createElement)(_blockEditor.RichTextShortcut, {
    type: "primary",
    character: "m",
    onUse: () => {
      onChange((0, _richText.__unstableIndentListItems)(value, {
        type: tagName
      }));
    }
  }), (0, _element.createElement)(_blockEditor.RichTextShortcut, {
    type: "primaryShift",
    character: "m",
    onUse: () => {
      onChange((0, _richText.__unstableOutdentListItems)(value));
    }
  }), (0, _element.createElement)(_blockEditor.BlockControls, {
    group: "block"
  }, (0, _element.createElement)(_components.ToolbarButton, {
    icon: (0, _i18n.isRTL)() ? _icons.formatListBulletsRTL : _icons.formatListBullets,
    title: (0, _i18n.__)('Unordered'),
    describedBy: (0, _i18n.__)('Convert to unordered list'),
    isActive: (0, _richText.__unstableIsActiveListType)(value, 'ul', tagName),
    onClick: () => {
      onChange((0, _richText.__unstableChangeListType)(value, {
        type: 'ul'
      }));
      onFocus();

      if ((0, _richText.__unstableIsListRootSelected)(value)) {
        setAttributes({
          ordered: false
        });
      }
    }
  }), (0, _element.createElement)(_components.ToolbarButton, {
    icon: (0, _i18n.isRTL)() ? _icons.formatListNumberedRTL : _icons.formatListNumbered,
    title: (0, _i18n.__)('Ordered'),
    describedBy: (0, _i18n.__)('Convert to ordered list'),
    isActive: (0, _richText.__unstableIsActiveListType)(value, 'ol', tagName),
    onClick: () => {
      onChange((0, _richText.__unstableChangeListType)(value, {
        type: 'ol'
      }));
      onFocus();

      if ((0, _richText.__unstableIsListRootSelected)(value)) {
        setAttributes({
          ordered: true
        });
      }
    }
  }), (0, _element.createElement)(_components.ToolbarButton, {
    icon: (0, _i18n.isRTL)() ? _icons.formatOutdentRTL : _icons.formatOutdent,
    title: (0, _i18n.__)('Outdent'),
    describedBy: (0, _i18n.__)('Outdent list item'),
    shortcut: (0, _i18n._x)('Backspace', 'keyboard key'),
    isDisabled: !(0, _richText.__unstableCanOutdentListItems)(value),
    onClick: () => {
      onChange((0, _richText.__unstableOutdentListItems)(value));
      onFocus();
    }
  }), (0, _element.createElement)(_components.ToolbarButton, {
    icon: (0, _i18n.isRTL)() ? _icons.formatIndentRTL : _icons.formatIndent,
    title: (0, _i18n.__)('Indent'),
    describedBy: (0, _i18n.__)('Indent list item'),
    shortcut: (0, _i18n._x)('Space', 'keyboard key'),
    isDisabled: !(0, _richText.__unstableCanIndentListItems)(value),
    onClick: () => {
      onChange((0, _richText.__unstableIndentListItems)(value, {
        type: tagName
      }));
      onFocus();
    }
  })));

  const blockProps = (0, _blockEditor.useBlockProps)({
    style
  });
  return (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(_blockEditor.RichText, (0, _extends2.default)({
    identifier: "values",
    multiline: "li",
    tagName: tagName,
    onChange: nextValues => setAttributes({
      values: nextValues
    }),
    value: values,
    "aria-label": (0, _i18n.__)('List text'),
    placeholder: placeholder || (0, _i18n.__)('List'),
    onMerge: mergeBlocks,
    onSplit: value => (0, _blocks.createBlock)(_.name, { ...attributes,
      values: value
    }),
    __unstableOnSplitMiddle: () => (0, _blocks.createBlock)('core/paragraph'),
    onReplace: onReplace,
    onRemove: () => onReplace([]),
    start: start,
    reversed: reversed,
    type: type
  }, blockProps), controls), ordered && (0, _element.createElement)(_orderedListSettings.default, {
    setAttributes: setAttributes,
    ordered: ordered,
    reversed: reversed,
    start: start,
    placeholder: placeholder
  }));
}
//# sourceMappingURL=edit.js.map
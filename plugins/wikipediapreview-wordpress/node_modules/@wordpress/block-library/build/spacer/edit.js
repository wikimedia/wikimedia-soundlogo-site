"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _classnames = _interopRequireDefault(require("classnames"));

var _i18n = require("@wordpress/i18n");

var _blockEditor = require("@wordpress/block-editor");

var _components = require("@wordpress/components");

var _compose = require("@wordpress/compose");

var _data = require("@wordpress/data");

var _primitives = require("@wordpress/primitives");

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */
const MIN_SPACER_HEIGHT = 1;
const MAX_SPACER_HEIGHT = 500;
const MIN_SPACER_WIDTH = 1;
const MAX_SPACER_WIDTH = 500;

const SpacerEdit = ({
  attributes,
  isSelected,
  setAttributes,
  onResizeStart,
  onResizeStop,
  context
}) => {
  const {
    orientation
  } = context;
  const [isResizing, setIsResizing] = (0, _element.useState)(false);
  const {
    height,
    width
  } = attributes;

  const updateHeight = value => {
    setAttributes({
      height: value
    });
  };

  const updateWidth = value => {
    setAttributes({
      width: value
    });
  };

  const handleOnResizeStart = (...args) => {
    onResizeStart(...args);
    setIsResizing(true);
  };

  const handleOnVerticalResizeStop = (event, direction, elt, delta) => {
    onResizeStop();
    const spacerHeight = Math.min(parseInt(height + delta.height, 10), MAX_SPACER_HEIGHT);
    updateHeight(spacerHeight);
    setIsResizing(false);
  };

  const handleOnHorizontalResizeStop = (event, direction, elt, delta) => {
    onResizeStop();
    const spacerWidth = Math.min(parseInt(width + delta.width, 10), MAX_SPACER_WIDTH);
    updateWidth(spacerWidth);
    setIsResizing(false);
  };

  const resizableBoxWithOrientation = blockOrientation => {
    if (blockOrientation === 'horizontal') {
      return (0, _element.createElement)(_components.ResizableBox, {
        className: (0, _classnames.default)('block-library-spacer__resize-container', 'resize-horizontal', {
          'is-selected': isSelected
        }),
        size: {
          width,
          height: 24
        },
        minWidth: MIN_SPACER_WIDTH,
        enable: {
          top: false,
          right: true,
          bottom: false,
          left: false,
          topRight: false,
          bottomRight: false,
          bottomLeft: false,
          topLeft: false
        },
        onResizeStart: handleOnResizeStart,
        onResizeStop: handleOnHorizontalResizeStop,
        showHandle: isSelected,
        __experimentalShowTooltip: true,
        __experimentalTooltipProps: {
          axis: 'x',
          position: 'corner',
          isVisible: isResizing
        }
      });
    }

    return (0, _element.createElement)(_components.ResizableBox, {
      className: (0, _classnames.default)('block-library-spacer__resize-container', {
        'is-selected': isSelected
      }),
      size: {
        height
      },
      minHeight: MIN_SPACER_HEIGHT,
      enable: {
        top: false,
        right: false,
        bottom: true,
        left: false,
        topRight: false,
        bottomRight: false,
        bottomLeft: false,
        topLeft: false
      },
      onResizeStart: handleOnResizeStart,
      onResizeStop: handleOnVerticalResizeStop,
      showHandle: isSelected,
      __experimentalShowTooltip: true,
      __experimentalTooltipProps: {
        axis: 'y',
        position: 'bottom',
        isVisible: isResizing
      }
    });
  };

  (0, _element.useEffect)(() => {
    if (orientation === 'horizontal' && !width) {
      updateWidth(72);
      updateHeight(0);
    }
  }, []);
  return (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(_primitives.View, (0, _blockEditor.useBlockProps)(), resizableBoxWithOrientation(orientation)), (0, _element.createElement)(_blockEditor.InspectorControls, null, (0, _element.createElement)(_components.PanelBody, {
    title: (0, _i18n.__)('Spacer settings')
  }, orientation === 'horizontal' && (0, _element.createElement)(_components.RangeControl, {
    label: (0, _i18n.__)('Width in pixels'),
    min: MIN_SPACER_WIDTH,
    max: Math.max(MAX_SPACER_WIDTH, width),
    value: width,
    onChange: updateWidth
  }), orientation !== 'horizontal' && (0, _element.createElement)(_components.RangeControl, {
    label: (0, _i18n.__)('Height in pixels'),
    min: MIN_SPACER_HEIGHT,
    max: Math.max(MAX_SPACER_HEIGHT, height),
    value: height,
    onChange: updateHeight
  }))));
};

var _default = (0, _compose.compose)([(0, _data.withDispatch)(dispatch => {
  const {
    toggleSelection
  } = dispatch(_blockEditor.store);
  return {
    onResizeStart: () => toggleSelection(false),
    onResizeStop: () => toggleSelection(true)
  };
}), _compose.withInstanceId])(SpacerEdit);

exports.default = _default;
//# sourceMappingURL=edit.js.map
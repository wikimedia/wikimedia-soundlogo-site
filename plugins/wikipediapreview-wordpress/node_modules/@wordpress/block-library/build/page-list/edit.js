"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = PageListEdit;

var _element = require("@wordpress/element");

var _classnames = _interopRequireDefault(require("classnames"));

var _blockEditor = require("@wordpress/block-editor");

var _serverSideRender = _interopRequireDefault(require("@wordpress/server-side-render"));

var _components = require("@wordpress/components");

var _i18n = require("@wordpress/i18n");

var _data = require("@wordpress/data");

var _apiFetch = _interopRequireDefault(require("@wordpress/api-fetch"));

var _url = require("@wordpress/url");

var _convertToLinksModal = _interopRequireDefault(require("./convert-to-links-modal"));

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
// We only show the edit option when page count is <= MAX_PAGE_COUNT
// Performance of Navigation Links is not good past this value.
const MAX_PAGE_COUNT = 100;

function PageListEdit({
  context,
  clientId,
  attributes,
  setAttributes
}) {
  // Copy context to attributes to make it accessible in the editor's
  // ServerSideRender
  (0, _element.useEffect)(() => {
    const {
      textColor,
      customTextColor,
      backgroundColor,
      customBackgroundColor,
      overlayTextColor,
      customOverlayTextColor,
      overlayBackgroundColor,
      customOverlayBackgroundColor
    } = context;
    setAttributes({
      textColor,
      customTextColor,
      backgroundColor,
      customBackgroundColor,
      overlayTextColor,
      customOverlayTextColor,
      overlayBackgroundColor,
      customOverlayBackgroundColor
    });
  }, [context.textColor, context.customTextColor, context.backgroundColor, context.customBackgroundColor, context.overlayTextColor, context.customOverlayTextColor, context.overlayBackgroundColor, context.customOverlayBackgroundColor]);
  const {
    textColor,
    backgroundColor,
    style
  } = context || {};
  const [allowConvertToLinks, setAllowConvertToLinks] = (0, _element.useState)(false);
  const blockProps = (0, _blockEditor.useBlockProps)({
    className: (0, _classnames.default)({
      'has-text-color': !!textColor,
      [(0, _blockEditor.getColorClassName)('color', textColor)]: !!textColor,
      'has-background': !!backgroundColor,
      [(0, _blockEditor.getColorClassName)('background-color', backgroundColor)]: !!backgroundColor
    }),
    style: { ...(style === null || style === void 0 ? void 0 : style.color)
    }
  });
  const isParentNavigation = (0, _data.useSelect)(select => {
    const {
      getBlockParentsByBlockName
    } = select(_blockEditor.store);
    return getBlockParentsByBlockName(clientId, 'core/navigation').length > 0;
  }, [clientId]);
  (0, _element.useEffect)(() => {
    setAttributes({
      isNavigationChild: isParentNavigation,
      openSubmenusOnClick: !!context.openSubmenusOnClick,
      showSubmenuIcon: !!context.showSubmenuIcon
    });
  }, [context.openSubmenusOnClick, context.showSubmenuIcon]);
  (0, _element.useEffect)(() => {
    if (isParentNavigation) {
      (0, _apiFetch.default)({
        path: (0, _url.addQueryArgs)('/wp/v2/pages', {
          per_page: 1,
          _fields: ['id']
        }),
        parse: false
      }).then(res => {
        setAllowConvertToLinks(res.headers.get('X-WP-Total') <= MAX_PAGE_COUNT);
      });
    } else {
      setAllowConvertToLinks(false);
    }
  }, [isParentNavigation]);
  const [isOpen, setOpen] = (0, _element.useState)(false);

  const openModal = () => setOpen(true);

  const closeModal = () => setOpen(false); // Update parent status before component first renders.


  const attributesWithParentStatus = { ...attributes,
    isNavigationChild: isParentNavigation,
    openSubmenusOnClick: !!context.openSubmenusOnClick,
    showSubmenuIcon: !!context.showSubmenuIcon
  };
  return (0, _element.createElement)(_element.Fragment, null, allowConvertToLinks && (0, _element.createElement)(_blockEditor.BlockControls, {
    group: "other"
  }, (0, _element.createElement)(_components.ToolbarButton, {
    title: (0, _i18n.__)('Edit'),
    onClick: openModal
  }, (0, _i18n.__)('Edit'))), allowConvertToLinks && isOpen && (0, _element.createElement)(_convertToLinksModal.default, {
    onClose: closeModal,
    clientId: clientId
  }), (0, _element.createElement)("div", blockProps, (0, _element.createElement)(_serverSideRender.default, {
    block: "core/page-list",
    attributes: attributesWithParentStatus
  })));
}
//# sourceMappingURL=edit.js.map
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = PostTemplateEdit;

var _element = require("@wordpress/element");

var _classnames = _interopRequireDefault(require("classnames"));

var _data = require("@wordpress/data");

var _i18n = require("@wordpress/i18n");

var _blockEditor = require("@wordpress/block-editor");

var _components = require("@wordpress/components");

var _coreData = require("@wordpress/core-data");

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */
const TEMPLATE = [['core/post-title'], ['core/post-date'], ['core/post-excerpt']];

function PostTemplateEdit({
  clientId,
  context: {
    query: {
      perPage,
      offset,
      categoryIds = [],
      postType,
      tagIds = [],
      order,
      orderBy,
      author,
      search,
      exclude,
      sticky,
      inherit
    } = {},
    queryContext = [{
      page: 1
    }],
    templateSlug,
    displayLayout: {
      type: layoutType = 'flex',
      columns = 1
    } = {}
  }
}) {
  const [{
    page
  }] = queryContext;
  const [activeBlockContext, setActiveBlockContext] = (0, _element.useState)();
  const {
    posts,
    blocks
  } = (0, _data.useSelect)(select => {
    const {
      getEntityRecords
    } = select(_coreData.store);
    const {
      getBlocks
    } = select(_blockEditor.store);
    const query = {
      offset: perPage ? perPage * (page - 1) + offset : 0,
      categories: categoryIds,
      tags: tagIds,
      order,
      orderby: orderBy
    };

    if (perPage) {
      query.per_page = perPage;
    }

    if (author) {
      query.author = author;
    }

    if (search) {
      query.search = search;
    }

    if (exclude !== null && exclude !== void 0 && exclude.length) {
      query.exclude = exclude;
    } // If sticky is not set, it will return all posts in the results.
    // If sticky is set to `only`, it will limit the results to sticky posts only.
    // If it is anything else, it will exclude sticky posts from results. For the record the value stored is `exclude`.


    if (sticky) {
      query.sticky = sticky === 'only';
    } // If `inherit` is truthy, adjust conditionally the query to create a better preview.


    if (inherit) {
      // Change the post-type if needed.
      if (templateSlug !== null && templateSlug !== void 0 && templateSlug.startsWith('archive-')) {
        query.postType = templateSlug.replace('archive-', '');
        postType = query.postType;
      }
    }

    return {
      posts: getEntityRecords('postType', postType, query),
      blocks: getBlocks(clientId)
    };
  }, [perPage, page, offset, categoryIds, tagIds, order, orderBy, clientId, author, search, postType, exclude, sticky, inherit, templateSlug]);
  const blockContexts = (0, _element.useMemo)(() => posts === null || posts === void 0 ? void 0 : posts.map(post => ({
    postType: post.type,
    postId: post.id
  })), [posts]);
  const hasLayoutFlex = layoutType === 'flex' && columns > 1;
  const blockProps = (0, _blockEditor.useBlockProps)({
    className: (0, _classnames.default)({
      'is-flex-container': hasLayoutFlex,
      [`columns-${columns}`]: hasLayoutFlex
    })
  });
  const innerBlocksProps = (0, _blockEditor.__experimentalUseInnerBlocksProps)({}, {
    template: TEMPLATE
  });

  if (!posts) {
    return (0, _element.createElement)("p", blockProps, (0, _element.createElement)(_components.Spinner, null));
  }

  if (!posts.length) {
    return (0, _element.createElement)("p", blockProps, " ", (0, _i18n.__)('No results found.'));
  }

  return (0, _element.createElement)("ul", blockProps, blockContexts && blockContexts.map(blockContext => (0, _element.createElement)(_blockEditor.BlockContextProvider, {
    key: blockContext.postId,
    value: blockContext
  }, blockContext === (activeBlockContext || blockContexts[0]) ? (0, _element.createElement)("li", innerBlocksProps) : (0, _element.createElement)("li", null, (0, _element.createElement)(_blockEditor.BlockPreview, {
    blocks: blocks,
    __experimentalLive: true,
    __experimentalOnClick: () => setActiveBlockContext(blockContext)
  })))));
}
//# sourceMappingURL=edit.js.map
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = PostFeaturedImageEdit;

var _element = require("@wordpress/element");

var _coreData = require("@wordpress/core-data");

var _data = require("@wordpress/data");

var _components = require("@wordpress/components");

var _blockEditor = require("@wordpress/block-editor");

var _i18n = require("@wordpress/i18n");

var _icons = require("@wordpress/icons");

var _dimensionControls = _interopRequireDefault(require("./dimension-controls"));

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
const ALLOWED_MEDIA_TYPES = ['image'];
const placeholderChip = (0, _element.createElement)("div", {
  className: "post-featured-image_placeholder"
}, (0, _element.createElement)(_components.Icon, {
  icon: _icons.postFeaturedImage
}), (0, _element.createElement)("p", null, " ", (0, _i18n.__)('Featured Image')));

function PostFeaturedImageDisplay({
  attributes,
  setAttributes,
  context: {
    postId,
    postType,
    queryId
  },
  noticeUI,
  noticeOperations
}) {
  const isDescendentOfQueryLoop = !!queryId;
  const {
    isLink,
    height,
    width,
    scale
  } = attributes;
  const [featuredImage, setFeaturedImage] = (0, _coreData.useEntityProp)('postType', postType, 'featured_media', postId);
  const media = (0, _data.useSelect)(select => featuredImage && select(_coreData.store).getMedia(featuredImage, {
    context: 'view'
  }), [featuredImage]);
  const blockProps = (0, _blockEditor.useBlockProps)({
    style: {
      width
    }
  });

  const onSelectImage = value => {
    if (value !== null && value !== void 0 && value.id) {
      setFeaturedImage(value.id);
    }
  };

  function onUploadError(message) {
    noticeOperations.removeAllNotices();
    noticeOperations.createErrorNotice(message);
  }

  let image;

  if (!featuredImage && isDescendentOfQueryLoop) {
    return (0, _element.createElement)("div", blockProps, placeholderChip);
  }

  if (!featuredImage) {
    image = (0, _element.createElement)(_blockEditor.MediaPlaceholder, {
      icon: (0, _element.createElement)(_blockEditor.BlockIcon, {
        icon: _icons.postFeaturedImage
      }),
      onSelect: onSelectImage,
      notices: noticeUI,
      onError: onUploadError,
      accept: "image/*",
      allowedTypes: ALLOWED_MEDIA_TYPES,
      labels: {
        title: (0, _i18n.__)('Featured image'),
        instructions: (0, _i18n.__)('Upload a media file or pick one from your media library.')
      }
    });
  } else {
    // We have a Featured image so show a Placeholder if is loading.
    image = !media ? placeholderChip : (0, _element.createElement)("img", {
      src: media.source_url,
      alt: media.alt_text || (0, _i18n.__)('Featured image'),
      style: {
        height,
        objectFit: height && scale
      }
    });
  }

  return (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(_blockEditor.InspectorControls, null, (0, _element.createElement)(_dimensionControls.default, {
    attributes: attributes,
    setAttributes: setAttributes
  }), (0, _element.createElement)(_components.PanelBody, {
    title: (0, _i18n.__)('Link settings')
  }, (0, _element.createElement)(_components.ToggleControl, {
    label: (0, _i18n.sprintf)( // translators: %s: Name of the post type e.g: "post".
    (0, _i18n.__)('Link to %s'), postType),
    onChange: () => setAttributes({
      isLink: !isLink
    }),
    checked: isLink
  }))), !!media && !isDescendentOfQueryLoop && (0, _element.createElement)(_blockEditor.BlockControls, {
    group: "other"
  }, (0, _element.createElement)(_blockEditor.MediaReplaceFlow, {
    mediaId: featuredImage,
    mediaURL: media.source_url,
    allowedTypes: ALLOWED_MEDIA_TYPES,
    accept: "image/*",
    onSelect: onSelectImage,
    onError: onUploadError
  })), (0, _element.createElement)("figure", blockProps, image));
}

const PostFeaturedImageWithNotices = (0, _components.withNotices)(PostFeaturedImageDisplay);

function PostFeaturedImageEdit(props) {
  var _props$context;

  const blockProps = (0, _blockEditor.useBlockProps)();

  if (!((_props$context = props.context) !== null && _props$context !== void 0 && _props$context.postId)) {
    return (0, _element.createElement)("div", blockProps, placeholderChip);
  }

  return (0, _element.createElement)(PostFeaturedImageWithNotices, props);
}
//# sourceMappingURL=edit.js.map
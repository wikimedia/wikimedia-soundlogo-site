{"version":3,"sources":["@wordpress/blocks/src/api/parser/get-block-attributes.js"],"names":["toBooleanAttributeMatcher","matcher","value","undefined","isOfType","type","constructor","Object","Array","isArray","isOfTypes","types","some","getBlockAttribute","attributeKey","attributeSchema","innerHTML","commentAttributes","enum","enumSet","source","parseWithAttributeSchema","isValidByType","isValidByEnum","default","includes","matcherFromSource","sourceConfig","selector","attribute","multiline","subMatchers","query","nodeName","toLowerCase","console","error","getBlockAttributes","blockTypeOrName","attributes","blockType","blockAttributes"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { parse as hpqParse } from 'hpq';\nimport { flow, mapValues, castArray } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { applyFilters } from '@wordpress/hooks';\n\n/**\n * Internal dependencies\n */\nimport { attr, html, text, query, node, children, prop } from '../matchers';\nimport { normalizeBlockType } from '../utils';\n\n/**\n * Higher-order hpq matcher which enhances an attribute matcher to return true\n * or false depending on whether the original matcher returns undefined. This\n * is useful for boolean attributes (e.g. disabled) whose attribute values may\n * be technically falsey (empty string), though their mere presence should be\n * enough to infer as true.\n *\n * @param {Function} matcher Original hpq matcher.\n *\n * @return {Function} Enhanced hpq matcher.\n */\nexport const toBooleanAttributeMatcher = ( matcher ) =>\n\tflow( [\n\t\tmatcher,\n\t\t// Expected values from `attr( 'disabled' )`:\n\t\t//\n\t\t// <input>\n\t\t// - Value:       `undefined`\n\t\t// - Transformed: `false`\n\t\t//\n\t\t// <input disabled>\n\t\t// - Value:       `''`\n\t\t// - Transformed: `true`\n\t\t//\n\t\t// <input disabled=\"disabled\">\n\t\t// - Value:       `'disabled'`\n\t\t// - Transformed: `true`\n\t\t( value ) => value !== undefined,\n\t] );\n\n/**\n * Returns true if value is of the given JSON schema type, or false otherwise.\n *\n * @see http://json-schema.org/latest/json-schema-validation.html#rfc.section.6.25\n *\n * @param {*}      value Value to test.\n * @param {string} type  Type to test.\n *\n * @return {boolean} Whether value is of type.\n */\nexport function isOfType( value, type ) {\n\tswitch ( type ) {\n\t\tcase 'string':\n\t\t\treturn typeof value === 'string';\n\n\t\tcase 'boolean':\n\t\t\treturn typeof value === 'boolean';\n\n\t\tcase 'object':\n\t\t\treturn !! value && value.constructor === Object;\n\n\t\tcase 'null':\n\t\t\treturn value === null;\n\n\t\tcase 'array':\n\t\t\treturn Array.isArray( value );\n\n\t\tcase 'integer':\n\t\tcase 'number':\n\t\t\treturn typeof value === 'number';\n\t}\n\n\treturn true;\n}\n\n/**\n * Returns true if value is of an array of given JSON schema types, or false\n * otherwise.\n *\n * @see http://json-schema.org/latest/json-schema-validation.html#rfc.section.6.25\n *\n * @param {*}        value Value to test.\n * @param {string[]} types Types to test.\n *\n * @return {boolean} Whether value is of types.\n */\nexport function isOfTypes( value, types ) {\n\treturn types.some( ( type ) => isOfType( value, type ) );\n}\n\n/**\n * Given an attribute key, an attribute's schema, a block's raw content and the\n * commentAttributes returns the attribute value depending on its source\n * definition of the given attribute key.\n *\n * @param {string} attributeKey      Attribute key.\n * @param {Object} attributeSchema   Attribute's schema.\n * @param {string} innerHTML         Block's raw content.\n * @param {Object} commentAttributes Block's comment attributes.\n *\n * @return {*} Attribute value.\n */\nexport function getBlockAttribute(\n\tattributeKey,\n\tattributeSchema,\n\tinnerHTML,\n\tcommentAttributes\n) {\n\tconst { type, enum: enumSet } = attributeSchema;\n\tlet value;\n\n\tswitch ( attributeSchema.source ) {\n\t\t// An undefined source means that it's an attribute serialized to the\n\t\t// block's \"comment\".\n\t\tcase undefined:\n\t\t\tvalue = commentAttributes\n\t\t\t\t? commentAttributes[ attributeKey ]\n\t\t\t\t: undefined;\n\t\t\tbreak;\n\t\tcase 'attribute':\n\t\tcase 'property':\n\t\tcase 'html':\n\t\tcase 'text':\n\t\tcase 'children':\n\t\tcase 'node':\n\t\tcase 'query':\n\t\tcase 'tag':\n\t\t\tvalue = parseWithAttributeSchema( innerHTML, attributeSchema );\n\t\t\tbreak;\n\t}\n\n\tif ( ! isValidByType( value, type ) || ! isValidByEnum( value, enumSet ) ) {\n\t\t// Reject the value if it is not valid. Reverting to the undefined\n\t\t// value ensures the default is respected, if applicable.\n\t\tvalue = undefined;\n\t}\n\n\tif ( value === undefined ) {\n\t\treturn attributeSchema.default;\n\t}\n\n\treturn value;\n}\n\n/**\n * Returns true if value is valid per the given block attribute schema type\n * definition, or false otherwise.\n *\n * @see https://json-schema.org/latest/json-schema-validation.html#rfc.section.6.1.1\n *\n * @param {*}                       value Value to test.\n * @param {?(Array<string>|string)} type  Block attribute schema type.\n *\n * @return {boolean} Whether value is valid.\n */\nexport function isValidByType( value, type ) {\n\treturn type === undefined || isOfTypes( value, castArray( type ) );\n}\n\n/**\n * Returns true if value is valid per the given block attribute schema enum\n * definition, or false otherwise.\n *\n * @see https://json-schema.org/latest/json-schema-validation.html#rfc.section.6.1.2\n *\n * @param {*}      value   Value to test.\n * @param {?Array} enumSet Block attribute schema enum.\n *\n * @return {boolean} Whether value is valid.\n */\nexport function isValidByEnum( value, enumSet ) {\n\treturn ! Array.isArray( enumSet ) || enumSet.includes( value );\n}\n\n/**\n * Returns an hpq matcher given a source object.\n *\n * @param {Object} sourceConfig Attribute Source object.\n *\n * @return {Function} A hpq Matcher.\n */\nexport function matcherFromSource( sourceConfig ) {\n\tswitch ( sourceConfig.source ) {\n\t\tcase 'attribute':\n\t\t\tlet matcher = attr( sourceConfig.selector, sourceConfig.attribute );\n\t\t\tif ( sourceConfig.type === 'boolean' ) {\n\t\t\t\tmatcher = toBooleanAttributeMatcher( matcher );\n\t\t\t}\n\n\t\t\treturn matcher;\n\t\tcase 'html':\n\t\t\treturn html( sourceConfig.selector, sourceConfig.multiline );\n\t\tcase 'text':\n\t\t\treturn text( sourceConfig.selector );\n\t\tcase 'children':\n\t\t\treturn children( sourceConfig.selector );\n\t\tcase 'node':\n\t\t\treturn node( sourceConfig.selector );\n\t\tcase 'query':\n\t\t\tconst subMatchers = mapValues(\n\t\t\t\tsourceConfig.query,\n\t\t\t\tmatcherFromSource\n\t\t\t);\n\t\t\treturn query( sourceConfig.selector, subMatchers );\n\t\tcase 'tag':\n\t\t\treturn flow( [\n\t\t\t\tprop( sourceConfig.selector, 'nodeName' ),\n\t\t\t\t( nodeName ) =>\n\t\t\t\t\tnodeName ? nodeName.toLowerCase() : undefined,\n\t\t\t] );\n\t\tdefault:\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.error( `Unknown source type \"${ sourceConfig.source }\"` );\n\t}\n}\n\n/**\n * Given a block's raw content and an attribute's schema returns the attribute's\n * value depending on its source.\n *\n * @param {string} innerHTML       Block's raw content.\n * @param {Object} attributeSchema Attribute's schema.\n *\n * @return {*} Attribute value.\n */\nexport function parseWithAttributeSchema( innerHTML, attributeSchema ) {\n\treturn hpqParse( innerHTML, matcherFromSource( attributeSchema ) );\n}\n\n/**\n * Returns the block attributes of a registered block node given its type.\n *\n * @param {string|Object} blockTypeOrName Block type or name.\n * @param {string}        innerHTML       Raw block content.\n * @param {?Object}       attributes      Known block attributes (from delimiters).\n *\n * @return {Object} All block attributes.\n */\nexport function getBlockAttributes(\n\tblockTypeOrName,\n\tinnerHTML,\n\tattributes = {}\n) {\n\tconst blockType = normalizeBlockType( blockTypeOrName );\n\tconst blockAttributes = mapValues(\n\t\tblockType.attributes,\n\t\t( attributeSchema, attributeKey ) => {\n\t\t\treturn getBlockAttribute(\n\t\t\t\tattributeKey,\n\t\t\t\tattributeSchema,\n\t\t\t\tinnerHTML,\n\t\t\t\tattributes\n\t\t\t);\n\t\t}\n\t);\n\n\treturn applyFilters(\n\t\t'blocks.getBlockAttributes',\n\t\tblockAttributes,\n\t\tblockType,\n\t\tinnerHTML,\n\t\tattributes\n\t);\n}\n"]}
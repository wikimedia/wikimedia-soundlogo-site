"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useToolsPanelItem = useToolsPanelItem;

var _compose = require("@wordpress/compose");

var _element = require("@wordpress/element");

var styles = _interopRequireWildcard(require("../styles"));

var _context = require("../context");

var _context2 = require("../../ui/context");

var _useCx = require("../../utils/hooks/use-cx");

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
function useToolsPanelItem(props) {
  var _menuItems$menuGroup, _menuItems$menuGroup2;

  const {
    className,
    hasValue,
    isShownByDefault,
    label,
    panelId,
    resetAllFilter,
    onDeselect,
    onSelect,
    ...otherProps
  } = (0, _context2.useContextSystem)(props, 'ToolsPanelItem');
  const cx = (0, _useCx.useCx)();
  const classes = (0, _element.useMemo)(() => {
    return cx(styles.ToolsPanelItem, className);
  }, [className]);
  const {
    panelId: currentPanelId,
    menuItems,
    registerPanelItem,
    deregisterPanelItem,
    flagItemCustomization,
    isResetting
  } = (0, _context.useToolsPanelContext)();
  const hasValueCallback = (0, _element.useCallback)(hasValue, [panelId]);
  const resetAllFilterCallback = (0, _element.useCallback)(resetAllFilter, [panelId]); // Registering the panel item allows the panel to include it in its
  // automatically generated menu and determine its initial checked status.

  (0, _element.useEffect)(() => {
    if (currentPanelId === panelId) {
      registerPanelItem({
        hasValue: hasValueCallback,
        isShownByDefault,
        label,
        resetAllFilter: resetAllFilterCallback,
        panelId
      });
    }

    return () => deregisterPanelItem(label);
  }, [currentPanelId, panelId, isShownByDefault, label, hasValueCallback, resetAllFilterCallback]);
  const isValueSet = hasValue();
  const wasValueSet = (0, _compose.usePrevious)(isValueSet); // If this item represents a default control it will need to notify the
  // panel when a custom value has been set.

  (0, _element.useEffect)(() => {
    if (isShownByDefault && isValueSet && !wasValueSet) {
      flagItemCustomization(label);
    }
  }, [isValueSet, wasValueSet, isShownByDefault, label]); // Note: `label` is used as a key when building menu item state in
  // `ToolsPanel`.

  const menuGroup = isShownByDefault ? 'default' : 'optional';
  const isMenuItemChecked = menuItems === null || menuItems === void 0 ? void 0 : (_menuItems$menuGroup = menuItems[menuGroup]) === null || _menuItems$menuGroup === void 0 ? void 0 : _menuItems$menuGroup[label];
  const wasMenuItemChecked = (0, _compose.usePrevious)(isMenuItemChecked); // Determine if the panel item's corresponding menu is being toggled and
  // trigger appropriate callback if it is.

  (0, _element.useEffect)(() => {
    if (isResetting || currentPanelId !== panelId) {
      return;
    }

    if (isMenuItemChecked && !isValueSet && !wasMenuItemChecked) {
      onSelect === null || onSelect === void 0 ? void 0 : onSelect();
    }

    if (!isMenuItemChecked && wasMenuItemChecked) {
      onDeselect === null || onDeselect === void 0 ? void 0 : onDeselect();
    }
  }, [currentPanelId, isMenuItemChecked, isResetting, isValueSet, panelId, wasMenuItemChecked]); // The item is shown if it is a default control regardless of whether it
  // has a value. Optional items are shown when they are checked or have
  // a value.

  const isShown = isShownByDefault ? (menuItems === null || menuItems === void 0 ? void 0 : (_menuItems$menuGroup2 = menuItems[menuGroup]) === null || _menuItems$menuGroup2 === void 0 ? void 0 : _menuItems$menuGroup2[label]) !== undefined : isMenuItemChecked;
  return { ...otherProps,
    isShown,
    className: classes
  };
}
//# sourceMappingURL=hook.js.map
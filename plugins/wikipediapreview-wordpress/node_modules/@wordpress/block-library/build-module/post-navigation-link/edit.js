import { createElement, Fragment } from "@wordpress/element";

/**
 * External dependencies
 */
import classnames from 'classnames';
/**
 * WordPress dependencies
 */

import { ToggleControl, PanelBody } from '@wordpress/components';
import { InspectorControls, RichText, BlockControls, AlignmentToolbar, useBlockProps } from '@wordpress/block-editor';
import { __ } from '@wordpress/i18n';
export default function PostNavigationLinkEdit({
  attributes: {
    type,
    label,
    showTitle,
    textAlign,
    linkLabel
  },
  setAttributes
}) {
  const isNext = type === 'next';
  let placeholder = isNext ? __('Next') : __('Previous');

  if (showTitle) {
    /* translators: Label before for next and previous post. There is a space after the colon. */
    placeholder = isNext ? __('Next: ') : __('Previous: ');
  }

  const ariaLabel = isNext ? __('Next post') : __('Previous post');
  const blockProps = useBlockProps({
    className: classnames({
      [`has-text-align-${textAlign}`]: textAlign
    })
  });
  return createElement(Fragment, null, createElement(InspectorControls, null, createElement(PanelBody, null, createElement(ToggleControl, {
    label: __('Display the title as a link'),
    help: __('If you have entered a custom label, it will be prepended before the title.'),
    checked: !!showTitle,
    onChange: () => setAttributes({
      showTitle: !showTitle
    })
  }), showTitle && createElement(ToggleControl, {
    label: __('Include the label as part of the link'),
    checked: !!linkLabel,
    onChange: () => setAttributes({
      linkLabel: !linkLabel
    })
  }))), createElement(BlockControls, null, createElement(AlignmentToolbar, {
    value: textAlign,
    onChange: nextAlign => {
      setAttributes({
        textAlign: nextAlign
      });
    }
  })), createElement("div", blockProps, createElement(RichText, {
    tagName: "a",
    "aria-label": ariaLabel,
    placeholder: placeholder,
    value: label,
    allowedFormats: ['core/bold', 'core/italic'],
    onChange: newLabel => setAttributes({
      label: newLabel
    })
  }), showTitle && createElement("a", {
    href: "#post-navigation-pseudo-link",
    onClick: event => event.preventDefault()
  }, __('An example title'))));
}
//# sourceMappingURL=edit.js.map
import { createElement, Fragment } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { __experimentalBlockPatternSetup as BlockPatternSetup } from '@wordpress/block-editor';
import { useEffect, useState } from '@wordpress/element';
import { __, sprintf } from '@wordpress/i18n';
import { TextControl, Flex, FlexItem, Button, Modal, Placeholder } from '@wordpress/components';
export default function PatternsSetup({
  area,
  areaLabel,
  areaIcon,
  clientId,
  onCreate,
  resetPlaceholder
}) {
  const blockNameWithArea = area ? `core/template-part/${area}` : 'core/template-part'; // Restructure onCreate to set the blocks on local state.
  // Add modal to confirm title and trigger onCreate.

  const [title, setTitle] = useState(__('Untitled Template Part'));
  const [startingBlocks, setStartingBlocks] = useState([]);
  const [isTitleStep, setIsTitleStep] = useState(false);

  const selectPattern = selectedPattern => {
    setStartingBlocks(selectedPattern);
    setIsTitleStep(true);
  };

  const submitForCreation = event => {
    event.preventDefault();
    onCreate(startingBlocks, title);
  };

  return createElement(Fragment, null, createElement(BlockPatternSetup, {
    clientId: clientId,
    startBlankComponent: createElement(StartBlankComponent, {
      setTitleStep: setIsTitleStep,
      areaLabel: areaLabel,
      areaIcon: areaIcon
    }),
    onBlockPatternSelect: selectPattern,
    filterPatternsFn: pattern => {
      var _pattern$blockTypes, _pattern$blockTypes$s;

      return pattern === null || pattern === void 0 ? void 0 : (_pattern$blockTypes = pattern.blockTypes) === null || _pattern$blockTypes === void 0 ? void 0 : (_pattern$blockTypes$s = _pattern$blockTypes.some) === null || _pattern$blockTypes$s === void 0 ? void 0 : _pattern$blockTypes$s.call(_pattern$blockTypes, blockType => blockType === blockNameWithArea);
    }
  }), isTitleStep && createElement(Modal, {
    title: sprintf('Name and create your new %s', areaLabel.toLowerCase()),
    closeLabel: __('Cancel'),
    onRequestClose: resetPlaceholder,
    overlayClassName: "wp-block-template-part__placeholder-create-new__title-form"
  }, createElement("form", {
    onSubmit: submitForCreation
  }, createElement(TextControl, {
    label: __('Name'),
    value: title,
    onChange: setTitle
  }), createElement(Flex, {
    className: "wp-block-template-part__placeholder-create-new__title-form-actions",
    justify: "flex-end"
  }, createElement(FlexItem, null, createElement(Button, {
    variant: "secondary",
    onClick: resetPlaceholder
  }, __('Cancel'))), createElement(FlexItem, null, createElement(Button, {
    variant: "primary",
    type: "submit",
    disabled: !title.length,
    "aria-disabled": !title.length
  }, __('Create')))))));
}

function StartBlankComponent({
  setTitleStep,
  areaLabel,
  areaIcon
}) {
  useEffect(() => {
    setTitleStep(true);
  }, []);
  return createElement(Placeholder, {
    label: areaLabel,
    icon: areaIcon,
    instructions: sprintf( // Translators: %s as template part area title ("Header", "Footer", "Template Part", etc.).
    'Creating your new %s...', areaLabel.toLowerCase())
  });
}
//# sourceMappingURL=patterns-setup.js.map
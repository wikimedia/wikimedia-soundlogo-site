{"version":3,"sources":["@wordpress/block-library/src/query/utils.js"],"names":["useSelect","useMemo","store","coreStore","getTermsInfo","terms","mapping","reduce","accumulator","term","mapById","mapByName","names","id","name","push","usePostTypes","postTypes","select","getPostTypes","excludedPostTypes","filteredPostTypes","per_page","filter","viewable","slug","includes","postTypesTaxonomiesMap","length","type","taxonomies","postTypesSelectOptions","map","labels","label","singular_name","value","getFirstQueryClientIdFromBlocks","blocks","blocksQueue","block","shift","clientId","innerBlocks","forEach","innerBlock"],"mappings":"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","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { useSelect } from '@wordpress/data';\nimport { useMemo } from '@wordpress/element';\nimport { store as coreStore } from '@wordpress/core-data';\n\n/**\n * WordPress term object from REST API.\n * Categories ref: https://developer.wordpress.org/rest-api/reference/categories/\n * Tags ref: https://developer.wordpress.org/rest-api/reference/tags/\n *\n * @typedef {Object} WPTerm\n * @property {number} id          Unique identifier for the term.\n * @property {number} count       Number of published posts for the term.\n * @property {string} description HTML description of the term.\n * @property {string} link        URL of the term.\n * @property {string} name        HTML title for the term.\n * @property {string} slug        An alphanumeric identifier for the term unique to its type.\n * @property {string} taxonomy    Type attribution for the term.\n * @property {Object} meta        Meta fields\n * @property {number} [parent]    The parent term ID.\n */\n\n/**\n * The object used in Query block that contains info and helper mappings\n * from an array of WPTerm.\n *\n * @typedef {Object} QueryTermsInfo\n * @property {WPTerm[]}               terms     The array of terms.\n * @property {Object<string, WPTerm>} mapById   Object mapping with the term id as key and the term as value.\n * @property {Object<string, WPTerm>} mapByName Object mapping with the term name as key and the term as value.\n * @property {string[]}               names     Array with the terms' names.\n */\n\n/**\n * Returns a helper object with mapping from WPTerms.\n *\n * @param {WPTerm[]} terms The terms to extract of helper object.\n * @return {QueryTermsInfo} The object with the terms information.\n */\nexport const getTermsInfo = ( terms ) => {\n\tconst mapping = terms?.reduce(\n\t\t( accumulator, term ) => {\n\t\t\tconst { mapById, mapByName, names } = accumulator;\n\t\t\tmapById[ term.id ] = term;\n\t\t\tmapByName[ term.name ] = term;\n\t\t\tnames.push( term.name );\n\t\t\treturn accumulator;\n\t\t},\n\t\t{ mapById: {}, mapByName: {}, names: [] }\n\t);\n\n\treturn {\n\t\tterms,\n\t\t...mapping,\n\t};\n};\n\n/**\n * Returns a helper object that contains:\n * 1. An `options` object from the available post types, to be passed to a `SelectControl`.\n * 2. A helper map with available taxonomies per post type.\n *\n * @return {Object} The helper object related to post types.\n */\nexport const usePostTypes = () => {\n\tconst { postTypes } = useSelect( ( select ) => {\n\t\tconst { getPostTypes } = select( coreStore );\n\t\tconst excludedPostTypes = [ 'attachment' ];\n\t\tconst filteredPostTypes = getPostTypes( { per_page: -1 } )?.filter(\n\t\t\t( { viewable, slug } ) =>\n\t\t\t\tviewable && ! excludedPostTypes.includes( slug )\n\t\t);\n\t\treturn {\n\t\t\tpostTypes: filteredPostTypes,\n\t\t};\n\t}, [] );\n\tconst postTypesTaxonomiesMap = useMemo( () => {\n\t\tif ( ! postTypes?.length ) return;\n\t\treturn postTypes.reduce( ( accumulator, type ) => {\n\t\t\taccumulator[ type.slug ] = type.taxonomies;\n\t\t\treturn accumulator;\n\t\t}, {} );\n\t}, [ postTypes ] );\n\tconst postTypesSelectOptions = useMemo(\n\t\t() =>\n\t\t\t( postTypes || [] ).map( ( { labels, slug } ) => ( {\n\t\t\t\tlabel: labels.singular_name,\n\t\t\t\tvalue: slug,\n\t\t\t} ) ),\n\t\t[ postTypes ]\n\t);\n\treturn { postTypesTaxonomiesMap, postTypesSelectOptions };\n};\n\n/**\n * Recurses over a list of blocks and returns the first found\n * Query Loop block's clientId.\n *\n * @param {WPBlock[]} blocks The list of blocks to look through.\n * @return {string=} The first found Query Loop's clientId.\n */\nexport const getFirstQueryClientIdFromBlocks = ( blocks ) => {\n\tconst blocksQueue = [ ...blocks ];\n\twhile ( blocksQueue.length > 0 ) {\n\t\tconst block = blocksQueue.shift();\n\t\tif ( block.name === 'core/query' ) {\n\t\t\treturn block.clientId;\n\t\t}\n\t\tblock.innerBlocks?.forEach( ( innerBlock ) => {\n\t\t\tblocksQueue.push( innerBlock );\n\t\t} );\n\t}\n};\n"]}
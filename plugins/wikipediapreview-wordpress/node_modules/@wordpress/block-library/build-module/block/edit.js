import { createElement } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { useSelect, useDispatch } from '@wordpress/data';
import { useEntityBlockEditor, useEntityProp, store as coreStore } from '@wordpress/core-data';
import { Placeholder, Spinner, ToolbarGroup, ToolbarButton, TextControl, PanelBody } from '@wordpress/components';
import { __ } from '@wordpress/i18n';
import { __experimentalUseInnerBlocksProps as useInnerBlocksProps, __experimentalUseNoRecursiveRenders as useNoRecursiveRenders, __experimentalBlockContentOverlay as BlockContentOverlay, InnerBlocks, BlockControls, InspectorControls, useBlockProps, Warning } from '@wordpress/block-editor';
import { store as reusableBlocksStore } from '@wordpress/reusable-blocks';
import { ungroup } from '@wordpress/icons';
export default function ReusableBlockEdit({
  attributes: {
    ref
  },
  clientId
}) {
  const [hasAlreadyRendered, RecursionProvider] = useNoRecursiveRenders(ref);
  const {
    isMissing,
    hasResolved
  } = useSelect(select => {
    const persistedBlock = select(coreStore).getEntityRecord('postType', 'wp_block', ref);
    const hasResolvedBlock = select(coreStore).hasFinishedResolution('getEntityRecord', ['postType', 'wp_block', ref]);
    return {
      hasResolved: hasResolvedBlock,
      isMissing: hasResolvedBlock && !persistedBlock
    };
  }, [ref, clientId]);
  const {
    __experimentalConvertBlockToStatic: convertBlockToStatic
  } = useDispatch(reusableBlocksStore);
  const [blocks, onInput, onChange] = useEntityBlockEditor('postType', 'wp_block', {
    id: ref
  });
  const [title, setTitle] = useEntityProp('postType', 'wp_block', 'title', ref);
  const blockProps = useBlockProps();
  const innerBlocksProps = useInnerBlocksProps({}, {
    value: blocks,
    onInput,
    onChange,
    renderAppender: blocks !== null && blocks !== void 0 && blocks.length ? undefined : InnerBlocks.ButtonBlockAppender
  });

  if (hasAlreadyRendered) {
    return createElement("div", blockProps, createElement(Warning, null, __('Block cannot be rendered inside itself.')));
  }

  if (isMissing) {
    return createElement("div", blockProps, createElement(Warning, null, __('Block has been deleted or is unavailable.')));
  }

  if (!hasResolved) {
    return createElement("div", blockProps, createElement(Placeholder, null, createElement(Spinner, null)));
  }

  return createElement(RecursionProvider, null, createElement("div", blockProps, createElement(BlockControls, null, createElement(ToolbarGroup, null, createElement(ToolbarButton, {
    onClick: () => convertBlockToStatic(clientId),
    label: __('Convert to regular blocks'),
    icon: ungroup,
    showTooltip: true
  }))), createElement(InspectorControls, null, createElement(PanelBody, null, createElement(TextControl, {
    label: __('Name'),
    value: title,
    onChange: setTitle
  }))), createElement(BlockContentOverlay, {
    clientId: clientId,
    wrapperProps: innerBlocksProps,
    className: "block-library-block__reusable-block-container"
  })));
}
//# sourceMappingURL=edit.js.map
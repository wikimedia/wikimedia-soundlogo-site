import { createElement, Fragment } from "@wordpress/element";

/**
 * External dependencies
 */
import classnames from 'classnames';
/**
 * WordPress dependencies
 */

import { BlockControls, useBlockProps, __experimentalUseInnerBlocksProps as useInnerBlocksProps, JustifyContentControl, store as blockEditorStore } from '@wordpress/block-editor';
import { useSelect } from '@wordpress/data';
/**
 * Internal dependencies
 */

import { name as buttonBlockName } from '../button';
const ALLOWED_BLOCKS = [buttonBlockName];
const LAYOUT = {
  type: 'default',
  alignments: []
};
const VERTICAL_JUSTIFY_CONTROLS = ['left', 'center', 'right'];
const HORIZONTAL_JUSTIFY_CONTROLS = ['left', 'center', 'right', 'space-between'];

function ButtonsEdit({
  attributes: {
    contentJustification,
    orientation
  },
  setAttributes
}) {
  const blockProps = useBlockProps({
    className: classnames({
      [`is-content-justification-${contentJustification}`]: contentJustification,
      'is-vertical': orientation === 'vertical'
    })
  });
  const preferredStyle = useSelect(select => {
    var _preferredStyleVariat;

    const preferredStyleVariations = select(blockEditorStore).getSettings().__experimentalPreferredStyleVariations;

    return preferredStyleVariations === null || preferredStyleVariations === void 0 ? void 0 : (_preferredStyleVariat = preferredStyleVariations.value) === null || _preferredStyleVariat === void 0 ? void 0 : _preferredStyleVariat[buttonBlockName];
  }, []);
  const innerBlocksProps = useInnerBlocksProps(blockProps, {
    allowedBlocks: ALLOWED_BLOCKS,
    template: [[buttonBlockName, {
      className: preferredStyle && `is-style-${preferredStyle}`
    }]],
    orientation,
    __experimentalLayout: LAYOUT,
    templateInsertUpdatesSelection: true
  });
  const justifyControls = orientation === 'vertical' ? VERTICAL_JUSTIFY_CONTROLS : HORIZONTAL_JUSTIFY_CONTROLS;
  return createElement(Fragment, null, createElement(BlockControls, {
    group: "block",
    __experimentalShareWithChildBlocks: true
  }, createElement(JustifyContentControl, {
    allowedControls: justifyControls,
    value: contentJustification,
    onChange: value => setAttributes({
      contentJustification: value
    }),
    popoverProps: {
      position: 'bottom right',
      isAlternate: true
    }
  })), createElement("div", innerBlocksProps));
}

export default ButtonsEdit;
//# sourceMappingURL=edit.js.map
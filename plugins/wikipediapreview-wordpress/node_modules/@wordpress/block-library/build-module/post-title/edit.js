import _extends from "@babel/runtime/helpers/esm/extends";
import { createElement, Fragment } from "@wordpress/element";

/**
 * External dependencies
 */
import classnames from 'classnames';
/**
 * WordPress dependencies
 */

import { AlignmentControl, BlockControls, InspectorControls, useBlockProps, PlainText } from '@wordpress/block-editor';
import { RawHTML } from '@wordpress/element';
import { ToggleControl, TextControl, PanelBody } from '@wordpress/components';
import { __ } from '@wordpress/i18n';
import { useEntityProp } from '@wordpress/core-data';
/**
 * Internal dependencies
 */

import HeadingLevelDropdown from '../heading/heading-level-dropdown';
import { useCanEditEntity } from '../utils/hooks';
export default function PostTitleEdit({
  attributes: {
    level,
    textAlign,
    isLink,
    rel,
    linkTarget
  },
  setAttributes,
  context: {
    postType,
    postId,
    queryId
  }
}) {
  const TagName = 0 === level ? 'p' : 'h' + level;
  const isDescendentOfQueryLoop = !!queryId;
  const userCanEdit = useCanEditEntity('postType', postType, postId);
  const [rawTitle = '', setTitle, fullTitle] = useEntityProp('postType', postType, 'title', postId);
  const [link] = useEntityProp('postType', postType, 'link', postId);
  const blockProps = useBlockProps({
    className: classnames({
      [`has-text-align-${textAlign}`]: textAlign
    })
  });
  let titleElement = createElement(TagName, blockProps, __('An example title'));

  if (postType && postId) {
    titleElement = userCanEdit && !isDescendentOfQueryLoop ? createElement(PlainText, _extends({
      tagName: TagName,
      placeholder: __('No Title'),
      value: rawTitle,
      onChange: setTitle,
      __experimentalVersion: 2
    }, blockProps)) : createElement(TagName, blockProps, createElement(RawHTML, {
      key: "html"
    }, fullTitle.rendered));
  }

  if (isLink && postType && postId) {
    titleElement = userCanEdit && !isDescendentOfQueryLoop ? createElement(TagName, blockProps, createElement(PlainText, {
      tagName: "a",
      href: link,
      target: linkTarget,
      rel: rel,
      placeholder: !rawTitle.length ? __('No Title') : null,
      value: rawTitle,
      onChange: setTitle,
      __experimentalVersion: 2
    })) : createElement(TagName, blockProps, createElement("a", {
      href: link,
      target: linkTarget,
      rel: rel,
      onClick: event => event.preventDefault()
    }, createElement(RawHTML, {
      key: "html"
    }, fullTitle.rendered)));
  }

  return createElement(Fragment, null, createElement(BlockControls, {
    group: "block"
  }, createElement(HeadingLevelDropdown, {
    selectedLevel: level,
    onChange: newLevel => setAttributes({
      level: newLevel
    })
  }), createElement(AlignmentControl, {
    value: textAlign,
    onChange: nextAlign => {
      setAttributes({
        textAlign: nextAlign
      });
    }
  })), createElement(InspectorControls, null, createElement(PanelBody, {
    title: __('Link settings')
  }, createElement(ToggleControl, {
    label: __('Make title a link'),
    onChange: () => setAttributes({
      isLink: !isLink
    }),
    checked: isLink
  }), isLink && createElement(Fragment, null, createElement(ToggleControl, {
    label: __('Open in new tab'),
    onChange: value => setAttributes({
      linkTarget: value ? '_blank' : '_self'
    }),
    checked: linkTarget === '_blank'
  }), createElement(TextControl, {
    label: __('Link rel'),
    value: rel,
    onChange: newRel => setAttributes({
      rel: newRel
    })
  })))), titleElement);
}
//# sourceMappingURL=edit.js.map
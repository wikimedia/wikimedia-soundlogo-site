import { createElement, Fragment } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { getBlobByURL, isBlobURL } from '@wordpress/blob';
import { Disabled, PanelBody, SelectControl, ToggleControl, withNotices } from '@wordpress/components';
import { BlockControls, BlockIcon, InspectorControls, MediaPlaceholder, MediaReplaceFlow, RichText, useBlockProps, store as blockEditorStore } from '@wordpress/block-editor';
import { useEffect } from '@wordpress/element';
import { __, _x } from '@wordpress/i18n';
import { useSelect } from '@wordpress/data';
import { audio as icon } from '@wordpress/icons';
import { createBlock } from '@wordpress/blocks';
/**
 * Internal dependencies
 */

import { createUpgradedEmbedBlock } from '../embed/util';
const ALLOWED_MEDIA_TYPES = ['audio'];

function AudioEdit({
  attributes,
  noticeOperations,
  setAttributes,
  onReplace,
  isSelected,
  noticeUI,
  insertBlocksAfter
}) {
  const {
    id,
    autoplay,
    caption,
    loop,
    preload,
    src
  } = attributes;
  const blockProps = useBlockProps();
  const mediaUpload = useSelect(select => {
    const {
      getSettings
    } = select(blockEditorStore);
    return getSettings().mediaUpload;
  }, []);
  useEffect(() => {
    if (!id && isBlobURL(src)) {
      const file = getBlobByURL(src);

      if (file) {
        mediaUpload({
          filesList: [file],
          onFileChange: ([{
            id: mediaId,
            url
          }]) => {
            setAttributes({
              id: mediaId,
              src: url
            });
          },
          onError: e => {
            setAttributes({
              src: undefined,
              id: undefined
            });
            noticeOperations.createErrorNotice(e);
          },
          allowedTypes: ALLOWED_MEDIA_TYPES
        });
      }
    }
  }, []);

  function toggleAttribute(attribute) {
    return newValue => {
      setAttributes({
        [attribute]: newValue
      });
    };
  }

  function onSelectURL(newSrc) {
    // Set the block's src from the edit component's state, and switch off
    // the editing UI.
    if (newSrc !== src) {
      // Check if there's an embed block that handles this URL.
      const embedBlock = createUpgradedEmbedBlock({
        attributes: {
          url: newSrc
        }
      });

      if (undefined !== embedBlock) {
        onReplace(embedBlock);
        return;
      }

      setAttributes({
        src: newSrc,
        id: undefined
      });
    }
  }

  function onUploadError(message) {
    noticeOperations.removeAllNotices();
    noticeOperations.createErrorNotice(message);
  }

  function getAutoplayHelp(checked) {
    return checked ? __('Autoplay may cause usability issues for some users.') : null;
  } // const { setAttributes, isSelected, noticeUI } = this.props;


  function onSelectAudio(media) {
    if (!media || !media.url) {
      // in this case there was an error and we should continue in the editing state
      // previous attributes should be removed because they may be temporary blob urls
      setAttributes({
        src: undefined,
        id: undefined
      });
      return;
    } // sets the block's attribute and updates the edit component from the
    // selected media, then switches off the editing UI


    setAttributes({
      src: media.url,
      id: media.id
    });
  }

  if (!src) {
    return createElement("div", blockProps, createElement(MediaPlaceholder, {
      icon: createElement(BlockIcon, {
        icon: icon
      }),
      onSelect: onSelectAudio,
      onSelectURL: onSelectURL,
      accept: "audio/*",
      allowedTypes: ALLOWED_MEDIA_TYPES,
      value: attributes,
      notices: noticeUI,
      onError: onUploadError
    }));
  }

  return createElement(Fragment, null, createElement(BlockControls, {
    group: "other"
  }, createElement(MediaReplaceFlow, {
    mediaId: id,
    mediaURL: src,
    allowedTypes: ALLOWED_MEDIA_TYPES,
    accept: "audio/*",
    onSelect: onSelectAudio,
    onSelectURL: onSelectURL,
    onError: onUploadError
  })), createElement(InspectorControls, null, createElement(PanelBody, {
    title: __('Audio settings')
  }, createElement(ToggleControl, {
    label: __('Autoplay'),
    onChange: toggleAttribute('autoplay'),
    checked: autoplay,
    help: getAutoplayHelp
  }), createElement(ToggleControl, {
    label: __('Loop'),
    onChange: toggleAttribute('loop'),
    checked: loop
  }), createElement(SelectControl, {
    label: _x('Preload', 'noun; Audio block parameter'),
    value: preload || '' // `undefined` is required for the preload attribute to be unset.
    ,
    onChange: value => setAttributes({
      preload: value || undefined
    }),
    options: [{
      value: '',
      label: __('Browser default')
    }, {
      value: 'auto',
      label: __('Auto')
    }, {
      value: 'metadata',
      label: __('Metadata')
    }, {
      value: 'none',
      label: _x('None', '"Preload" value')
    }]
  }))), createElement("figure", blockProps, createElement(Disabled, {
    isDisabled: !isSelected
  }, createElement("audio", {
    controls: "controls",
    src: src
  })), (!RichText.isEmpty(caption) || isSelected) && createElement(RichText, {
    tagName: "figcaption",
    "aria-label": __('Audio caption text'),
    placeholder: __('Add caption'),
    value: caption,
    onChange: value => setAttributes({
      caption: value
    }),
    inlineToolbar: true,
    __unstableOnSplitAtEnd: () => insertBlocksAfter(createBlock('core/paragraph'))
  })));
}

export default withNotices(AudioEdit);
//# sourceMappingURL=edit.js.map
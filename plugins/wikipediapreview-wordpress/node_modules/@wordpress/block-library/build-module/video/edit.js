import { createElement, Fragment } from "@wordpress/element";

/**
 * External dependencies
 */
import classnames from 'classnames';
/**
 * WordPress dependencies
 */

import { getBlobByURL, isBlobURL } from '@wordpress/blob';
import { BaseControl, Button, Disabled, PanelBody, Spinner, withNotices } from '@wordpress/components';
import { BlockControls, BlockIcon, InspectorControls, MediaPlaceholder, MediaUpload, MediaUploadCheck, MediaReplaceFlow, RichText, useBlockProps, store as blockEditorStore } from '@wordpress/block-editor';
import { useRef, useEffect } from '@wordpress/element';
import { __, sprintf } from '@wordpress/i18n';
import { useInstanceId } from '@wordpress/compose';
import { useSelect } from '@wordpress/data';
import { video as icon } from '@wordpress/icons';
import { createBlock } from '@wordpress/blocks';
/**
 * Internal dependencies
 */

import { createUpgradedEmbedBlock } from '../embed/util';
import VideoCommonSettings from './edit-common-settings';
import TracksEditor from './tracks-editor';
import Tracks from './tracks';
const ALLOWED_MEDIA_TYPES = ['video'];
const VIDEO_POSTER_ALLOWED_MEDIA_TYPES = ['image'];

function VideoEdit({
  isSelected,
  noticeUI,
  attributes,
  className,
  setAttributes,
  insertBlocksAfter,
  onReplace,
  noticeOperations
}) {
  const instanceId = useInstanceId(VideoEdit);
  const videoPlayer = useRef();
  const posterImageButton = useRef();
  const {
    id,
    caption,
    controls,
    poster,
    src,
    tracks
  } = attributes;
  const isTemporaryVideo = !id && isBlobURL(src);
  const mediaUpload = useSelect(select => select(blockEditorStore).getSettings().mediaUpload);
  useEffect(() => {
    if (!id && isBlobURL(src)) {
      const file = getBlobByURL(src);

      if (file) {
        mediaUpload({
          filesList: [file],
          onFileChange: ([{
            url
          }]) => {
            setAttributes({
              src: url
            });
          },
          onError: message => {
            noticeOperations.createErrorNotice(message);
          },
          allowedTypes: ALLOWED_MEDIA_TYPES
        });
      }
    }
  }, []);
  useEffect(() => {
    // Placeholder may be rendered.
    if (videoPlayer.current) {
      videoPlayer.current.load();
    }
  }, [poster]);

  function onSelectVideo(media) {
    var _media$image, _media$image2;

    if (!media || !media.url) {
      // in this case there was an error
      // previous attributes should be removed
      // because they may be temporary blob urls
      setAttributes({
        src: undefined,
        id: undefined,
        poster: undefined
      });
      return;
    } // sets the block's attribute and updates the edit component from the
    // selected media


    setAttributes({
      src: media.url,
      id: media.id,
      poster: ((_media$image = media.image) === null || _media$image === void 0 ? void 0 : _media$image.src) !== media.icon ? (_media$image2 = media.image) === null || _media$image2 === void 0 ? void 0 : _media$image2.src : undefined
    });
  }

  function onSelectURL(newSrc) {
    if (newSrc !== src) {
      // Check if there's an embed block that handles this URL.
      const embedBlock = createUpgradedEmbedBlock({
        attributes: {
          url: newSrc
        }
      });

      if (undefined !== embedBlock) {
        onReplace(embedBlock);
        return;
      }

      setAttributes({
        src: newSrc,
        id: undefined,
        poster: undefined
      });
    }
  }

  function onUploadError(message) {
    noticeOperations.removeAllNotices();
    noticeOperations.createErrorNotice(message);
  }

  const classes = classnames(className, {
    'is-transient': isTemporaryVideo
  });
  const blockProps = useBlockProps({
    className: classes
  });

  if (!src) {
    return createElement("div", blockProps, createElement(MediaPlaceholder, {
      icon: createElement(BlockIcon, {
        icon: icon
      }),
      onSelect: onSelectVideo,
      onSelectURL: onSelectURL,
      accept: "video/*",
      allowedTypes: ALLOWED_MEDIA_TYPES,
      value: attributes,
      notices: noticeUI,
      onError: onUploadError
    }));
  }

  function onSelectPoster(image) {
    setAttributes({
      poster: image.url
    });
  }

  function onRemovePoster() {
    setAttributes({
      poster: undefined
    }); // Move focus back to the Media Upload button.

    posterImageButton.current.focus();
  }

  const videoPosterDescription = `video-block__poster-image-description-${instanceId}`;
  return createElement(Fragment, null, createElement(BlockControls, {
    group: "block"
  }, createElement(TracksEditor, {
    tracks: tracks,
    onChange: newTracks => {
      setAttributes({
        tracks: newTracks
      });
    }
  })), createElement(BlockControls, {
    group: "other"
  }, createElement(MediaReplaceFlow, {
    mediaId: id,
    mediaURL: src,
    allowedTypes: ALLOWED_MEDIA_TYPES,
    accept: "video/*",
    onSelect: onSelectVideo,
    onSelectURL: onSelectURL,
    onError: onUploadError
  })), createElement(InspectorControls, null, createElement(PanelBody, {
    title: __('Video settings')
  }, createElement(VideoCommonSettings, {
    setAttributes: setAttributes,
    attributes: attributes
  }), createElement(MediaUploadCheck, null, createElement(BaseControl, {
    className: "editor-video-poster-control"
  }, createElement(BaseControl.VisualLabel, null, __('Poster image')), createElement(MediaUpload, {
    title: __('Select poster image'),
    onSelect: onSelectPoster,
    allowedTypes: VIDEO_POSTER_ALLOWED_MEDIA_TYPES,
    render: ({
      open
    }) => createElement(Button, {
      variant: "primary",
      onClick: open,
      ref: posterImageButton,
      "aria-describedby": videoPosterDescription
    }, !poster ? __('Select') : __('Replace'))
  }), createElement("p", {
    id: videoPosterDescription,
    hidden: true
  }, poster ? sprintf(
  /* translators: %s: poster image URL. */
  __('The current poster image url is %s'), poster) : __('There is no poster image currently selected')), !!poster && createElement(Button, {
    onClick: onRemovePoster,
    variant: "tertiary"
  }, __('Remove')))))), createElement("figure", blockProps, createElement(Disabled, {
    isDisabled: !isSelected
  }, createElement("video", {
    controls: controls,
    poster: poster,
    src: src,
    ref: videoPlayer
  }, createElement(Tracks, {
    tracks: tracks
  }))), isTemporaryVideo && createElement(Spinner, null), (!RichText.isEmpty(caption) || isSelected) && createElement(RichText, {
    tagName: "figcaption",
    "aria-label": __('Video caption text'),
    placeholder: __('Add caption'),
    value: caption,
    onChange: value => setAttributes({
      caption: value
    }),
    inlineToolbar: true,
    __unstableOnSplitAtEnd: () => insertBlocksAfter(createBlock('core/paragraph'))
  })));
}

export default withNotices(VideoEdit);
//# sourceMappingURL=edit.js.map
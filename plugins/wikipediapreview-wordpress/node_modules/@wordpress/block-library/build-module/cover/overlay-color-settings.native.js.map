{"version":3,"sources":["@wordpress/block-library/src/cover/overlay-color-settings.native.js"],"names":["__","getColorObjectByColorValue","getColorObjectByAttributeValues","getGradientValueBySlug","getGradientSlugByValue","__experimentalPanelColorGradientSettings","PanelColorGradientSettings","useSetting","useMemo","OverlayColorSettings","overlayColor","customOverlayColor","gradient","customGradient","setAttributes","EMPTY_ARRAY","colors","gradients","gradientValue","colorValue","color","settings","setOverlayAttribute","attributeName","value","undefined","onColorChange","colorObject","slug","onGradientChange","label"],"mappings":";;AAAA;AACA;AACA;AACA,SAASA,EAAT,QAAmB,iBAAnB;AAEA;AACA;AACA;;AACA,SACCC,0BADD,EAECC,+BAFD,EAGCC,sBAHD,EAICC,sBAJD,EAKCC,wCAAwC,IAAIC,0BAL7C,EAMCC,UAND,QAOO,yBAPP;AAQA,SAASC,OAAT,QAAwB,oBAAxB;;AAEA,SAASC,oBAAT,CAA+B;AAC9BC,EAAAA,YAD8B;AAE9BC,EAAAA,kBAF8B;AAG9BC,EAAAA,QAH8B;AAI9BC,EAAAA,cAJ8B;AAK9BC,EAAAA;AAL8B,CAA/B,EAMI;AACH,QAAMC,WAAW,GAAG,EAApB;AACA,QAAMC,MAAM,GAAGT,UAAU,CAAE,eAAF,CAAV,IAAiCQ,WAAhD;AACA,QAAME,SAAS,GAAGV,UAAU,CAAE,iBAAF,CAAV,IAAmCQ,WAArD;AAEA,QAAMG,aAAa,GAClBL,cAAc,IAAIV,sBAAsB,CAAEc,SAAF,EAAaL,QAAb,CADzC;AAGA,QAAMO,UAAU,GAAGjB,+BAA+B,CACjDc,MADiD,EAEjDN,YAFiD,EAGjDC,kBAHiD,CAA/B,CAIjBS,KAJF;AAMA,QAAMC,QAAQ,GAAGb,OAAO,CAAE,MAAM;AAC/B,UAAMc,mBAAmB,GAAG,CAAEC,aAAF,EAAiBC,KAAjB,KAA4B;AACvDV,MAAAA,aAAa,CAAE;AACd;AACAJ,QAAAA,YAAY,EAAEe,SAFA;AAGdd,QAAAA,kBAAkB,EAAEc,SAHN;AAIdb,QAAAA,QAAQ,EAAEa,SAJI;AAKdZ,QAAAA,cAAc,EAAEY,SALF;AAMd,SAAEF,aAAF,GAAmBC;AANL,OAAF,CAAb;AAQA,KATD;;AAWA,UAAME,aAAa,GAAKF,KAAF,IAAa;AAClC;AACA,UAAK,CAAEA,KAAP,EAAe;AACd;AACA;;AACD,YAAMG,WAAW,GAAG1B,0BAA0B,CAAEe,MAAF,EAAUQ,KAAV,CAA9C;;AACA,UAAKG,WAAL,aAAKA,WAAL,eAAKA,WAAW,CAAEC,IAAlB,EAAyB;AACxBN,QAAAA,mBAAmB,CAAE,cAAF,EAAkBK,WAAW,CAACC,IAA9B,CAAnB;AACA,OAFD,MAEO;AACNN,QAAAA,mBAAmB,CAAE,oBAAF,EAAwBE,KAAxB,CAAnB;AACA;AACD,KAXD;;AAaA,UAAMK,gBAAgB,GAAKL,KAAF,IAAa;AACrC;AACA,UAAK,CAAEA,KAAP,EAAe;AACd;AACA;;AACD,YAAMI,IAAI,GAAGxB,sBAAsB,CAAEa,SAAF,EAAaO,KAAb,CAAnC;;AACA,UAAKI,IAAL,EAAY;AACXN,QAAAA,mBAAmB,CAAE,UAAF,EAAcM,IAAd,CAAnB;AACA,OAFD,MAEO;AACNN,QAAAA,mBAAmB,CAAE,gBAAF,EAAoBE,KAApB,CAAnB;AACA;AACD,KAXD;;AAaA,WAAO,CACN;AACCM,MAAAA,KAAK,EAAE9B,EAAE,CAAE,OAAF,CADV;AAEC0B,MAAAA,aAFD;AAGCP,MAAAA,UAHD;AAICD,MAAAA,aAJD;AAKCW,MAAAA;AALD,KADM,CAAP;AASA,GA/CuB,EA+CrB,CAAEV,UAAF,EAAcD,aAAd,EAA6BF,MAA7B,EAAqCC,SAArC,CA/CqB,CAAxB;AAiDA,SACC,cAAC,0BAAD;AACC,IAAA,KAAK,EAAGjB,EAAE,CAAE,SAAF,CADX;AAEC,IAAA,WAAW,EAAG,KAFf;AAGC,IAAA,QAAQ,EAAGqB;AAHZ,IADD;AAOA;;AAED,eAAeZ,oBAAf","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { __ } from '@wordpress/i18n';\n\n/**\n * Internal dependencies\n */\nimport {\n\tgetColorObjectByColorValue,\n\tgetColorObjectByAttributeValues,\n\tgetGradientValueBySlug,\n\tgetGradientSlugByValue,\n\t__experimentalPanelColorGradientSettings as PanelColorGradientSettings,\n\tuseSetting,\n} from '@wordpress/block-editor';\nimport { useMemo } from '@wordpress/element';\n\nfunction OverlayColorSettings( {\n\toverlayColor,\n\tcustomOverlayColor,\n\tgradient,\n\tcustomGradient,\n\tsetAttributes,\n} ) {\n\tconst EMPTY_ARRAY = [];\n\tconst colors = useSetting( 'color.palette' ) || EMPTY_ARRAY;\n\tconst gradients = useSetting( 'color.gradients' ) || EMPTY_ARRAY;\n\n\tconst gradientValue =\n\t\tcustomGradient || getGradientValueBySlug( gradients, gradient );\n\n\tconst colorValue = getColorObjectByAttributeValues(\n\t\tcolors,\n\t\toverlayColor,\n\t\tcustomOverlayColor\n\t).color;\n\n\tconst settings = useMemo( () => {\n\t\tconst setOverlayAttribute = ( attributeName, value ) => {\n\t\t\tsetAttributes( {\n\t\t\t\t// clear all related attributes (only one should be set)\n\t\t\t\toverlayColor: undefined,\n\t\t\t\tcustomOverlayColor: undefined,\n\t\t\t\tgradient: undefined,\n\t\t\t\tcustomGradient: undefined,\n\t\t\t\t[ attributeName ]: value,\n\t\t\t} );\n\t\t};\n\n\t\tconst onColorChange = ( value ) => {\n\t\t\t// do nothing for falsy values\n\t\t\tif ( ! value ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst colorObject = getColorObjectByColorValue( colors, value );\n\t\t\tif ( colorObject?.slug ) {\n\t\t\t\tsetOverlayAttribute( 'overlayColor', colorObject.slug );\n\t\t\t} else {\n\t\t\t\tsetOverlayAttribute( 'customOverlayColor', value );\n\t\t\t}\n\t\t};\n\n\t\tconst onGradientChange = ( value ) => {\n\t\t\t// do nothing for falsy values\n\t\t\tif ( ! value ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst slug = getGradientSlugByValue( gradients, value );\n\t\t\tif ( slug ) {\n\t\t\t\tsetOverlayAttribute( 'gradient', slug );\n\t\t\t} else {\n\t\t\t\tsetOverlayAttribute( 'customGradient', value );\n\t\t\t}\n\t\t};\n\n\t\treturn [\n\t\t\t{\n\t\t\t\tlabel: __( 'Color' ),\n\t\t\t\tonColorChange,\n\t\t\t\tcolorValue,\n\t\t\t\tgradientValue,\n\t\t\t\tonGradientChange,\n\t\t\t},\n\t\t];\n\t}, [ colorValue, gradientValue, colors, gradients ] );\n\n\treturn (\n\t\t<PanelColorGradientSettings\n\t\t\ttitle={ __( 'Overlay' ) }\n\t\t\tinitialOpen={ false }\n\t\t\tsettings={ settings }\n\t\t/>\n\t);\n}\n\nexport default OverlayColorSettings;\n"]}
import { createElement, Fragment } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { useEntityProp } from '@wordpress/core-data';
import { __experimentalGetSettings, dateI18n } from '@wordpress/date';
import { InspectorControls, useBlockProps } from '@wordpress/block-editor';
import { PanelBody, CustomSelectControl } from '@wordpress/components';
import { __ } from '@wordpress/i18n';
export default function Edit({
  attributes,
  context,
  setAttributes
}) {
  const {
    className,
    format
  } = attributes;
  const {
    commentId
  } = context;

  const settings = __experimentalGetSettings();

  const [siteDateFormat] = useEntityProp('root', 'site', 'date_format');
  const [date] = useEntityProp('root', 'comment', 'date', commentId);
  const formatOptions = Object.values(settings.formats).map(formatOption => ({
    key: formatOption,
    name: dateI18n(formatOption, date)
  }));
  const resolvedFormat = format || siteDateFormat || settings.formats.date;
  const blockProps = useBlockProps({
    className
  });
  return createElement(Fragment, null, createElement(InspectorControls, null, createElement(PanelBody, {
    title: __('Format settings')
  }, createElement(CustomSelectControl, {
    hideLabelFromVision: true,
    label: __('Date Format'),
    options: formatOptions,
    onChange: ({
      selectedItem
    }) => setAttributes({
      format: selectedItem.key
    }),
    value: formatOptions.find(option => option.key === resolvedFormat)
  }))), createElement("div", blockProps, createElement("time", {
    dateTime: dateI18n('c', date)
  }, dateI18n(resolvedFormat, date))));
}
//# sourceMappingURL=edit.js.map
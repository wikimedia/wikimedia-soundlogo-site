import { createElement, Fragment } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { __ } from '@wordpress/i18n';
import { useState } from '@wordpress/element';
import { BlockControls, PlainText, transformStyles, useBlockProps, store as blockEditorStore } from '@wordpress/block-editor';
import { ToolbarButton, Disabled, SandBox, ToolbarGroup } from '@wordpress/components';
import { useSelect } from '@wordpress/data';
export default function HTMLEdit({
  attributes,
  setAttributes,
  isSelected
}) {
  const [isPreview, setIsPreview] = useState();
  const styles = useSelect(select => {
    // Default styles used to unset some of the styles
    // that might be inherited from the editor style.
    const defaultStyles = `
			html,body,:root {
				margin: 0 !important;
				padding: 0 !important;
				overflow: visible !important;
				min-height: auto !important;
			}
		`;
    return [defaultStyles, ...transformStyles(select(blockEditorStore).getSettings().styles)];
  }, []);

  function switchToPreview() {
    setIsPreview(true);
  }

  function switchToHTML() {
    setIsPreview(false);
  }

  return createElement("div", useBlockProps({
    className: 'block-library-html__edit'
  }), createElement(BlockControls, null, createElement(ToolbarGroup, null, createElement(ToolbarButton, {
    className: "components-tab-button",
    isPressed: !isPreview,
    onClick: switchToHTML
  }, createElement("span", null, "HTML")), createElement(ToolbarButton, {
    className: "components-tab-button",
    isPressed: isPreview,
    onClick: switchToPreview
  }, createElement("span", null, __('Preview'))))), createElement(Disabled.Consumer, null, isDisabled => isPreview || isDisabled ? createElement(Fragment, null, createElement(SandBox, {
    html: attributes.content,
    styles: styles
  }), !isSelected && createElement("div", {
    className: "block-library-html__preview-overlay"
  })) : createElement(PlainText, {
    value: attributes.content,
    onChange: content => setAttributes({
      content
    }),
    placeholder: __('Write HTMLâ€¦'),
    "aria-label": __('HTML')
  })));
}
//# sourceMappingURL=edit.js.map
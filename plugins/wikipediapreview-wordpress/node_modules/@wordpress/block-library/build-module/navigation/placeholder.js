import { createElement } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { createBlock } from '@wordpress/blocks';
import { Placeholder, Button, DropdownMenu, MenuGroup, MenuItem, Spinner } from '@wordpress/components';
import { forwardRef, useCallback, useState, useEffect } from '@wordpress/element';
import { __ } from '@wordpress/i18n';
import { navigation, chevronDown, Icon } from '@wordpress/icons';
/**
 * Internal dependencies
 */

import useNavigationEntities from './use-navigation-entities';
import PlaceholderPreview from './placeholder-preview';
import menuItemsToBlocks from './menu-items-to-blocks';

function NavigationPlaceholder({
  onCreate
}, ref) {
  const [selectedMenu, setSelectedMenu] = useState();
  const [isCreatingFromMenu, setIsCreatingFromMenu] = useState(false);
  const {
    isResolvingPages,
    menus,
    isResolvingMenus,
    menuItems,
    hasResolvedMenuItems,
    hasPages,
    hasMenus
  } = useNavigationEntities(selectedMenu);
  const isLoading = isResolvingPages || isResolvingMenus;
  const createFromMenu = useCallback(() => {
    const {
      innerBlocks: blocks
    } = menuItemsToBlocks(menuItems);
    const selectNavigationBlock = true;
    onCreate(blocks, selectNavigationBlock);
  }, [menuItems, menuItemsToBlocks, onCreate]);

  const onCreateFromMenu = () => {
    // If we have menu items, create the block right away.
    if (hasResolvedMenuItems) {
      createFromMenu();
      return;
    } // Otherwise, create the block when resolution finishes.


    setIsCreatingFromMenu(true);
  };

  const onCreateEmptyMenu = () => {
    onCreate([]);
  };

  const onCreateAllPages = () => {
    const block = [createBlock('core/page-list')];
    const selectNavigationBlock = true;
    onCreate(block, selectNavigationBlock);
  };

  useEffect(() => {
    // If the user selected a menu but we had to wait for menu items to
    // finish resolving, then create the block once resolution finishes.
    if (isCreatingFromMenu && hasResolvedMenuItems) {
      createFromMenu();
      setIsCreatingFromMenu(false);
    }
  }, [isCreatingFromMenu, hasResolvedMenuItems]);
  const toggleProps = {
    variant: 'primary',
    className: 'wp-block-navigation-placeholder__actions__dropdown'
  };
  return createElement(Placeholder, {
    className: "wp-block-navigation-placeholder"
  }, createElement(PlaceholderPreview, null), createElement("div", {
    className: "wp-block-navigation-placeholder__controls"
  }, isLoading && createElement("div", {
    ref: ref
  }, createElement(Spinner, null)), !isLoading && createElement("div", {
    ref: ref,
    className: "wp-block-navigation-placeholder__actions"
  }, createElement("div", {
    className: "wp-block-navigation-placeholder__actions__indicator"
  }, createElement(Icon, {
    icon: navigation
  }), " ", __('Navigation')), hasMenus ? createElement(DropdownMenu, {
    text: __('Add existing menu'),
    icon: chevronDown,
    toggleProps: toggleProps
  }, ({
    onClose
  }) => createElement(MenuGroup, null, menus.map(menu => {
    return createElement(MenuItem, {
      onClick: () => {
        setSelectedMenu(menu.id);
        onCreateFromMenu();
      },
      onClose: onClose,
      key: menu.id
    }, menu.name);
  }))) : undefined, hasPages ? createElement(Button, {
    variant: hasMenus ? 'tertiary' : 'primary',
    onClick: onCreateAllPages
  }, __('Add all pages')) : undefined, createElement(Button, {
    variant: "tertiary",
    onClick: onCreateEmptyMenu
  }, __('Start empty')))));
}

export default forwardRef(NavigationPlaceholder);
//# sourceMappingURL=placeholder.js.map
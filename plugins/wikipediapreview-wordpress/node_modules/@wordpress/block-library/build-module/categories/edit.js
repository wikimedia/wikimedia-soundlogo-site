import { createElement, Fragment } from "@wordpress/element";

/**
 * External dependencies
 */
import { times, unescape } from 'lodash';
/**
 * WordPress dependencies
 */

import { PanelBody, Placeholder, Spinner, ToggleControl, VisuallyHidden } from '@wordpress/components';
import { useInstanceId } from '@wordpress/compose';
import { useSelect } from '@wordpress/data';
import { InspectorControls, useBlockProps } from '@wordpress/block-editor';
import { __ } from '@wordpress/i18n';
import { pin } from '@wordpress/icons';
import { store as coreStore } from '@wordpress/core-data';
export default function CategoriesEdit({
  attributes: {
    displayAsDropdown,
    showHierarchy,
    showPostCounts
  },
  setAttributes
}) {
  const selectId = useInstanceId(CategoriesEdit, 'blocks-category-select');
  const {
    categories,
    isRequesting
  } = useSelect(select => {
    const {
      getEntityRecords,
      isResolving
    } = select(coreStore);
    const query = {
      per_page: -1,
      hide_empty: true,
      context: 'view'
    };
    return {
      categories: getEntityRecords('taxonomy', 'category', query),
      isRequesting: isResolving('getEntityRecords', ['taxonomy', 'category', query])
    };
  }, []);

  const getCategoriesList = parentId => {
    if (!(categories !== null && categories !== void 0 && categories.length)) {
      return [];
    }

    if (parentId === null) {
      return categories;
    }

    return categories.filter(({
      parent
    }) => parent === parentId);
  };

  const getCategoryListClassName = level => {
    return `wp-block-categories__list wp-block-categories__list-level-${level}`;
  };

  const toggleAttribute = attributeName => newValue => setAttributes({
    [attributeName]: newValue
  });

  const renderCategoryName = name => !name ? __('(Untitled)') : unescape(name).trim();

  const renderCategoryList = () => {
    const parentId = showHierarchy ? 0 : null;
    const categoriesList = getCategoriesList(parentId);
    return createElement("ul", {
      className: getCategoryListClassName(0)
    }, categoriesList.map(category => renderCategoryListItem(category, 0)));
  };

  const renderCategoryListItem = (category, level) => {
    const childCategories = getCategoriesList(category.id);
    const {
      id,
      link,
      count,
      name
    } = category;
    return createElement("li", {
      key: id
    }, createElement("a", {
      href: link,
      target: "_blank",
      rel: "noreferrer noopener"
    }, renderCategoryName(name)), showPostCounts && createElement("span", {
      className: "wp-block-categories__post-count"
    }, ` (${count})`), showHierarchy && !!childCategories.length && createElement("ul", {
      className: getCategoryListClassName(level + 1)
    }, childCategories.map(childCategory => renderCategoryListItem(childCategory, level + 1))));
  };

  const renderCategoryDropdown = () => {
    const parentId = showHierarchy ? 0 : null;
    const categoriesList = getCategoriesList(parentId);
    return createElement(Fragment, null, createElement(VisuallyHidden, {
      as: "label",
      htmlFor: selectId
    }, __('Categories')), createElement("select", {
      id: selectId,
      className: "wp-block-categories__dropdown"
    }, categoriesList.map(category => renderCategoryDropdownItem(category, 0))));
  };

  const renderCategoryDropdownItem = (category, level) => {
    const {
      id,
      count,
      name
    } = category;
    const childCategories = getCategoriesList(id);
    return [createElement("option", {
      key: id
    }, times(level * 3, () => '\xa0'), renderCategoryName(name), showPostCounts && ` (${count})`), showHierarchy && !!childCategories.length && childCategories.map(childCategory => renderCategoryDropdownItem(childCategory, level + 1))];
  };

  return createElement("div", useBlockProps(), createElement(InspectorControls, null, createElement(PanelBody, {
    title: __('Categories settings')
  }, createElement(ToggleControl, {
    label: __('Display as dropdown'),
    checked: displayAsDropdown,
    onChange: toggleAttribute('displayAsDropdown')
  }), createElement(ToggleControl, {
    label: __('Show hierarchy'),
    checked: showHierarchy,
    onChange: toggleAttribute('showHierarchy')
  }), createElement(ToggleControl, {
    label: __('Show post counts'),
    checked: showPostCounts,
    onChange: toggleAttribute('showPostCounts')
  }))), isRequesting && createElement(Placeholder, {
    icon: pin,
    label: __('Categories')
  }, createElement(Spinner, null)), !isRequesting && (categories === null || categories === void 0 ? void 0 : categories.length) === 0 && createElement("p", null, __('Your site does not have any posts, so there is nothing to display here at the moment.')), !isRequesting && (categories === null || categories === void 0 ? void 0 : categories.length) > 0 && (displayAsDropdown ? renderCategoryDropdown() : renderCategoryList()));
}
//# sourceMappingURL=edit.js.map
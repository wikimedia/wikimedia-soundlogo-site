{"version":3,"sources":["@wordpress/block-library/src/post-comments-count/edit.js"],"names":["classnames","AlignmentControl","BlockControls","Warning","useBlockProps","useState","useEffect","apiFetch","addQueryArgs","__","PostCommentsCountEdit","attributes","context","setAttributes","textAlign","postId","commentsCount","setCommentsCount","blockProps","className","currentPostId","path","post","parse","then","res","headers","get","nextAlign","undefined"],"mappings":";;AAAA;AACA;AACA;AACA,OAAOA,UAAP,MAAuB,YAAvB;AAEA;AACA;AACA;;AACA,SACCC,gBADD,EAECC,aAFD,EAGCC,OAHD,EAICC,aAJD,QAKO,yBALP;AAMA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,oBAApC;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,EAAT,QAAmB,iBAAnB;AAEA,eAAe,SAASC,qBAAT,CAAgC;AAC9CC,EAAAA,UAD8C;AAE9CC,EAAAA,OAF8C;AAG9CC,EAAAA;AAH8C,CAAhC,EAIX;AACH,QAAM;AAAEC,IAAAA;AAAF,MAAgBH,UAAtB;AACA,QAAM;AAAEI,IAAAA;AAAF,MAAaH,OAAnB;AACA,QAAM,CAAEI,aAAF,EAAiBC,gBAAjB,IAAsCZ,QAAQ,EAApD;AACA,QAAMa,UAAU,GAAGd,aAAa,CAAE;AACjCe,IAAAA,SAAS,EAAEnB,UAAU,CAAE;AACtB,OAAG,kBAAkBc,SAAW,EAAhC,GAAqCA;AADf,KAAF;AADY,GAAF,CAAhC;AAMAR,EAAAA,SAAS,CAAE,MAAM;AAChB,QAAK,CAAES,MAAP,EAAgB;AACf;AACA;;AACD,UAAMK,aAAa,GAAGL,MAAtB;AACAR,IAAAA,QAAQ,CAAE;AACTc,MAAAA,IAAI,EAAEb,YAAY,CAAE,iBAAF,EAAqB;AACtCc,QAAAA,IAAI,EAAEP;AADgC,OAArB,CADT;AAITQ,MAAAA,KAAK,EAAE;AAJE,KAAF,CAAR,CAKIC,IALJ,CAKYC,GAAF,IAAW;AACpB;AACA,UAAKL,aAAa,KAAKL,MAAvB,EAAgC;AAC/BE,QAAAA,gBAAgB,CAAEQ,GAAG,CAACC,OAAJ,CAAYC,GAAZ,CAAiB,YAAjB,CAAF,CAAhB;AACA;AACD,KAVD;AAWA,GAhBQ,EAgBN,CAAEZ,MAAF,CAhBM,CAAT;AAkBA,SACC,8BACC,cAAC,aAAD;AAAe,IAAA,KAAK,EAAC;AAArB,KACC,cAAC,gBAAD;AACC,IAAA,KAAK,EAAGD,SADT;AAEC,IAAA,QAAQ,EAAKc,SAAF,IAAiB;AAC3Bf,MAAAA,aAAa,CAAE;AAAEC,QAAAA,SAAS,EAAEc;AAAb,OAAF,CAAb;AACA;AAJF,IADD,CADD,EASC,qBAAUV,UAAV,EACGH,MAAM,IAAIC,aAAa,KAAKa,SAA5B,GACDb,aADC,GAGD,cAAC,OAAD,QACGP,EAAE,CAAE,4CAAF,CADL,CAJF,CATD,CADD;AAqBA","sourcesContent":["/**\n * External dependencies\n */\nimport classnames from 'classnames';\n\n/**\n * WordPress dependencies\n */\nimport {\n\tAlignmentControl,\n\tBlockControls,\n\tWarning,\n\tuseBlockProps,\n} from '@wordpress/block-editor';\nimport { useState, useEffect } from '@wordpress/element';\nimport apiFetch from '@wordpress/api-fetch';\nimport { addQueryArgs } from '@wordpress/url';\nimport { __ } from '@wordpress/i18n';\n\nexport default function PostCommentsCountEdit( {\n\tattributes,\n\tcontext,\n\tsetAttributes,\n} ) {\n\tconst { textAlign } = attributes;\n\tconst { postId } = context;\n\tconst [ commentsCount, setCommentsCount ] = useState();\n\tconst blockProps = useBlockProps( {\n\t\tclassName: classnames( {\n\t\t\t[ `has-text-align-${ textAlign }` ]: textAlign,\n\t\t} ),\n\t} );\n\n\tuseEffect( () => {\n\t\tif ( ! postId ) {\n\t\t\treturn;\n\t\t}\n\t\tconst currentPostId = postId;\n\t\tapiFetch( {\n\t\t\tpath: addQueryArgs( '/wp/v2/comments', {\n\t\t\t\tpost: postId,\n\t\t\t} ),\n\t\t\tparse: false,\n\t\t} ).then( ( res ) => {\n\t\t\t// Stale requests will have the `currentPostId` of an older closure.\n\t\t\tif ( currentPostId === postId ) {\n\t\t\t\tsetCommentsCount( res.headers.get( 'X-WP-Total' ) );\n\t\t\t}\n\t\t} );\n\t}, [ postId ] );\n\n\treturn (\n\t\t<>\n\t\t\t<BlockControls group=\"block\">\n\t\t\t\t<AlignmentControl\n\t\t\t\t\tvalue={ textAlign }\n\t\t\t\t\tonChange={ ( nextAlign ) => {\n\t\t\t\t\t\tsetAttributes( { textAlign: nextAlign } );\n\t\t\t\t\t} }\n\t\t\t\t/>\n\t\t\t</BlockControls>\n\t\t\t<div { ...blockProps }>\n\t\t\t\t{ postId && commentsCount !== undefined ? (\n\t\t\t\t\tcommentsCount\n\t\t\t\t) : (\n\t\t\t\t\t<Warning>\n\t\t\t\t\t\t{ __( 'Post Comments Count block: post not found.' ) }\n\t\t\t\t\t</Warning>\n\t\t\t\t) }\n\t\t\t</div>\n\t\t</>\n\t);\n}\n"]}
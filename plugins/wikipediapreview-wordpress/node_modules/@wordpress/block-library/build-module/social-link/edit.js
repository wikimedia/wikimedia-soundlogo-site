import { createElement } from "@wordpress/element";

/**
 * External dependencies
 */
import classNames from 'classnames';
/**
 * WordPress dependencies
 */

import { InspectorControls, URLPopover, URLInput, useBlockProps } from '@wordpress/block-editor';
import { Fragment, useState, useRef } from '@wordpress/element';
import { Button, PanelBody, PanelRow, TextControl } from '@wordpress/components';
import { __, sprintf } from '@wordpress/i18n';
import { keyboardReturn } from '@wordpress/icons';
/**
 * Internal dependencies
 */

import { getIconBySite, getNameBySite } from './social-list';

const SocialLinkURLPopover = ({
  url,
  setAttributes,
  setPopover,
  anchorRef
}) => createElement(URLPopover, {
  anchorRef: anchorRef === null || anchorRef === void 0 ? void 0 : anchorRef.current,
  onClose: () => setPopover(false)
}, createElement("form", {
  className: "block-editor-url-popover__link-editor",
  onSubmit: event => {
    event.preventDefault();
    setPopover(false);
  }
}, createElement("div", {
  className: "block-editor-url-input"
}, createElement(URLInput, {
  value: url,
  onChange: nextURL => setAttributes({
    url: nextURL
  }),
  placeholder: __('Enter address'),
  disableSuggestions: true
})), createElement(Button, {
  icon: keyboardReturn,
  label: __('Apply'),
  type: "submit"
})));

const SocialLinkEdit = ({
  attributes,
  context,
  isSelected,
  setAttributes
}) => {
  const {
    url,
    service,
    label
  } = attributes;
  const {
    iconColorValue,
    iconBackgroundColorValue
  } = context;
  const [showURLPopover, setPopover] = useState(false);
  const classes = classNames('wp-social-link', 'wp-social-link-' + service, {
    'wp-social-link__is-incomplete': !url
  });
  const ref = useRef();
  const IconComponent = getIconBySite(service);
  const socialLinkName = getNameBySite(service);
  const blockProps = useBlockProps({
    className: classes,
    style: {
      color: iconColorValue,
      backgroundColor: iconBackgroundColorValue
    }
  });
  return createElement(Fragment, null, createElement(InspectorControls, null, createElement(PanelBody, {
    title: sprintf(
    /* translators: %s: name of the social service. */
    __('%s label'), socialLinkName),
    initialOpen: false
  }, createElement(PanelRow, null, createElement(TextControl, {
    label: __('Link label'),
    help: __('Briefly describe the link to help screen reader users.'),
    value: label,
    onChange: value => setAttributes({
      label: value
    })
  })))), createElement("li", blockProps, createElement(Button, {
    ref: ref,
    onClick: () => setPopover(true)
  }, createElement(IconComponent, null), isSelected && showURLPopover && createElement(SocialLinkURLPopover, {
    url: url,
    setAttributes: setAttributes,
    setPopover: setPopover,
    anchorRef: ref
  }))));
};

export default SocialLinkEdit;
//# sourceMappingURL=edit.js.map
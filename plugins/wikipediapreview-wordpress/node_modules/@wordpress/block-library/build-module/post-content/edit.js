import { createElement } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { __ } from '@wordpress/i18n';
import { useSelect } from '@wordpress/data';
import { RawHTML } from '@wordpress/element';
import { useBlockProps, __experimentalUseInnerBlocksProps as useInnerBlocksProps, useSetting, __experimentalUseNoRecursiveRenders as useNoRecursiveRenders, store as blockEditorStore, Warning } from '@wordpress/block-editor';
import { useEntityProp, useEntityBlockEditor } from '@wordpress/core-data';
/**
 * Internal dependencies
 */

import { useCanEditEntity } from '../utils/hooks';

function ReadOnlyContent({
  userCanEdit,
  postType,
  postId
}) {
  const [,, content] = useEntityProp('postType', postType, 'content', postId);
  const blockProps = useBlockProps();
  return content !== null && content !== void 0 && content.protected && !userCanEdit ? createElement("div", blockProps, createElement(Warning, null, __('This content is password protected.'))) : createElement("div", blockProps, createElement(RawHTML, {
    key: "html"
  }, content === null || content === void 0 ? void 0 : content.rendered));
}

function EditableContent({
  layout,
  context = {}
}) {
  const {
    postType,
    postId
  } = context;
  const themeSupportsLayout = useSelect(select => {
    var _getSettings;

    const {
      getSettings
    } = select(blockEditorStore);
    return (_getSettings = getSettings()) === null || _getSettings === void 0 ? void 0 : _getSettings.supportsLayout;
  }, []);
  const defaultLayout = useSetting('layout') || {};
  const usedLayout = !!layout && layout.inherit ? defaultLayout : layout;
  const [blocks, onInput, onChange] = useEntityBlockEditor('postType', postType, {
    id: postId
  });
  const props = useInnerBlocksProps(useBlockProps({
    className: 'entry-content'
  }), {
    value: blocks,
    onInput,
    onChange,
    __experimentalLayout: themeSupportsLayout ? usedLayout : undefined
  });
  return createElement("div", props);
}

function Content(props) {
  const {
    context: {
      queryId,
      postType,
      postId
    } = {}
  } = props;
  const isDescendentOfQueryLoop = !!queryId;
  const userCanEdit = useCanEditEntity('postType', postType, postId);
  const isEditable = userCanEdit && !isDescendentOfQueryLoop;
  return isEditable ? createElement(EditableContent, props) : createElement(ReadOnlyContent, {
    userCanEdit: userCanEdit,
    postType: postType,
    postId: postId
  });
}

function Placeholder() {
  const blockProps = useBlockProps();
  return createElement("div", blockProps, createElement("p", null, __('This is a placeholder for post content.')));
}

function RecursionError() {
  const blockProps = useBlockProps();
  return createElement("div", blockProps, createElement(Warning, null, __('Block cannot be rendered inside itself.')));
}

export default function PostContentEdit({
  context,
  attributes
}) {
  const {
    postId: contextPostId,
    postType: contextPostType
  } = context;
  const {
    layout = {}
  } = attributes;
  const [hasAlreadyRendered, RecursionProvider] = useNoRecursiveRenders(contextPostId);

  if (contextPostId && contextPostType && hasAlreadyRendered) {
    return createElement(RecursionError, null);
  }

  return createElement(RecursionProvider, null, contextPostId && contextPostType ? createElement(Content, {
    context: context,
    layout: layout
  }) : createElement(Placeholder, null));
}
//# sourceMappingURL=edit.js.map
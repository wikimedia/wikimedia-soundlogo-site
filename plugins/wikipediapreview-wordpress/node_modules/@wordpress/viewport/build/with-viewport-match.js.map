{"version":3,"sources":["@wordpress/viewport/src/with-viewport-match.js"],"names":["withViewportMatch","queries","useViewPortQueriesResult","query","operator","breakpointName","split","undefined","WrappedComponent","props","queriesResult"],"mappings":";;;;;;;;;;;;;AAGA;;AAKA;;AARA;AACA;AACA;;AAGA;AACA;AACA;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,iBAAiB,GAAKC,OAAF,IAAe;AACxC,QAAMC,wBAAwB,GAAG,MAChC,uBAAWD,OAAX,EAAsBE,KAAF,IAAa;AAChC,QAAI,CAAEC,QAAF,EAAYC,cAAZ,IAA+BF,KAAK,CAACG,KAAN,CAAa,GAAb,CAAnC;;AACA,QAAKD,cAAc,KAAKE,SAAxB,EAAoC;AACnCF,MAAAA,cAAc,GAAGD,QAAjB;AACAA,MAAAA,QAAQ,GAAG,IAAX;AACA,KAL+B,CAMhC;AACA;AACA;AACA;;;AACA,WAAO,+BAAkBC,cAAlB,EAAkCD,QAAlC,CAAP;AACA,GAXD,CADD;;AAaA,SAAO,yCAA8BI,gBAAF,IAAwB;AAC1D,WAAO,mBAAQC,KAAF,IAAa;AACzB,YAAMC,aAAa,GAAGR,wBAAwB,EAA9C;AACA,aAAO,4BAAC,gBAAD,6BAAuBO,KAAvB,EAAoCC,aAApC,EAAP;AACA,KAHM,CAAP;AAIA,GALM,EAKJ,mBALI,CAAP;AAMA,CApBD;;eAsBeV,iB","sourcesContent":["/**\n * External dependencies\n */\nimport { mapValues } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport {\n\tcreateHigherOrderComponent,\n\tpure,\n\tuseViewportMatch,\n} from '@wordpress/compose';\n\n/**\n * Higher-order component creator, creating a new component which renders with\n * the given prop names, where the value passed to the underlying component is\n * the result of the query assigned as the object's value.\n *\n * @see isViewportMatch\n *\n * @param {Object} queries Object of prop name to viewport query.\n *\n * @example\n *\n * ```jsx\n * function MyComponent( { isMobile } ) {\n * \treturn (\n * \t\t<div>Currently: { isMobile ? 'Mobile' : 'Not Mobile' }</div>\n * \t);\n * }\n *\n * MyComponent = withViewportMatch( { isMobile: '< small' } )( MyComponent );\n * ```\n *\n * @return {Function} Higher-order component.\n */\nconst withViewportMatch = ( queries ) => {\n\tconst useViewPortQueriesResult = () =>\n\t\tmapValues( queries, ( query ) => {\n\t\t\tlet [ operator, breakpointName ] = query.split( ' ' );\n\t\t\tif ( breakpointName === undefined ) {\n\t\t\t\tbreakpointName = operator;\n\t\t\t\toperator = '>=';\n\t\t\t}\n\t\t\t// Hooks should unconditionally execute in the same order,\n\t\t\t// we are respecting that as from the static query of the HOC we generate\n\t\t\t// a hook that calls other hooks always in the same order (because the query never changes).\n\t\t\t// eslint-disable-next-line react-hooks/rules-of-hooks\n\t\t\treturn useViewportMatch( breakpointName, operator );\n\t\t} );\n\treturn createHigherOrderComponent( ( WrappedComponent ) => {\n\t\treturn pure( ( props ) => {\n\t\t\tconst queriesResult = useViewPortQueriesResult();\n\t\t\treturn <WrappedComponent { ...props } { ...queriesResult } />;\n\t\t} );\n\t}, 'withViewportMatch' );\n};\n\nexport default withViewportMatch;\n"]}
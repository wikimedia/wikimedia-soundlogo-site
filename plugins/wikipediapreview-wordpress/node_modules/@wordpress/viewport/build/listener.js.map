{"version":3,"sources":["@wordpress/viewport/src/listener.js"],"names":["addDimensionsEventListener","breakpoints","operators","setIsMatching","values","queries","query","matches","store","leading","result","width","name","condition","operator","list","window","matchMedia","addListener","key","join","addEventListener","flush"],"mappings":";;;;;;;AAGA;;AAKA;;AAKA;;AAbA;AACA;AACA;;AAGA;AACA;AACA;;AAGA;AACA;AACA;AAGA,MAAMA,0BAA0B,GAAG,CAAEC,WAAF,EAAeC,SAAf,KAA8B;AAChE;AACD;AACA;AACA;AACC,QAAMC,aAAa,GAAG,sBACrB,MAAM;AACL,UAAMC,MAAM,GAAG,uBAAWC,OAAX,EAAsBC,KAAF,IAAaA,KAAK,CAACC,OAAvC,CAAf;AACA,wBAAUC,YAAV,EAAkBL,aAAlB,CAAiCC,MAAjC;AACA,GAJoB,EAKrB;AAAEK,IAAAA,OAAO,EAAE;AAAX,GALqB,CAAtB;AAQA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACC,QAAMJ,OAAO,GAAG,oBACfJ,WADe,EAEf,CAAES,MAAF,EAAUC,KAAV,EAAiBC,IAAjB,KAA2B;AAC1B,yBAASV,SAAT,EAAoB,CAAEW,SAAF,EAAaC,QAAb,KAA2B;AAC9C,YAAMC,IAAI,GAAGC,MAAM,CAACC,UAAP,CACX,IAAIJ,SAAW,KAAKF,KAAO,KADhB,CAAb;AAGAI,MAAAA,IAAI,CAACG,WAAL,CAAkBf,aAAlB;AAEA,YAAMgB,GAAG,GAAG,CAAEL,QAAF,EAAYF,IAAZ,EAAmBQ,IAAnB,CAAyB,GAAzB,CAAZ;AACAV,MAAAA,MAAM,CAAES,GAAF,CAAN,GAAgBJ,IAAhB;AACA,KARD;AAUA,WAAOL,MAAP;AACA,GAdc,EAef,EAfe,CAAhB;AAkBAM,EAAAA,MAAM,CAACK,gBAAP,CAAyB,mBAAzB,EAA8ClB,aAA9C,EAxCgE,CA0ChE;;AACAA,EAAAA,aAAa;AACbA,EAAAA,aAAa,CAACmB,KAAd;AACA,CA7CD;;eA+CetB,0B","sourcesContent":["/**\n * External dependencies\n */\nimport { reduce, forEach, debounce, mapValues } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { dispatch } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport { store } from './store';\n\nconst addDimensionsEventListener = ( breakpoints, operators ) => {\n\t/**\n\t * Callback invoked when media query state should be updated. Is invoked a\n\t * maximum of one time per call stack.\n\t */\n\tconst setIsMatching = debounce(\n\t\t() => {\n\t\t\tconst values = mapValues( queries, ( query ) => query.matches );\n\t\t\tdispatch( store ).setIsMatching( values );\n\t\t},\n\t\t{ leading: true }\n\t);\n\n\t/**\n\t * Hash of breakpoint names with generated MediaQueryList for corresponding\n\t * media query.\n\t *\n\t * @see https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia\n\t * @see https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList\n\t *\n\t * @type {Object<string,MediaQueryList>}\n\t */\n\tconst queries = reduce(\n\t\tbreakpoints,\n\t\t( result, width, name ) => {\n\t\t\tforEach( operators, ( condition, operator ) => {\n\t\t\t\tconst list = window.matchMedia(\n\t\t\t\t\t`(${ condition }: ${ width }px)`\n\t\t\t\t);\n\t\t\t\tlist.addListener( setIsMatching );\n\n\t\t\t\tconst key = [ operator, name ].join( ' ' );\n\t\t\t\tresult[ key ] = list;\n\t\t\t} );\n\n\t\t\treturn result;\n\t\t},\n\t\t{}\n\t);\n\n\twindow.addEventListener( 'orientationchange', setIsMatching );\n\n\t// Set initial values\n\tsetIsMatching();\n\tsetIsMatching.flush();\n};\n\nexport default addDimensionsEventListener;\n"]}
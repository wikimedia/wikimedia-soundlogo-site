import _extends from "@babel/runtime/helpers/esm/extends";
import { createElement, Fragment } from "@wordpress/element";

/**
 * External dependencies
 */
// eslint-disable-next-line no-restricted-imports

/**
 * WordPress dependencies
 */
import { check, reset, moreVertical } from '@wordpress/icons';
import { __, sprintf } from '@wordpress/i18n';
/**
 * Internal dependencies
 */

import DropdownMenu from '../../dropdown-menu';
import MenuGroup from '../../menu-group';
import MenuItem from '../../menu-item';
import { useToolsPanelHeader } from './hook';
import { contextConnect } from '../../ui/context';

const noop = () => {};

const DefaultControlsGroup = ({
  items,
  onClose,
  toggleItem
}) => {
  if (!items.length) {
    return null;
  }

  return createElement(MenuGroup, null, items.map(([label, hasValue]) => {
    const icon = hasValue ? reset : check;
    const itemLabel = hasValue ? sprintf( // translators: %s: The name of the control being reset e.g. "Padding".
    __('Reset %s'), label) : undefined;
    return createElement(MenuItem, {
      key: label,
      icon: icon,
      isSelected: true,
      disabled: !hasValue,
      label: itemLabel,
      onClick: () => {
        toggleItem(label);
        onClose();
      },
      role: "menuitemcheckbox"
    }, label);
  }));
};

const OptionalControlsGroup = ({
  items,
  onClose,
  toggleItem
}) => {
  if (!items.length) {
    return null;
  }

  return createElement(MenuGroup, null, items.map(([label, isSelected]) => {
    const itemLabel = isSelected ? sprintf( // translators: %s: The name of the control being hidden and reset e.g. "Padding".
    __('Hide and reset %s'), label) : sprintf( // translators: %s: The name of the control to display e.g. "Padding".
    __('Show %s'), label);
    return createElement(MenuItem, {
      key: label,
      icon: isSelected && check,
      isSelected: isSelected,
      label: itemLabel,
      onClick: () => {
        toggleItem(label);
        onClose();
      },
      role: "menuitemcheckbox"
    }, label);
  }));
};

const ToolsPanelHeader = (props, forwardedRef) => {
  const {
    dropdownMenuClassName,
    hasMenuItems,
    label: labelText,
    menuItems,
    resetAll,
    toggleItem,
    ...headerProps
  } = useToolsPanelHeader(props);

  if (!labelText) {
    return null;
  }

  const defaultItems = Object.entries((menuItems === null || menuItems === void 0 ? void 0 : menuItems.default) || {});
  const optionalItems = Object.entries((menuItems === null || menuItems === void 0 ? void 0 : menuItems.optional) || {});
  return createElement("h2", _extends({}, headerProps, {
    ref: forwardedRef
  }), labelText, hasMenuItems && createElement(DropdownMenu, {
    icon: moreVertical,
    label: labelText,
    menuProps: {
      className: dropdownMenuClassName
    }
  }, ({
    onClose = noop
  }) => createElement(Fragment, null, createElement(DefaultControlsGroup, {
    items: defaultItems,
    onClose: onClose,
    toggleItem: toggleItem
  }), createElement(OptionalControlsGroup, {
    items: optionalItems,
    onClose: onClose,
    toggleItem: toggleItem
  }), createElement(MenuGroup, null, createElement(MenuItem, {
    variant: 'tertiary',
    onClick: () => {
      resetAll();
      onClose();
    }
  }, __('Reset all'))))));
};

const ConnectedToolsPanelHeader = contextConnect(ToolsPanelHeader, 'ToolsPanelHeader');
export default ConnectedToolsPanelHeader;
//# sourceMappingURL=component.js.map
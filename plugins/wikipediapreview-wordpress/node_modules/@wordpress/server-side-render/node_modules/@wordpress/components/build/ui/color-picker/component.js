"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _icons = require("@wordpress/icons");

var _compose = require("@wordpress/compose");

var _i18n = require("@wordpress/i18n");

var _context = require("../context");

var _hStack = require("../../h-stack");

var _spacer = require("../../spacer");

var _styles = require("./styles");

var _colorDisplay = require("./color-display");

var _colorInput = require("./color-input");

var _picker = require("./picker");

var _hooks = require("../../utils/hooks");

/**
 * External dependencies
 */
// eslint-disable-next-line no-restricted-imports

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
const options = [{
  label: 'RGB',
  value: 'rgb'
}, {
  label: 'HSL',
  value: 'hsl'
}, {
  label: 'Hex',
  value: 'hex'
}];

const getSafeColor = color => {
  return color ? {
    a: 1,
    ...color
  } : {
    h: 0,
    s: 0,
    l: 100,
    a: 1
  };
};

const ColorPicker = (props, forwardedRef) => {
  const {
    enableAlpha = false,
    color: colorProp,
    onChange,
    defaultValue,
    copyFormat,
    ...divProps
  } = (0, _context.useContextSystem)(props, 'ColorPicker');
  const [color, setColor] = (0, _hooks.useControlledValue)({
    onChange,
    value: colorProp,
    defaultValue
  }); // Debounce to prevent rapid changes from conflicting with one another.

  const debouncedSetColor = (0, _compose.useDebounce)(setColor);

  const handleChange = nextValue => {
    debouncedSetColor(nextValue);
  }; // Use a safe default value for the color and remove the possibility of `undefined`.


  const safeColor = getSafeColor(color);
  const [showInputs, setShowInputs] = (0, _element.useState)(false);
  const [colorType, setColorType] = (0, _element.useState)(copyFormat || 'hex');
  return (0, _element.createElement)(_styles.ColorfulWrapper, (0, _extends2.default)({
    ref: forwardedRef
  }, divProps), (0, _element.createElement)(_picker.Picker, {
    onChange: handleChange,
    color: safeColor,
    enableAlpha: enableAlpha
  }), (0, _element.createElement)(_styles.AuxiliaryColorArtefactWrapper, null, (0, _element.createElement)(_hStack.HStack, {
    justify: "space-between"
  }, showInputs ? (0, _element.createElement)(_styles.SelectControl, {
    options: options,
    value: colorType,
    onChange: nextColorType => setColorType(nextColorType),
    label: (0, _i18n.__)('Color format'),
    hideLabelFromVision: true
  }) : (0, _element.createElement)(_colorDisplay.ColorDisplay, {
    color: safeColor,
    colorType: copyFormat || colorType,
    enableAlpha: enableAlpha
  }), (0, _element.createElement)(_styles.DetailsControlButton, {
    isSmall: true,
    onClick: () => setShowInputs(!showInputs),
    icon: _icons.settings,
    isPressed: showInputs,
    label: showInputs ? (0, _i18n.__)('Hide detailed inputs') : (0, _i18n.__)('Show detailed inputs')
  })), (0, _element.createElement)(_spacer.Spacer, {
    margin: 4
  }), showInputs && (0, _element.createElement)(_colorInput.ColorInput, {
    colorType: colorType,
    color: safeColor,
    onChange: handleChange,
    enableAlpha: enableAlpha
  })));
};

const ConnectedColorPicker = (0, _context.contextConnect)(ColorPicker, 'ColorPicker');
var _default = ConnectedColorPicker;
exports.default = _default;
//# sourceMappingURL=component.js.map
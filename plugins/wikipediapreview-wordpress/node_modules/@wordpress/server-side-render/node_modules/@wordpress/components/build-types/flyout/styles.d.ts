/// <reference types="react" />
export declare const FlyoutContentView: import("@emotion/styled").StyledComponent<{
    state?: unknown;
} & Partial<import("reakit").PopoverOptions> & Omit<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "as" | "visible" | "hide" | "state" | "unstable_system" | "baseId" | "animating" | "animated" | "stopAnimation" | "modal" | "unstable_disclosureRef" | "unstable_popoverRef" | "unstable_popoverStyles" | "hideOnEsc" | "hideOnClickOutside" | "preventBodyScroll" | "unstable_initialFocusRef" | "unstable_finalFocusRef" | "unstable_orphan" | "unstable_autoFocusOnShow" | "unstable_autoFocusOnHide"> & {
    as?: "div" | undefined;
    children?: import("react").ReactNode | import("reakit-utils/ts/types").RenderProp<import("reakit-utils/ts/types").ExtractHTMLAttributes<any>>;
} & {
    theme?: import("@emotion/react").Theme | undefined;
}, {}, {}>;
export declare const CardView: import("@emotion/styled").StyledComponent<import("../surface/types").Props & {
    size?: import("../card/types").SizeOptions | undefined;
} & {
    elevation?: number | undefined;
    isBorderless?: boolean | undefined;
    isRounded?: boolean | undefined;
    isElevated?: boolean | undefined;
} & Omit<Pick<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "key" | keyof import("react").HTMLAttributes<HTMLDivElement>> & {
    ref?: ((instance: HTMLDivElement | null) => void) | import("react").RefObject<HTMLDivElement> | null | undefined;
}, "as" | "elevation" | "size" | keyof import("../surface/types").Props | "isBorderless" | "isRounded" | "isElevated"> & {
    as?: keyof JSX.IntrinsicElements | undefined;
} & {
    theme?: import("@emotion/react").Theme | undefined;
}, {}, {}>;
//# sourceMappingURL=styles.d.ts.map
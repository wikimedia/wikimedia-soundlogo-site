import type { CSSProperties, ReactNode } from 'react';
/**
 * Internal dependencies
 */
import type { WordPressComponentProps } from '../../ui/context';
import type { LabelPosition } from '../types';
declare type ContainerProps = {
    disabled?: boolean;
    hideLabel?: boolean;
    __unstableInputWidth?: CSSProperties['width'];
    labelPosition?: LabelPosition;
};
declare type RootProps = {
    isFocused?: boolean;
    labelPosition?: LabelPosition;
};
export declare const Root: import("@emotion/styled").StyledComponent<import("../../flex/types").FlexProps & Omit<Pick<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "key" | keyof import("react").HTMLAttributes<HTMLDivElement>> & {
    ref?: ((instance: HTMLDivElement | null) => void) | import("react").RefObject<HTMLDivElement> | null | undefined;
}, "as" | keyof import("../../flex/types").FlexProps> & {
    as?: keyof JSX.IntrinsicElements | undefined;
} & {
    theme?: import("@emotion/react").Theme | undefined;
} & RootProps, {}, {}>;
export declare const Container: import("@emotion/styled").StyledComponent<{
    theme?: import("@emotion/react").Theme | undefined;
    as?: import("react").ElementType<any> | undefined;
} & ContainerProps, import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, {}>;
declare type Size = 'default' | 'small';
declare type InputProps = {
    disabled?: boolean;
    inputSize?: Size;
    isDragging?: boolean;
    dragCursor?: CSSProperties['cursor'];
};
export declare const Input: import("@emotion/styled").StyledComponent<{
    theme?: import("@emotion/react").Theme | undefined;
    as?: import("react").ElementType<any> | undefined;
} & InputProps, import("react").DetailedHTMLProps<import("react").InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>, {}>;
export declare const Label: (props: WordPressComponentProps<{
    labelPosition?: LabelPosition;
    children: ReactNode;
}, 'label', false>) => JSX.Element;
export declare const LabelWrapper: import("@emotion/styled").StyledComponent<import("../../flex/types").FlexItemProps & Omit<Pick<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "key" | keyof import("react").HTMLAttributes<HTMLDivElement>> & {
    ref?: ((instance: HTMLDivElement | null) => void) | import("react").RefObject<HTMLDivElement> | null | undefined;
}, "as" | keyof import("../../flex/types").FlexItemProps> & {
    as?: keyof JSX.IntrinsicElements | undefined;
} & {
    theme?: import("@emotion/react").Theme | undefined;
}, {}, {}>;
declare type BackdropProps = {
    disabled?: boolean;
    isFocused?: boolean;
};
export declare const BackdropUI: import("@emotion/styled").StyledComponent<{
    theme?: import("@emotion/react").Theme | undefined;
    as?: import("react").ElementType<any> | undefined;
} & BackdropProps, import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, {}>;
export declare const Prefix: import("@emotion/styled").StyledComponent<{
    theme?: import("@emotion/react").Theme | undefined;
    as?: import("react").ElementType<any> | undefined;
}, import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>, {}>;
export declare const Suffix: import("@emotion/styled").StyledComponent<{
    theme?: import("@emotion/react").Theme | undefined;
    as?: import("react").ElementType<any> | undefined;
}, import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>, {}>;
export {};
//# sourceMappingURL=input-control-styles.d.ts.map
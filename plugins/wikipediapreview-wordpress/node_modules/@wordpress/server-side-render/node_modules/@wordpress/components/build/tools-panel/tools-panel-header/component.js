"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _icons = require("@wordpress/icons");

var _i18n = require("@wordpress/i18n");

var _dropdownMenu = _interopRequireDefault(require("../../dropdown-menu"));

var _menuGroup = _interopRequireDefault(require("../../menu-group"));

var _menuItem = _interopRequireDefault(require("../../menu-item"));

var _hook = require("./hook");

var _context = require("../../ui/context");

/**
 * External dependencies
 */
// eslint-disable-next-line no-restricted-imports

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
const noop = () => {};

const DefaultControlsGroup = ({
  items,
  onClose,
  toggleItem
}) => {
  if (!items.length) {
    return null;
  }

  return (0, _element.createElement)(_menuGroup.default, null, items.map(([label, hasValue]) => {
    const icon = hasValue ? _icons.reset : _icons.check;
    const itemLabel = hasValue ? (0, _i18n.sprintf)( // translators: %s: The name of the control being reset e.g. "Padding".
    (0, _i18n.__)('Reset %s'), label) : undefined;
    return (0, _element.createElement)(_menuItem.default, {
      key: label,
      icon: icon,
      isSelected: true,
      disabled: !hasValue,
      label: itemLabel,
      onClick: () => {
        toggleItem(label);
        onClose();
      },
      role: "menuitemcheckbox"
    }, label);
  }));
};

const OptionalControlsGroup = ({
  items,
  onClose,
  toggleItem
}) => {
  if (!items.length) {
    return null;
  }

  return (0, _element.createElement)(_menuGroup.default, null, items.map(([label, isSelected]) => {
    const itemLabel = isSelected ? (0, _i18n.sprintf)( // translators: %s: The name of the control being hidden and reset e.g. "Padding".
    (0, _i18n.__)('Hide and reset %s'), label) : (0, _i18n.sprintf)( // translators: %s: The name of the control to display e.g. "Padding".
    (0, _i18n.__)('Show %s'), label);
    return (0, _element.createElement)(_menuItem.default, {
      key: label,
      icon: isSelected && _icons.check,
      isSelected: isSelected,
      label: itemLabel,
      onClick: () => {
        toggleItem(label);
        onClose();
      },
      role: "menuitemcheckbox"
    }, label);
  }));
};

const ToolsPanelHeader = (props, forwardedRef) => {
  const {
    dropdownMenuClassName,
    hasMenuItems,
    label: labelText,
    menuItems,
    resetAll,
    toggleItem,
    ...headerProps
  } = (0, _hook.useToolsPanelHeader)(props);

  if (!labelText) {
    return null;
  }

  const defaultItems = Object.entries((menuItems === null || menuItems === void 0 ? void 0 : menuItems.default) || {});
  const optionalItems = Object.entries((menuItems === null || menuItems === void 0 ? void 0 : menuItems.optional) || {});
  return (0, _element.createElement)("h2", (0, _extends2.default)({}, headerProps, {
    ref: forwardedRef
  }), labelText, hasMenuItems && (0, _element.createElement)(_dropdownMenu.default, {
    icon: _icons.moreVertical,
    label: labelText,
    menuProps: {
      className: dropdownMenuClassName
    }
  }, ({
    onClose = noop
  }) => (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(DefaultControlsGroup, {
    items: defaultItems,
    onClose: onClose,
    toggleItem: toggleItem
  }), (0, _element.createElement)(OptionalControlsGroup, {
    items: optionalItems,
    onClose: onClose,
    toggleItem: toggleItem
  }), (0, _element.createElement)(_menuGroup.default, null, (0, _element.createElement)(_menuItem.default, {
    variant: 'tertiary',
    onClick: () => {
      resetAll();
      onClose();
    }
  }, (0, _i18n.__)('Reset all'))))));
};

const ConnectedToolsPanelHeader = (0, _context.contextConnect)(ToolsPanelHeader, 'ToolsPanelHeader');
var _default = ConnectedToolsPanelHeader;
exports.default = _default;
//# sourceMappingURL=component.js.map
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _context = require("../ui/context");

var _styles = require("./styles");

var _view = require("../view");

/**
 * Internal dependencies
 */

/**
 * @param {import('../ui/context').WordPressComponentProps<{ children: import('react').ReactNode }, 'div'>} props
 * @param {import('react').Ref<any>}                                                                        forwardedRef
 */
function VisuallyHidden(props, forwardedRef) {
  const {
    style: styleProp,
    ...contextProps
  } = (0, _context.useContextSystem)(props, 'VisuallyHidden');
  return (0, _element.createElement)(_view.View, (0, _extends2.default)({
    ref: forwardedRef
  }, contextProps, {
    style: { ..._styles.visuallyHidden,
      ...(styleProp || {})
    }
  }));
}
/**
 * `VisuallyHidden` is a component used to render text intended to be visually
 * hidden, but will show for alternate devices, for example a screen reader.
 *
 * @example
 * ```jsx
 * import { VisuallyHidden } from `@wordpress/components`;
 *
 * function Example() {
 * 	return (
 * 		<VisuallyHidden>
 * 			<label>Code is Poetry</label>
 * 		</VisuallyHidden>
 * 	);
 * }
 * ```
 */


const ConnectedVisuallyHidden = (0, _context.contextConnect)(VisuallyHidden, 'VisuallyHidden');
var _default = ConnectedVisuallyHidden;
exports.default = _default;
//# sourceMappingURL=component.js.map
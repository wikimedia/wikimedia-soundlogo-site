{"version":3,"sources":["@wordpress/blocks/src/api/parser/index.js"],"names":["parse","grammarParse","autop","getFreeformContentHandlerName","getUnregisteredTypeHandlerName","getBlockType","getSaveContent","validateBlock","createBlock","convertLegacyBlockNameAndAttributes","serializeRawBlock","getBlockAttributes","applyBlockDeprecatedVersions","applyBuiltInValidationFixes","convertLegacyBlocks","rawBlock","correctName","correctedAttributes","blockName","attrs","normalizeRawBlock","fallbackBlockName","rawBlockName","rawAttributes","rawInnerBlocks","innerBlocks","rawInnerHTML","innerHTML","trim","createMissingBlockType","unregisteredFallbackBlock","originalUndelimitedContent","isCommentDelimited","originalContent","originalName","innerContent","parseRawBlock","normalizedBlock","blockType","isFallbackBlock","parsedInnerBlocks","map","filter","innerBlock","parsedBlock","isValid","validationIssues","length","console","groupCollapsed","name","info","attributes","groupEnd","forEach","log","args","content","reduce","accumulator","block","push"],"mappings":"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","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { parse as grammarParse } from '@wordpress/block-serialization-default-parser';\nimport { autop } from '@wordpress/autop';\n\n/**\n * Internal dependencies\n */\nimport {\n\tgetFreeformContentHandlerName,\n\tgetUnregisteredTypeHandlerName,\n\tgetBlockType,\n} from '../registration';\nimport { getSaveContent } from '../serializer';\nimport { validateBlock } from '../validation';\nimport { createBlock } from '../factory';\nimport { convertLegacyBlockNameAndAttributes } from './convert-legacy-block';\nimport { serializeRawBlock } from './serialize-raw-block';\nimport { getBlockAttributes } from './get-block-attributes';\nimport { applyBlockDeprecatedVersions } from './apply-block-deprecated-versions';\nimport { applyBuiltInValidationFixes } from './apply-built-in-validation-fixes';\n\n/**\n * The raw structure of a block includes its attributes, inner\n * blocks, and inner HTML. It is important to distinguish inner blocks from\n * the HTML content of the block as only the latter is relevant for block\n * validation and edit operations.\n *\n * @typedef WPRawBlock\n *\n * @property {string=}         blockName    Block name\n * @property {Object=}         attrs        Block raw or comment attributes.\n * @property {string}          innerHTML    HTML content of the block.\n * @property {(string|null)[]} innerContent Content without inner blocks.\n * @property {WPRawBlock[]}    innerBlocks  Inner Blocks.\n */\n\n/**\n * Fully parsed block object.\n *\n * @typedef WPBlock\n *\n * @property {string}    name             Block name\n * @property {Object }   attributes       Block raw or comment attributes.\n * @property {WPBlock[]} innerBlocks      Inner Blocks.\n * @property {string}    originalContent  Original content of the block before validation fixes.\n * @property {boolean}   isValid          Whether the block is valid.\n * @property {Object[]}  validationIssues Validation issues.\n */\n\n/**\n * Convert legacy blocks to their canonical form. This function is used\n * both in the parser level for previous content and to convert such blocks\n * used in Custom Post Types templates.\n *\n * @param {WPRawBlock} rawBlock\n *\n * @return {WPRawBlock} The block's name and attributes, changed accordingly if a match was found\n */\nfunction convertLegacyBlocks( rawBlock ) {\n\tconst [\n\t\tcorrectName,\n\t\tcorrectedAttributes,\n\t] = convertLegacyBlockNameAndAttributes(\n\t\trawBlock.blockName,\n\t\trawBlock.attrs\n\t);\n\treturn {\n\t\t...rawBlock,\n\t\tblockName: correctName,\n\t\tattrs: correctedAttributes,\n\t};\n}\n\n/**\n * Normalize the raw block by applying the fallback block name if none given,\n * sanitize the parsed HTML...\n *\n * @param {WPRawBlock} rawBlock The raw block object.\n *\n * @return {WPRawBlock} The normalized block object.\n */\nexport function normalizeRawBlock( rawBlock ) {\n\tconst fallbackBlockName = getFreeformContentHandlerName();\n\n\t// If the grammar parsing don't produce any block name, use the freeform block.\n\tconst rawBlockName = rawBlock.blockName || getFreeformContentHandlerName();\n\tconst rawAttributes = rawBlock.attrs || {};\n\tconst rawInnerBlocks = rawBlock.innerBlocks || [];\n\tlet rawInnerHTML = rawBlock.innerHTML.trim();\n\n\t// Fallback content may be upgraded from classic content expecting implicit\n\t// automatic paragraphs, so preserve them. Assumes wpautop is idempotent,\n\t// meaning there are no negative consequences to repeated autop calls.\n\tif ( rawBlockName === fallbackBlockName ) {\n\t\trawInnerHTML = autop( rawInnerHTML ).trim();\n\t}\n\n\treturn {\n\t\t...rawBlock,\n\t\tblockName: rawBlockName,\n\t\tattrs: rawAttributes,\n\t\tinnerHTML: rawInnerHTML,\n\t\tinnerBlocks: rawInnerBlocks,\n\t};\n}\n\n/**\n * Uses the \"unregistered blockType\" to create a block object.\n *\n * @param {WPRawBlock} rawBlock block.\n *\n * @return {WPRawBlock} The unregistered block object.\n */\nfunction createMissingBlockType( rawBlock ) {\n\tconst unregisteredFallbackBlock =\n\t\tgetUnregisteredTypeHandlerName() || getFreeformContentHandlerName();\n\n\t// Preserve undelimited content for use by the unregistered type\n\t// handler. A block node's `innerHTML` isn't enough, as that field only\n\t// carries the block's own HTML and not its nested blocks.\n\tconst originalUndelimitedContent = serializeRawBlock( rawBlock, {\n\t\tisCommentDelimited: false,\n\t} );\n\n\t// Preserve full block content for use by the unregistered type\n\t// handler, block boundaries included.\n\tconst originalContent = serializeRawBlock( rawBlock, {\n\t\tisCommentDelimited: true,\n\t} );\n\n\treturn {\n\t\tblockName: unregisteredFallbackBlock,\n\t\tattrs: {\n\t\t\toriginalName: rawBlock.blockName,\n\t\t\toriginalContent,\n\t\t\toriginalUndelimitedContent,\n\t\t},\n\t\tinnerHTML: rawBlock.blockName ? originalContent : rawBlock.innerHTML,\n\t\tinnerBlocks: rawBlock.innerBlocks,\n\t\tinnerContent: rawBlock.innerContent,\n\t};\n}\n\n/**\n * Given a raw block returned by grammar parsing, returns a fully parsed block.\n *\n * @param {WPRawBlock} rawBlock The raw block object.\n *\n * @return {WPBlock} Fully parsed block.\n */\nexport function parseRawBlock( rawBlock ) {\n\tlet normalizedBlock = normalizeRawBlock( rawBlock );\n\n\t// During the lifecycle of the project, we renamed some old blocks\n\t// and transformed others to new blocks. To avoid breaking existing content,\n\t// we added this function to properly parse the old content.\n\tnormalizedBlock = convertLegacyBlocks( normalizedBlock );\n\n\t// Try finding the type for known block name.\n\tlet blockType = getBlockType( normalizedBlock.blockName );\n\n\t// If not blockType is found for the specified name, fallback to the \"unregistedBlockType\".\n\tif ( ! blockType ) {\n\t\tnormalizedBlock = createMissingBlockType( normalizedBlock );\n\t\tblockType = getBlockType( normalizedBlock.blockName );\n\t}\n\n\t// If it's an empty freeform block or there's no blockType (no missing block handler)\n\t// Then, just ignore the block.\n\t// It might be a good idea to throw a warning here.\n\t// TODO: I'm unsure about the unregisteredFallbackBlock check,\n\t// it might ignore some dynamic unregistered third party blocks wrongly.\n\tconst isFallbackBlock =\n\t\tnormalizedBlock.blockName === getFreeformContentHandlerName() ||\n\t\tnormalizedBlock.blockName === getUnregisteredTypeHandlerName();\n\tif ( ! blockType || ( ! normalizedBlock.innerHTML && isFallbackBlock ) ) {\n\t\treturn;\n\t}\n\n\t// Parse inner blocks recursively.\n\tconst parsedInnerBlocks = normalizedBlock.innerBlocks\n\t\t.map( parseRawBlock )\n\t\t// See https://github.com/WordPress/gutenberg/pull/17164.\n\t\t.filter( ( innerBlock ) => !! innerBlock );\n\n\t// Get the fully parsed block.\n\tlet parsedBlock = createBlock(\n\t\tnormalizedBlock.blockName,\n\t\tgetBlockAttributes(\n\t\t\tblockType,\n\t\t\tnormalizedBlock.innerHTML,\n\t\t\tnormalizedBlock.attrs\n\t\t),\n\t\tparsedInnerBlocks\n\t);\n\tparsedBlock.originalContent = normalizedBlock.innerHTML;\n\n\t// Attempt to validate the block.\n\tlet [ isValid, validationIssues ] = validateBlock( parsedBlock, blockType );\n\n\t// If the block is invalid, attempt some built-in fixes\n\t// like custom classNames handling.\n\tif ( ! isValid ) {\n\t\tparsedBlock = applyBuiltInValidationFixes( parsedBlock, blockType );\n\t\t// Attempt to validate the block once again after the built-in fixes.\n\t\t[ isValid, validationIssues ] = validateBlock( parsedBlock, blockType );\n\t}\n\tparsedBlock.isValid = isValid;\n\tparsedBlock.validationIssues = validationIssues;\n\n\t// Run the block deprecation and migrations.\n\t// This is performed on both invalid and valid blocks because\n\t// migration using the `migrate` functions should run even\n\t// if the output is deemed valid.\n\tparsedBlock = applyBlockDeprecatedVersions(\n\t\tparsedBlock,\n\t\tnormalizedBlock,\n\t\tblockType\n\t);\n\tif ( validationIssues && validationIssues.length > 0 ) {\n\t\tif ( parsedBlock.isValid ) {\n\t\t\t/* eslint-disable no-console */\n\t\t\tconsole.groupCollapsed( 'Updated Block: %s', blockType.name );\n\t\t\tconsole.info(\n\t\t\t\t'Block successfully updated for `%s` (%o).\\n\\nNew content generated by `save` function:\\n\\n%s\\n\\nContent retrieved from post body:\\n\\n%s',\n\t\t\t\tblockType.name,\n\t\t\t\tblockType,\n\t\t\t\tgetSaveContent( blockType, parsedBlock.attributes ),\n\t\t\t\tparsedBlock.originalContent\n\t\t\t);\n\t\t\tconsole.groupEnd();\n\t\t\t/* eslint-enable no-console */\n\t\t} else {\n\t\t\tvalidationIssues.forEach( ( { log, args } ) => log( ...args ) );\n\t\t}\n\t}\n\n\treturn parsedBlock;\n}\n\n/**\n * Utilizes an optimized token-driven parser based on the Gutenberg grammar spec\n * defined through a parsing expression grammar to take advantage of the regular\n * cadence provided by block delimiters -- composed syntactically through HTML\n * comments -- which, given a general HTML document as an input, returns a block\n * list array representation.\n *\n * This is a recursive-descent parser that scans linearly once through the input\n * document. Instead of directly recursing it utilizes a trampoline mechanism to\n * prevent stack overflow. This initial pass is mainly interested in separating\n * and isolating the blocks serialized in the document and manifestly not in the\n * content within the blocks.\n *\n * @see\n * https://developer.wordpress.org/block-editor/packages/packages-block-serialization-default-parser/\n *\n * @param {string} content The post content.\n *\n * @return {Array} Block list.\n */\nexport default function parse( content ) {\n\treturn grammarParse( content ).reduce( ( accumulator, rawBlock ) => {\n\t\tconst block = parseRawBlock( rawBlock );\n\t\tif ( block ) {\n\t\t\taccumulator.push( block );\n\t\t}\n\t\treturn accumulator;\n\t}, [] );\n}\n"]}
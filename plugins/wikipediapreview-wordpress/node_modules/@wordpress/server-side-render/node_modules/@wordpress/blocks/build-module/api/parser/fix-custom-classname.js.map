{"version":3,"sources":["@wordpress/blocks/src/api/parser/fix-custom-classname.js"],"names":["difference","omit","hasBlockSupport","getSaveContent","parseWithAttributeSchema","getHTMLRootElementClasses","innerHTML","parsed","type","source","selector","attribute","trim","split","fixCustomClassname","blockAttributes","blockType","attributesSansClassName","serialized","defaultClasses","actualClasses","customClasses","length","className","join"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,UAAT,EAAqBC,IAArB,QAAiC,QAAjC;AAEA;AACA;AACA;;AACA,SAASC,eAAT,QAAgC,iBAAhC;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,SAASC,wBAAT,QAAyC,wBAAzC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,yBAAT,CAAoCC,SAApC,EAAgD;AACtDA,EAAAA,SAAS,GAAI,+BAA+BA,SAAW,QAAvD;AAEA,QAAMC,MAAM,GAAGH,wBAAwB,CAAEE,SAAF,EAAa;AACnDE,IAAAA,IAAI,EAAE,QAD6C;AAEnDC,IAAAA,MAAM,EAAE,WAF2C;AAGnDC,IAAAA,QAAQ,EAAE,8BAHyC;AAInDC,IAAAA,SAAS,EAAE;AAJwC,GAAb,CAAvC;AAOA,SAAOJ,MAAM,GAAGA,MAAM,CAACK,IAAP,GAAcC,KAAd,CAAqB,KAArB,CAAH,GAAkC,EAA/C;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,kBAAT,CAA6BC,eAA7B,EAA8CC,SAA9C,EAAyDV,SAAzD,EAAqE;AAC3E,MAAKJ,eAAe,CAAEc,SAAF,EAAa,iBAAb,EAAgC,IAAhC,CAApB,EAA6D;AAC5D;AACA;AACA;AACA;AACA,UAAMC,uBAAuB,GAAGhB,IAAI,CAAEc,eAAF,EAAmB,CACtD,WADsD,CAAnB,CAApC;AAGA,UAAMG,UAAU,GAAGf,cAAc,CAAEa,SAAF,EAAaC,uBAAb,CAAjC;AACA,UAAME,cAAc,GAAGd,yBAAyB,CAAEa,UAAF,CAAhD;AACA,UAAME,aAAa,GAAGf,yBAAyB,CAAEC,SAAF,CAA/C;AACA,UAAMe,aAAa,GAAGrB,UAAU,CAAEoB,aAAF,EAAiBD,cAAjB,CAAhC;;AAEA,QAAKE,aAAa,CAACC,MAAnB,EAA4B;AAC3BP,MAAAA,eAAe,CAACQ,SAAhB,GAA4BF,aAAa,CAACG,IAAd,CAAoB,GAApB,CAA5B;AACA,KAFD,MAEO,IAAKN,UAAL,EAAkB;AACxB,aAAOH,eAAe,CAACQ,SAAvB;AACA;AACD;;AAED,SAAOR,eAAP;AACA","sourcesContent":["/**\n * External dependencies\n */\nimport { difference, omit } from 'lodash';\n\n/**\n * Internal dependencies\n */\nimport { hasBlockSupport } from '../registration';\nimport { getSaveContent } from '../serializer';\nimport { parseWithAttributeSchema } from './get-block-attributes';\n\n/**\n * Given an HTML string, returns an array of class names assigned to the root\n * element in the markup.\n *\n * @param {string} innerHTML Markup string from which to extract classes.\n *\n * @return {string[]} Array of class names assigned to the root element.\n */\nexport function getHTMLRootElementClasses( innerHTML ) {\n\tinnerHTML = `<div data-custom-class-name>${ innerHTML }</div>`;\n\n\tconst parsed = parseWithAttributeSchema( innerHTML, {\n\t\ttype: 'string',\n\t\tsource: 'attribute',\n\t\tselector: '[data-custom-class-name] > *',\n\t\tattribute: 'class',\n\t} );\n\n\treturn parsed ? parsed.trim().split( /\\s+/ ) : [];\n}\n\n/**\n * Given a parsed set of block attributes, if the block supports custom class\n * names and an unknown class (per the block's serialization behavior) is\n * found, the unknown classes are treated as custom classes. This prevents the\n * block from being considered as invalid.\n *\n * @param {Object} blockAttributes Original block attributes.\n * @param {Object} blockType       Block type settings.\n * @param {string} innerHTML       Original block markup.\n *\n * @return {Object} Filtered block attributes.\n */\nexport function fixCustomClassname( blockAttributes, blockType, innerHTML ) {\n\tif ( hasBlockSupport( blockType, 'customClassName', true ) ) {\n\t\t// To determine difference, serialize block given the known set of\n\t\t// attributes, with the exception of `className`. This will determine\n\t\t// the default set of classes. From there, any difference in innerHTML\n\t\t// can be considered as custom classes.\n\t\tconst attributesSansClassName = omit( blockAttributes, [\n\t\t\t'className',\n\t\t] );\n\t\tconst serialized = getSaveContent( blockType, attributesSansClassName );\n\t\tconst defaultClasses = getHTMLRootElementClasses( serialized );\n\t\tconst actualClasses = getHTMLRootElementClasses( innerHTML );\n\t\tconst customClasses = difference( actualClasses, defaultClasses );\n\n\t\tif ( customClasses.length ) {\n\t\t\tblockAttributes.className = customClasses.join( ' ' );\n\t\t} else if ( serialized ) {\n\t\t\tdelete blockAttributes.className;\n\t\t}\n\t}\n\n\treturn blockAttributes;\n}\n"]}